// THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY!

namespace RobloxRuntime
{
	// GENERATED ROBLOX INSTANCE CLASSES
	
	class Instance
	{
		public string GetDebugId()
		{
		}
	}
	
	class AnimationClipProvider : Instance
	{
		public AnimationClip GetAnimationClip()
		{
		}
		public AnimationClip GetAnimationClipById()
		{
		}
	}
	
	class Animator : Instance
	{
		public void StepAnimations()
		{
		}
	}
	
	class AssetService : Instance
	{
		public MeshPart CreateMeshPartAsync()
		{
		}
	}
	
	class CoreGui : BasePlayerGui
	{
	}
	
	class StarterGui : BasePlayerGui
	{
		public bool ShowDevelopmentGui { get; set; }
	}
	
	class ChangeHistoryService : Instance
	{
		public void FinishRecording()
		{
		}
		public object[] GetCanRedo()
		{
		}
		public object[] GetCanUndo()
		{
		}
		public bool IsRecordingInProgress()
		{
		}
		public void Redo()
		{
		}
		public void ResetWaypoints()
		{
		}
		public void SetEnabled()
		{
		}
		public void SetWaypoint()
		{
		}
		public string? TryBeginRecording()
		{
		}
		public void Undo()
		{
		}
		public ScriptSignal<Action<string, string?, string?, Enum.FinishRecordingOperation, object?>> OnRecordingFinished { get; }
		public ScriptSignal<Action<string, string?>> OnRecordingStarted { get; }
		public ScriptSignal<Action<string>> OnRedo { get; }
		public ScriptSignal<Action<string>> OnUndo { get; }
	}
	
	class DataModelSession : Instance
	{
	}
	
	class DebugSettings : Instance
	{
	}
	
	class DebuggerBreakpoint : Instance
	{
	}
	
	class DebuggerManager : Instance
	{
		public Instance? AddDebugger()
		{
		}
		public Instance[] GetDebuggers()
		{
		}
		public void Resume()
		{
		}
		public void StepIn()
		{
		}
		public void StepOut()
		{
		}
		public void StepOver()
		{
		}
		public ScriptSignal<Action<Instance?>> DebuggerAdded { get; }
		public ScriptSignal<Action<Instance?>> DebuggerRemoved { get; }
	}
	
	class DebuggerWatch : Instance
	{
	}
	
	class File : Instance
	{
		public string GetBinaryContents()
		{
		}
		public string GetTemporaryId()
		{
		}
	}
	
	class GameSettings : Instance
	{
	}
	
	class PluginGui : LayerCollector
	{
		public void BindToClose()
		{
		}
		public Vector2 GetRelativeMousePosition()
		{
		}
		public ScriptSignal<Action<object>> PluginDragDropped { get; }
		public ScriptSignal<Action<object>> PluginDragEntered { get; }
		public ScriptSignal<Action<object>> PluginDragLeft { get; }
		public ScriptSignal<Action<object>> PluginDragMoved { get; }
		public ScriptSignal<Action> WindowFocusReleased { get; }
		public ScriptSignal<Action> WindowFocused { get; }
	}
	
	class DockWidgetPluginGui : PluginGui
	{
	}
	
	class QWidgetPluginGui : PluginGui
	{
	}
	
	class KeyframeSequenceProvider : Instance
	{
		public Instance? GetKeyframeSequence()
		{
		}
		public Instance? GetKeyframeSequenceById()
		{
		}
	}
	
	class LuaSettings : Instance
	{
	}
	
	class MemStorageConnection : Instance
	{
		public void Disconnect()
		{
		}
	}
	
	class PluginMouse : Mouse
	{
		public ScriptSignal<Action<Instance[]>> DragEnter { get; }
	}
	
	class MultipleDocumentInterfaceInstance : Instance
	{
	}
	
	class NetworkPeer : Instance
	{
		public void SetOutgoingKBPSLimit()
		{
		}
	}
	
	class NetworkClient : NetworkPeer
	{
	}
	
	class NetworkServer : NetworkPeer
	{
	}
	
	class NetworkReplicator : Instance
	{
		public Instance? GetPlayer()
		{
		}
	}
	
	class ClientReplicator : NetworkReplicator
	{
	}
	
	class ServerReplicator : NetworkReplicator
	{
	}
	
	class NetworkSettings : Instance
	{
	}
	
	class Terrain : BasePart
	{
		public void ConvertToSmooth()
		{
		}
	}
	
	class WorldRoot : Model
	{
		public void IKMoveTo()
		{
		}
		public void StepPhysics()
		{
		}
	}
	
	class Workspace : WorldRoot
	{
		public void BreakJoints()
		{
		}
		public void MakeJoints()
		{
		}
		public void ZoomToExtents()
		{
		}
	}
	
	class PackageService : Instance
	{
	}
	
	class PhysicsSettings : Instance
	{
	}
	
	class Player : Instance
	{
		public void SetAccountAge()
		{
		}
		public void SetSuperSafeChat()
		{
		}
	}
	
	class Players : Instance
	{
		public void Chat()
		{
		}
		public void SetChatStyle()
		{
		}
		public void TeamChat()
		{
		}
	}
	
	class Plugin : Instance
	{
		public void Activate()
		{
		}
		public PluginAction CreatePluginAction()
		{
		}
		public PluginMenu CreatePluginMenu()
		{
		}
		public PluginToolbar CreateToolbar()
		{
		}
		public void Deactivate()
		{
		}
		public Enum.JointCreationMode GetJoinMode()
		{
		}
		public PluginMouse GetMouse()
		{
		}
		public Enum.RibbonTool GetSelectedRibbonTool()
		{
		}
		public object? GetSetting()
		{
		}
		public long GetStudioUserId()
		{
		}
		public Instance? Intersect()
		{
		}
		public bool IsActivated()
		{
		}
		public bool IsActivatedWithExclusiveMouse()
		{
		}
		public Instance[] Negate()
		{
		}
		public void OpenScript()
		{
		}
		public void OpenWikiPage()
		{
		}
		public void SaveSelectedToRoblox()
		{
		}
		public void SelectRibbonTool()
		{
		}
		public Instance[] Separate()
		{
		}
		public void SetSetting()
		{
		}
		public void StartDrag()
		{
		}
		public Instance? Union()
		{
		}
		public DockWidgetPluginGui CreateDockWidgetPluginGui()
		{
		}
		public Instance? ImportFbxAnimation()
		{
		}
		public Instance? ImportFbxRig()
		{
		}
		public long PromptForExistingAssetId()
		{
		}
		public bool PromptSaveSelection()
		{
		}
		public ScriptSignal<Action> Deactivation { get; }
		public ScriptSignal<Action> Unloading { get; }
	}
	
	class PluginAction : Instance
	{
		public ScriptSignal<Action> Triggered { get; }
	}
	
	class PluginDebugService : Instance
	{
	}
	
	class PluginDragEvent : Instance
	{
	}
	
	class PluginGuiService : Instance
	{
	}
	
	class PluginManagerInterface : Instance
	{
		public Instance? CreatePlugin()
		{
		}
		public void ExportPlace()
		{
		}
		public void ExportSelection()
		{
		}
	}
	
	class PluginMenu : Instance
	{
		public void AddAction()
		{
		}
		public void AddMenu()
		{
		}
		public Instance? AddNewAction()
		{
		}
		public void AddSeparator()
		{
		}
		public void Clear()
		{
		}
		public Instance? ShowAsync()
		{
		}
	}
	
	class PluginToolbar : Instance
	{
		public PluginToolbarButton CreateButton()
		{
		}
	}
	
	class PluginToolbarButton : Instance
	{
		public void SetActive()
		{
		}
		public ScriptSignal<Action> Click { get; }
	}
	
	class RenderSettings : Instance
	{
		public int GetMaxQualityLevel()
		{
		}
	}
	
	class RenderingTest : Instance
	{
		public void RenderdocTriggerCapture()
		{
		}
	}
	
	class RobloxPluginGuiService : Instance
	{
	}
	
	class RunService : Instance
	{
		public bool IsEdit()
		{
		}
		public void Pause()
		{
		}
		public void Reset()
		{
		}
		public void Run()
		{
		}
		public void Stop()
		{
		}
	}
	
	class ScriptContext : Instance
	{
		public void SetTimeout()
		{
		}
	}
	
	class ScriptDebugger : Instance
	{
		public Instance? AddWatch()
		{
		}
		public Instance[] GetBreakpoints()
		{
		}
		public object GetGlobals()
		{
		}
		public object GetLocals()
		{
		}
		public object[] GetStack()
		{
		}
		public object GetUpvalues()
		{
		}
		public object? GetWatchValue()
		{
		}
		public Instance[] GetWatches()
		{
		}
		public Instance? SetBreakpoint()
		{
		}
		public void SetGlobal()
		{
		}
		public void SetLocal()
		{
		}
		public void SetUpvalue()
		{
		}
		public ScriptSignal<Action<Instance?>> BreakpointAdded { get; }
		public ScriptSignal<Action<Instance?>> BreakpointRemoved { get; }
		public ScriptSignal<Action<int, Enum.BreakReason>> EncounteredBreak { get; }
		public ScriptSignal<Action> Resuming { get; }
		public ScriptSignal<Action<Instance?>> WatchAdded { get; }
		public ScriptSignal<Action<Instance?>> WatchRemoved { get; }
	}
	
	class ScriptDocument : Instance
	{
		public string GetLine()
		{
		}
		public int GetLineCount()
		{
		}
		public LuaSourceContainer GetScript()
		{
		}
		public string GetSelectedText()
		{
		}
		public object[] GetSelection()
		{
		}
		public object[] GetSelectionEnd()
		{
		}
		public object[] GetSelectionStart()
		{
		}
		public string GetText()
		{
		}
		public object[] GetViewport()
		{
		}
		public bool HasSelectedText()
		{
		}
		public bool IsCommandBar()
		{
		}
		public object[] CloseAsync()
		{
		}
		public object[] EditTextAsync()
		{
		}
		public object[] ForceSetSelectionAsync()
		{
		}
		public object[] RequestSetSelectionAsync()
		{
		}
		public ScriptSignal<Action<long, long, long, long>> SelectionChanged { get; }
		public ScriptSignal<Action<long, long>> ViewportChanged { get; }
	}
	
	class ScriptEditorService : Instance
	{
		public void DeregisterAutocompleteCallback()
		{
		}
		public void DeregisterScriptAnalysisCallback()
		{
		}
		public ScriptDocument FindScriptDocument()
		{
		}
		public string GetEditorSource()
		{
		}
		public Instance[] GetScriptDocuments()
		{
		}
		public void RegisterAutocompleteCallback()
		{
		}
		public void RegisterScriptAnalysisCallback()
		{
		}
		public object[] OpenScriptDocumentAsync()
		{
		}
		public void UpdateSourceAsync()
		{
		}
		public ScriptSignal<Action<ScriptDocument, object?>> TextDocumentDidChange { get; }
		public ScriptSignal<Action<ScriptDocument>> TextDocumentDidClose { get; }
		public ScriptSignal<Action<ScriptDocument>> TextDocumentDidOpen { get; }
	}
	
	class ScriptProfilerService : Instance
	{
		public void ClientRequestData()
		{
		}
		public void ClientStart()
		{
		}
		public void ClientStop()
		{
		}
		public object DeserializeJSON()
		{
		}
		public void ServerRequestData()
		{
		}
		public void ServerStart()
		{
		}
		public void ServerStop()
		{
		}
		public ScriptSignal<Action<Player, string>> OnNewData { get; }
	}
	
	class Selection : Instance
	{
		public void Add()
		{
		}
		public Instance[] Get()
		{
		}
		public void Remove()
		{
		}
		public void Set()
		{
		}
		public ScriptSignal<Action> SelectionChanged { get; }
	}
	
	class DataModel : ServiceProvider
	{
		public object[] GetJobsInfo()
		{
		}
		public Instance[] GetObjects()
		{
		}
		public void SetPlaceId()
		{
		}
		public void SetUniverseId()
		{
		}
	}
	
	class GlobalSettings : GenericSettings
	{
		public bool GetFFlag()
		{
		}
		public string GetFVariable()
		{
		}
	}
	
	class SoundService : Instance
	{
		public void OpenAttenuationCurveEditor()
		{
		}
	}
	
	class StatsItem : Instance
	{
		public double GetValue()
		{
		}
		public string GetValueString()
		{
		}
	}
	
	class RunningAverageItemDouble : StatsItem
	{
	}
	
	class RunningAverageItemInt : StatsItem
	{
	}
	
	class RunningAverageTimeIntervalItem : StatsItem
	{
	}
	
	class TotalCountTimeIntervalItem : StatsItem
	{
	}
	
	class StudioData : Instance
	{
	}
	
	class StudioService : Instance
	{
		public object GetClassIcon()
		{
		}
		public long GetUserId()
		{
		}
		public RaycastResult GizmoRaycast()
		{
		}
		public Instance? PromptImportFile()
		{
		}
		public Instance[] PromptImportFiles()
		{
		}
	}
	
	class StudioTheme : Instance
	{
		public Color3 GetColor()
		{
		}
	}
	
	class TaskScheduler : Instance
	{
	}
	
	class TerrainRegion : Instance
	{
		public void ConvertToSmooth()
		{
		}
	}
	
	class TestService : Instance
	{
		public void Check()
		{
		}
		public void Checkpoint()
		{
		}
		public void Done()
		{
		}
		public void Error()
		{
		}
		public void Fail()
		{
		}
		public void Message()
		{
		}
		public void Require()
		{
		}
		public object ScopeTime()
		{
		}
		public void Warn()
		{
		}
		public bool isFeatureEnabled()
		{
		}
		public void Run()
		{
		}
		public ScriptSignal<Action<bool, string, Instance?, int>> ServerCollectConditionalResult { get; }
		public ScriptSignal<Action<string, Instance?, int>> ServerCollectResult { get; }
	}
	
	class VersionControlService : Instance
	{
	}
	
}
