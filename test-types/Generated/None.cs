// THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY!

namespace RobloxRuntime
{
	// GENERATED ROBLOX INSTANCE CLASSES
	
	class Instance
	{
		public void AddTag()
		{
		}
		public void ClearAllChildren()
		{
		}
		public Instance? Clone()
		{
		}
		public void Destroy()
		{
		}
		public Instance? FindFirstAncestor()
		{
		}
		public Instance? FindFirstAncestorOfClass()
		{
		}
		public Instance? FindFirstAncestorWhichIsA()
		{
		}
		public Instance? FindFirstChild()
		{
		}
		public Instance? FindFirstChildOfClass()
		{
		}
		public Instance? FindFirstChildWhichIsA()
		{
		}
		public Instance? FindFirstDescendant()
		{
		}
		public Actor GetActor()
		{
		}
		public object? GetAttribute()
		{
		}
		public ScriptSignal GetAttributeChangedSignal()
		{
		}
		public object GetAttributes()
		{
		}
		public Instance[] GetChildren()
		{
		}
		public object[] GetDescendants()
		{
		}
		public string GetFullName()
		{
		}
		public ScriptSignal GetPropertyChangedSignal()
		{
		}
		public object[] GetTags()
		{
		}
		public bool HasTag()
		{
		}
		public bool IsA()
		{
		}
		public bool IsAncestorOf()
		{
		}
		public bool IsDescendantOf()
		{
		}
		public bool IsPropertyModified()
		{
		}
		public void RemoveTag()
		{
		}
		public void ResetPropertyToDefault()
		{
		}
		public void SetAttribute()
		{
		}
		public Instance? WaitForChild()
		{
		}
		public Instance? clone()
		{
		}
		public void destroy()
		{
		}
		public Instance? findFirstChild()
		{
		}
		public Instance[] getChildren()
		{
		}
		public bool isA()
		{
		}
		public bool isDescendantOf()
		{
		}
		public void remove()
		{
		}
		public ScriptSignal<Action<Instance?, Instance?>> AncestryChanged { get; }
		public ScriptSignal<Action<string>> AttributeChanged { get; }
		public ScriptSignal<Action<string>> Changed { get; }
		public ScriptSignal<Action<Instance?>> ChildAdded { get; }
		public ScriptSignal<Action<Instance?>> ChildRemoved { get; }
		public ScriptSignal<Action<Instance?>> DescendantAdded { get; }
		public ScriptSignal<Action<Instance?>> DescendantRemoving { get; }
		public ScriptSignal<Action> Destroying { get; }
		public ScriptSignal<Action<Instance?>> childAdded { get; }
	}
	
	class AccessoryDescription : Instance
	{
		public Instance? GetAppliedInstance()
		{
		}
	}
	
	class AccountService : Instance
	{
	}
	
	class Accoutrement : Instance
	{
	}
	
	class Accessory : Accoutrement
	{
	}
	
	class Hat : Accoutrement
	{
	}
	
	class ActivityHistoryService : Instance
	{
		public ScriptSignal<Action> EventNotificationReceived { get; }
	}
	
	class AdPortal : Instance
	{
	}
	
	class AnalyticsService : Instance
	{
		public void FireCustomEvent()
		{
		}
		public void FireEvent()
		{
		}
		public void FireInGameEconomyEvent()
		{
		}
		public void FireLogEvent()
		{
		}
		public void FirePlayerProgressionEvent()
		{
		}
		public void LogEconomyEvent()
		{
		}
		public void LogFunnelStepEvent()
		{
		}
		public void LogOnboardingFunnelStepEvent()
		{
		}
		public void LogProgressionCompleteEvent()
		{
		}
		public void LogProgressionEvent()
		{
		}
		public void LogProgressionFailEvent()
		{
		}
		public void LogProgressionStartEvent()
		{
		}
	}
	
	class Animation : Instance
	{
	}
	
	class AnimationClip : Instance
	{
	}
	
	class CurveAnimation : AnimationClip
	{
	}
	
	class KeyframeSequence : AnimationClip
	{
		public void AddKeyframe()
		{
		}
		public Instance[] GetKeyframes()
		{
		}
		public void RemoveKeyframe()
		{
		}
	}
	
	class AnimationClipProvider : Instance
	{
		public string RegisterActiveAnimationClip()
		{
		}
		public string RegisterAnimationClip()
		{
		}
		public AnimationClip GetAnimationClipAsync()
		{
		}
		public Instance? GetAnimations()
		{
		}
		public ClipEvaluator GetClipEvaluatorAsync()
		{
		}
	}
	
	class AnimationController : Instance
	{
		public object[] GetPlayingAnimationTracks()
		{
		}
		public AnimationTrack LoadAnimation()
		{
		}
		public ScriptSignal<Action<AnimationTrack>> AnimationPlayed { get; }
	}
	
	class AnimationFromVideoCreatorService : Instance
	{
	}
	
	class AnimationFromVideoCreatorStudioService : Instance
	{
	}
	
	class AnimationRigData : Instance
	{
	}
	
	class AnimationStreamTrack : Instance
	{
	}
	
	class AnimationTrack : Instance
	{
		public void AdjustSpeed()
		{
		}
		public void AdjustWeight()
		{
		}
		public ScriptSignal GetMarkerReachedSignal()
		{
		}
		public double GetTimeOfKeyframe()
		{
		}
		public void Play()
		{
		}
		public void Stop()
		{
		}
		public ScriptSignal<Action> DidLoop { get; }
		public ScriptSignal<Action> Ended { get; }
		public ScriptSignal<Action<string>> KeyframeReached { get; }
		public ScriptSignal<Action> Stopped { get; }
	}
	
	class Animator : Instance
	{
		public void ApplyJointVelocities()
		{
		}
		public object[] GetPlayingAnimationTracks()
		{
		}
		public AnimationTrack LoadAnimation()
		{
		}
		public void RegisterEvaluationParallelCallback()
		{
		}
		public ScriptSignal<Action<AnimationTrack>> AnimationPlayed { get; }
	}
	
	class AnnotationsService : Instance
	{
	}
	
	class AppLifecycleObserverService : Instance
	{
	}
	
	class AppUpdateService : Instance
	{
	}
	
	class AssetCounterService : Instance
	{
	}
	
	class AssetDeliveryProxy : Instance
	{
	}
	
	class AssetImportService : Instance
	{
	}
	
	class AssetImportSession : Instance
	{
		public ScriptSignal<Action<object>> UploadComplete { get; }
		public ScriptSignal<Action<float>> UploadProgress { get; }
	}
	
	class AssetManagerService : Instance
	{
	}
	
	class AssetPatchSettings : Instance
	{
	}
	
	class AssetService : Instance
	{
		public EditableImage CreateEditableImageAsync()
		{
		}
		public EditableMesh CreateEditableMeshAsync()
		{
		}
		public EditableMesh CreateEditableMeshFromPartAsync()
		{
		}
		public long CreatePlaceAsync()
		{
		}
		public long CreatePlaceInPlayerInventoryAsync()
		{
		}
		public object[] GetAssetIdsForPackage()
		{
		}
		public object[] GetAudioMetadataAsync()
		{
		}
		public object GetBundleDetailsAsync()
		{
		}
		public long GetCreatorAssetID()
		{
		}
		public Instance? GetGamePlacesAsync()
		{
		}
		public object[] PromptCreateAssetAsync()
		{
		}
		public object[] PromptImportAnimationClipFromVideoAsync()
		{
		}
		public void SavePlaceAsync()
		{
		}
		public AudioPages SearchAudio()
		{
		}
	}
	
	class Atmosphere : Instance
	{
	}
	
	class Attachment : Instance
	{
		public Vector3 GetAxis()
		{
		}
		public Instance[] GetConstraints()
		{
		}
		public Vector3 GetSecondaryAxis()
		{
		}
		public void SetAxis()
		{
		}
		public void SetSecondaryAxis()
		{
		}
	}
	
	class Bone : Attachment
	{
	}
	
	class AudioAnalyzer : Instance
	{
		public object[] GetConnectedWires()
		{
		}
		public object[] GetSpectrum()
		{
		}
	}
	
	class AudioChorus : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioCompressor : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioDeviceInput : Instance
	{
		public object[] GetConnectedWires()
		{
		}
		public object[] GetUserIdAccessList()
		{
		}
		public void SetUserIdAccessList()
		{
		}
	}
	
	class AudioDeviceOutput : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioDistortion : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioEcho : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioEmitter : Instance
	{
		public object[] GetConnectedWires()
		{
		}
		public object GetDistanceAttenuation()
		{
		}
		public void SetDistanceAttenuation()
		{
		}
	}
	
	class AudioEqualizer : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioFader : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioFlanger : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioListener : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioPitchShifter : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioPlayer : Instance
	{
		public object[] GetConnectedWires()
		{
		}
		public void Play()
		{
		}
		public void Stop()
		{
		}
		public ScriptSignal<Action> Ended { get; }
		public ScriptSignal<Action> Looped { get; }
	}
	
	class AudioReverb : Instance
	{
		public object[] GetConnectedWires()
		{
		}
	}
	
	class AudioSearchParams : Instance
	{
	}
	
	class AvatarChatService : Instance
	{
	}
	
	class AvatarCreationService : Instance
	{
		public void SendAnalyticsEvent()
		{
		}
		public AvatarGenerationSession CreateAvatarGenerationSessionAsync()
		{
		}
		public object GetAvatarGenerationConfig()
		{
		}
		public Instance? LoadAvatarModelAsync()
		{
		}
		public EditableImage LoadAvatarPreviewImageAsync()
		{
		}
		public object[] PromptCreateAvatarAsync()
		{
		}
		public object[] ValidateUGCAccessoryAsync()
		{
		}
		public object[] ValidateUGCBodyPartAsync()
		{
		}
		public object[] ValidateUGCFullBodyAsync()
		{
		}
	}
	
	class AvatarEditorService : Instance
	{
		public Enum.AccessoryType GetAccessoryType()
		{
		}
		public void PromptAllowInventoryReadAccess()
		{
		}
		public void PromptCreateOutfit()
		{
		}
		public void PromptDeleteOutfit()
		{
		}
		public void PromptRenameOutfit()
		{
		}
		public void PromptSaveAvatar()
		{
		}
		public void PromptSetFavorite()
		{
		}
		public void PromptUpdateOutfit()
		{
		}
		public HumanoidDescription CheckApplyDefaultClothing()
		{
		}
		public HumanoidDescription ConformToAvatarRules()
		{
		}
		public object GetAvatarRules()
		{
		}
		public object[] GetBatchItemDetails()
		{
		}
		public bool GetFavorite()
		{
		}
		public InventoryPages GetInventory()
		{
		}
		public object GetItemDetails()
		{
		}
		public object GetOutfitDetails()
		{
		}
		public OutfitPages GetOutfits()
		{
		}
		public object[] GetRecommendedAssets()
		{
		}
		public object[] GetRecommendedBundles()
		{
		}
		public CatalogPages SearchCatalog()
		{
		}
		public ScriptSignal<Action<Enum.AvatarPromptResult>> PromptAllowInventoryReadAccessCompleted { get; }
		public ScriptSignal<Action<Enum.AvatarPromptResult, object?>> PromptCreateOutfitCompleted { get; }
		public ScriptSignal<Action<Enum.AvatarPromptResult>> PromptDeleteOutfitCompleted { get; }
		public ScriptSignal<Action<Enum.AvatarPromptResult>> PromptRenameOutfitCompleted { get; }
		public ScriptSignal<Action<Enum.AvatarPromptResult, HumanoidDescription>> PromptSaveAvatarCompleted { get; }
		public ScriptSignal<Action<Enum.AvatarPromptResult>> PromptSetFavoriteCompleted { get; }
		public ScriptSignal<Action<Enum.AvatarPromptResult>> PromptUpdateOutfitCompleted { get; }
	}
	
	class AvatarGenerationJob : Instance
	{
		public object GetOutput()
		{
		}
		public void Cancel()
		{
		}
		public void Wait()
		{
		}
	}
	
	class Avatar2DGenerationJob : AvatarGenerationJob
	{
	}
	
	class Avatar3DGenerationJob : AvatarGenerationJob
	{
	}
	
	class AvatarGenerationSession : Instance
	{
		public Avatar3DGenerationJob GenerateAvatarModel()
		{
		}
		public Avatar2DGenerationJob GenerateAvatarPreview()
		{
		}
	}
	
	class AvatarImportService : Instance
	{
	}
	
	class Backpack : Instance
	{
	}
	
	class BadgeService : Instance
	{
		public bool AwardBadge()
		{
		}
		public object[] CheckUserBadgesAsync()
		{
		}
		public object GetBadgeInfoAsync()
		{
		}
		public bool IsDisabled()
		{
		}
		public bool IsLegal()
		{
		}
		public bool UserHasBadge()
		{
		}
		public bool UserHasBadgeAsync()
		{
		}
	}
	
	class BaseImportData : Instance
	{
		public ScriptSignal<Action<object>> StatusRemoved { get; }
		public ScriptSignal<Action<object>> StatusReported { get; }
	}
	
	class AnimationImportData : BaseImportData
	{
	}
	
	class FacsImportData : BaseImportData
	{
	}
	
	class GroupImportData : BaseImportData
	{
	}
	
	class JointImportData : BaseImportData
	{
	}
	
	class MaterialImportData : BaseImportData
	{
	}
	
	class MeshImportData : BaseImportData
	{
	}
	
	class RootImportData : BaseImportData
	{
	}
	
	class BasePlayerGui : Instance
	{
		public Instance[] GetGuiObjectsAtPosition()
		{
		}
	}
	
	class PlayerGui : BasePlayerGui
	{
		public float GetTopbarTransparency()
		{
		}
		public void SetTopbarTransparency()
		{
		}
		public ScriptSignal<Action<float>> TopbarTransparencyChangedSignal { get; }
	}
	
	class StarterGui : BasePlayerGui
	{
		public bool GetCoreGuiEnabled()
		{
		}
		public void SetCore()
		{
		}
		public void SetCoreGuiEnabled()
		{
		}
		public object? GetCore()
		{
		}
	}
	
	class BaseRemoteEvent : Instance
	{
	}
	
	class RemoteEvent : BaseRemoteEvent
	{
		public void FireAllClients()
		{
		}
		public void FireClient()
		{
		}
		public void FireServer()
		{
		}
		public ScriptSignal<Action<object[]>> OnClientEvent { get; }
		public ScriptSignal<Action<Player, object[]>> OnServerEvent { get; }
	}
	
	class UnreliableRemoteEvent : BaseRemoteEvent
	{
		public void FireAllClients()
		{
		}
		public void FireClient()
		{
		}
		public void FireServer()
		{
		}
		public ScriptSignal<Action<object[]>> OnClientEvent { get; }
		public ScriptSignal<Action<Player, object[]>> OnServerEvent { get; }
	}
	
	class BaseWrap : Instance
	{
	}
	
	class WrapLayer : BaseWrap
	{
	}
	
	class WrapTarget : BaseWrap
	{
	}
	
	class Beam : Instance
	{
		public void SetTextureOffset()
		{
		}
	}
	
	class BindableEvent : Instance
	{
		public void Fire()
		{
		}
		public ScriptSignal<Action<object[]>> Event { get; }
	}
	
	class BindableFunction : Instance
	{
		public object[] Invoke()
		{
		}
		public Action<object[]> OnInvoke { get; set; }
	}
	
	class BodyMover : Instance
	{
	}
	
	class BodyAngularVelocity : BodyMover
	{
	}
	
	class BodyForce : BodyMover
	{
	}
	
	class BodyGyro : BodyMover
	{
	}
	
	class BodyPosition : BodyMover
	{
		public Vector3 GetLastForce()
		{
		}
		public Vector3 lastForce()
		{
		}
		public ScriptSignal<Action> ReachedTarget { get; }
	}
	
	class BodyThrust : BodyMover
	{
	}
	
	class BodyVelocity : BodyMover
	{
		public Vector3 GetLastForce()
		{
		}
		public Vector3 lastForce()
		{
		}
	}
	
	class RocketPropulsion : BodyMover
	{
		public void Abort()
		{
		}
		public void Fire()
		{
		}
		public void fire()
		{
		}
		public ScriptSignal<Action> ReachedTarget { get; }
	}
	
	class BodyPartDescription : Instance
	{
	}
	
	class Breakpoint : Instance
	{
	}
	
	class BubbleChatMessageProperties : Instance
	{
	}
	
	class BulkImportService : Instance
	{
	}
	
	class CalloutService : Instance
	{
	}
	
	class Camera : Instance
	{
		public float GetLargestCutoffDistance()
		{
		}
		public float GetPanSpeed()
		{
		}
		public Instance[] GetPartsObscuringTarget()
		{
		}
		public CFrame GetRenderCFrame()
		{
		}
		public float GetRoll()
		{
		}
		public float GetTiltSpeed()
		{
		}
		public void Interpolate()
		{
		}
		public void PanUnits()
		{
		}
		public Ray ScreenPointToRay()
		{
		}
		public void SetCameraPanMode()
		{
		}
		public void SetRoll()
		{
		}
		public bool TiltUnits()
		{
		}
		public Ray ViewportPointToRay()
		{
		}
		public object[] WorldToScreenPoint()
		{
		}
		public object[] WorldToViewportPoint()
		{
		}
		public void ZoomToExtents()
		{
		}
		public ScriptSignal<Action> InterpolationFinished { get; }
	}
	
	class CaptureService : Instance
	{
		public void CaptureScreenshot()
		{
		}
		public void PromptSaveCapturesToGallery()
		{
		}
		public void PromptShareCapture()
		{
		}
		public ScriptSignal<Action> CaptureBegan { get; }
		public ScriptSignal<Action> CaptureEnded { get; }
		public ScriptSignal<Action<object>> CaptureSaved { get; }
		public ScriptSignal<Action<string>> UserCaptureSaved { get; }
	}
	
	class CharacterAppearance : Instance
	{
	}
	
	class BodyColors : CharacterAppearance
	{
	}
	
	class CharacterMesh : CharacterAppearance
	{
	}
	
	class Clothing : CharacterAppearance
	{
	}
	
	class Pants : Clothing
	{
	}
	
	class Shirt : Clothing
	{
	}
	
	class ShirtGraphic : CharacterAppearance
	{
	}
	
	class Chat : Instance
	{
		public void Chat()
		{
		}
		public object[] InvokeChatCallback()
		{
		}
		public void RegisterChatCallback()
		{
		}
		public void SetBubbleChatSettings()
		{
		}
		public bool CanUserChatAsync()
		{
		}
		public bool CanUsersChatAsync()
		{
		}
		public string FilterStringAsync()
		{
		}
		public string FilterStringForBroadcast()
		{
		}
		public string FilterStringForPlayerAsync()
		{
		}
		public ScriptSignal<Action<Instance?, string, Enum.ChatColor>> Chatted { get; }
	}
	
	class ChatbotUIService : Instance
	{
	}
	
	class ClickDetector : Instance
	{
		public ScriptSignal<Action<Player>> MouseClick { get; }
		public ScriptSignal<Action<Player>> MouseHoverEnter { get; }
		public ScriptSignal<Action<Player>> MouseHoverLeave { get; }
		public ScriptSignal<Action<Player>> RightMouseClick { get; }
		public ScriptSignal<Action<Player>> mouseClick { get; }
	}
	
	class DragDetector : ClickDetector
	{
		public RBXScriptConnection AddConstraintFunction()
		{
		}
		public CFrame GetReferenceFrame()
		{
		}
		public void RestartDrag()
		{
		}
		public void SetDragStyleFunction()
		{
		}
		public void SetPermissionPolicyFunction()
		{
		}
		public ScriptSignal<Action<Player, Ray, CFrame, OptionalCoordinateFrame, bool>> DragContinue { get; }
		public ScriptSignal<Action<Player, Ray, CFrame, OptionalCoordinateFrame, bool>> DragContinueReplicate { get; }
		public ScriptSignal<Action<Player>> DragEnd { get; }
		public ScriptSignal<Action<Player>> DragEndReplicate { get; }
		public ScriptSignal<Action<Player, Ray, CFrame, CFrame, BasePart, OptionalCoordinateFrame, bool>> DragStart { get; }
		public ScriptSignal<Action<Player, Ray, CFrame, CFrame, BasePart, OptionalCoordinateFrame, bool>> DragStartReplicate { get; }
	}
	
	class Clouds : Instance
	{
	}
	
	class Collaborator : Instance
	{
	}
	
	class CollaboratorsService : Instance
	{
	}
	
	class CollectionService : Instance
	{
		public void AddTag()
		{
		}
		public object[] GetAllTags()
		{
		}
		public ScriptSignal GetInstanceAddedSignal()
		{
		}
		public ScriptSignal GetInstanceRemovedSignal()
		{
		}
		public Instance[] GetTagged()
		{
		}
		public object[] GetTags()
		{
		}
		public bool HasTag()
		{
		}
		public void RemoveTag()
		{
		}
		public ScriptSignal<Action<Instance?>> ItemAdded { get; }
		public ScriptSignal<Action<Instance?>> ItemRemoved { get; }
		public ScriptSignal<Action<string>> TagAdded { get; }
		public ScriptSignal<Action<string>> TagRemoved { get; }
	}
	
	class CommandInstance : Instance
	{
	}
	
	class CommandService : Instance
	{
	}
	
	class CommerceService : Instance
	{
		public void PromptRealWorldCommerceBrowser()
		{
		}
		public bool UserEligibleForRealWorldCommerceAsync()
		{
		}
	}
	
	class Configuration : Instance
	{
	}
	
	class ConfigureServerService : Instance
	{
	}
	
	class ConnectivityService : Instance
	{
	}
	
	class Constraint : Instance
	{
		public Vector3 GetDebugAppliedForce()
		{
		}
		public Vector3 GetDebugAppliedTorque()
		{
		}
	}
	
	class AlignOrientation : Constraint
	{
	}
	
	class AlignPosition : Constraint
	{
	}
	
	class AngularVelocity : Constraint
	{
	}
	
	class AnimationConstraint : Constraint
	{
	}
	
	class BallSocketConstraint : Constraint
	{
	}
	
	class HingeConstraint : Constraint
	{
	}
	
	class LineForce : Constraint
	{
	}
	
	class LinearVelocity : Constraint
	{
	}
	
	class PlaneConstraint : Constraint
	{
	}
	
	class Plane : PlaneConstraint
	{
	}
	
	class RigidConstraint : Constraint
	{
	}
	
	class RodConstraint : Constraint
	{
	}
	
	class RopeConstraint : Constraint
	{
	}
	
	class SlidingBallConstraint : Constraint
	{
	}
	
	class CylindricalConstraint : SlidingBallConstraint
	{
	}
	
	class PrismaticConstraint : SlidingBallConstraint
	{
	}
	
	class SpringConstraint : Constraint
	{
	}
	
	class Torque : Constraint
	{
	}
	
	class TorsionSpringConstraint : Constraint
	{
	}
	
	class UniversalConstraint : Constraint
	{
	}
	
	class VectorForce : Constraint
	{
	}
	
	class ContentProvider : Instance
	{
		public Enum.AssetFetchStatus GetAssetFetchStatus()
		{
		}
		public ScriptSignal GetAssetFetchStatusChangedSignal()
		{
		}
		public object[] ListEncryptedAssets()
		{
		}
		public void Preload()
		{
		}
		public void RegisterDefaultEncryptionKey()
		{
		}
		public void RegisterDefaultSessionKey()
		{
		}
		public void RegisterEncryptedAsset()
		{
		}
		public void RegisterSessionEncryptedAsset()
		{
		}
		public void UnregisterDefaultEncryptionKey()
		{
		}
		public void UnregisterEncryptedAsset()
		{
		}
		public void PreloadAsync()
		{
		}
		public ScriptSignal<Action<string>> AssetFetchFailed { get; }
	}
	
	class ContextActionService : Instance
	{
		public void BindAction()
		{
		}
		public void BindActionAtPriority()
		{
		}
		public void BindActionToInputTypes()
		{
		}
		public void BindActivate()
		{
		}
		public object GetAllBoundActionInfo()
		{
		}
		public object GetBoundActionInfo()
		{
		}
		public string GetCurrentLocalToolIcon()
		{
		}
		public void SetDescription()
		{
		}
		public void SetImage()
		{
		}
		public void SetPosition()
		{
		}
		public void SetTitle()
		{
		}
		public void UnbindAction()
		{
		}
		public void UnbindActivate()
		{
		}
		public void UnbindAllActions()
		{
		}
		public Instance? GetButton()
		{
		}
		public ScriptSignal<Action<Instance?>> LocalToolEquipped { get; }
		public ScriptSignal<Action<Instance?>> LocalToolUnequipped { get; }
	}
	
	class Controller : Instance
	{
		public void BindButton()
		{
		}
		public bool GetButton()
		{
		}
		public void UnbindButton()
		{
		}
		public void bindButton()
		{
		}
		public bool getButton()
		{
		}
		public ScriptSignal<Action<Enum.Button>> ButtonChanged { get; }
	}
	
	class HumanoidController : Controller
	{
	}
	
	class SkateboardController : Controller
	{
		public ScriptSignal<Action<string>> AxisChanged { get; }
	}
	
	class VehicleController : Controller
	{
	}
	
	class ControllerBase : Instance
	{
	}
	
	class AirController : ControllerBase
	{
	}
	
	class ClimbController : ControllerBase
	{
	}
	
	class GroundController : ControllerBase
	{
	}
	
	class SwimController : ControllerBase
	{
	}
	
	class ControllerManager : Instance
	{
	}
	
	class ControllerService : Instance
	{
	}
	
	class ConversationalAIAcceptanceService : Instance
	{
	}
	
	class CoreScriptDebuggingManagerHelper : Instance
	{
	}
	
	class CreationDBService : Instance
	{
	}
	
	class CrossDMScriptChangeListener : Instance
	{
	}
	
	class DataModelMesh : Instance
	{
	}
	
	class BevelMesh : DataModelMesh
	{
	}
	
	class BlockMesh : BevelMesh
	{
	}
	
	class CylinderMesh : BevelMesh
	{
	}
	
	class EditableMesh : DataModelMesh
	{
		public long AddTriangle()
		{
		}
		public long AddVertex()
		{
		}
		public object[] FindClosestPointOnSurface()
		{
		}
		public long FindClosestVertex()
		{
		}
		public object[] FindVerticesWithinSphere()
		{
		}
		public object[] GetAdjacentTriangles()
		{
		}
		public object[] GetAdjacentVertices()
		{
		}
		public Vector3 GetPosition()
		{
		}
		public object[] GetTriangleVertices()
		{
		}
		public object[] GetTriangles()
		{
		}
		public Vector2 GetUV()
		{
		}
		public Color3 GetVertexColor()
		{
		}
		public float GetVertexColorAlpha()
		{
		}
		public Vector3 GetVertexNormal()
		{
		}
		public object[] GetVertices()
		{
		}
		public object[] RaycastLocal()
		{
		}
		public void RemoveTriangle()
		{
		}
		public void RemoveVertex()
		{
		}
		public void SetPosition()
		{
		}
		public void SetUV()
		{
		}
		public void SetVertexColor()
		{
		}
		public void SetVertexColorAlpha()
		{
		}
		public void SetVertexNormal()
		{
		}
		public MeshPart CreateMeshPartAsync()
		{
		}
	}
	
	class RobloxEditableMesh : EditableMesh
	{
	}
	
	class FileMesh : DataModelMesh
	{
	}
	
	class SpecialMesh : FileMesh
	{
	}
	
	class DataModelPatchService : Instance
	{
	}
	
	class DataStoreGetOptions : Instance
	{
	}
	
	class DataStoreIncrementOptions : Instance
	{
		public object GetMetadata()
		{
		}
		public void SetMetadata()
		{
		}
	}
	
	class DataStoreInfo : Instance
	{
	}
	
	class DataStoreKey : Instance
	{
	}
	
	class DataStoreKeyInfo : Instance
	{
		public object GetMetadata()
		{
		}
		public object[] GetUserIds()
		{
		}
	}
	
	class DataStoreObjectVersionInfo : Instance
	{
	}
	
	class DataStoreOptions : Instance
	{
		public void SetExperimentalFeatures()
		{
		}
	}
	
	class DataStoreService : Instance
	{
		public GlobalDataStore GetDataStore()
		{
		}
		public GlobalDataStore GetGlobalDataStore()
		{
		}
		public OrderedDataStore GetOrderedDataStore()
		{
		}
		public int GetRequestBudgetForRequestType()
		{
		}
		public DataStoreListingPages ListDataStoresAsync()
		{
		}
	}
	
	class DataStoreSetOptions : Instance
	{
		public object GetMetadata()
		{
		}
		public void SetMetadata()
		{
		}
	}
	
	class Debris : Instance
	{
		public void AddItem()
		{
		}
		public void addItem()
		{
		}
	}
	
	class DebuggablePluginWatcher : Instance
	{
	}
	
	class DebuggerConnection : Instance
	{
	}
	
	class LocalDebuggerConnection : DebuggerConnection
	{
	}
	
	class DebuggerConnectionManager : Instance
	{
	}
	
	class DebuggerLuaResponse : Instance
	{
	}
	
	class DebuggerUIService : Instance
	{
	}
	
	class DebuggerVariable : Instance
	{
	}
	
	class DeviceIdService : Instance
	{
	}
	
	class Dialog : Instance
	{
		public Instance[] GetCurrentPlayers()
		{
		}
		public ScriptSignal<Action<Instance?, Instance?>> DialogChoiceSelected { get; }
	}
	
	class DialogChoice : Instance
	{
	}
	
	class Dragger : Instance
	{
		public void AxisRotate()
		{
		}
		public void MouseDown()
		{
		}
		public void MouseMove()
		{
		}
		public void MouseUp()
		{
		}
	}
	
	class DraggerService : Instance
	{
	}
	
	class EditableImage : Instance
	{
		public EditableImage Copy()
		{
		}
		public void Crop()
		{
		}
		public void DrawCircle()
		{
		}
		public void DrawImage()
		{
		}
		public void DrawLine()
		{
		}
		public void DrawProjectionImage()
		{
		}
		public void DrawRectangle()
		{
		}
		public object[] ReadPixels()
		{
		}
		public void Resize()
		{
		}
		public void Rotate()
		{
		}
		public void WritePixels()
		{
		}
	}
	
	class RobloxEditableImage : EditableImage
	{
	}
	
	class EngineAPICloudProcessingService : Instance
	{
	}
	
	class EulerRotationCurve : Instance
	{
		public object[] GetAnglesAtTime()
		{
		}
		public CFrame GetRotationAtTime()
		{
		}
		public FloatCurve X()
		{
		}
		public FloatCurve Y()
		{
		}
		public FloatCurve Z()
		{
		}
	}
	
	class EventIngestService : Instance
	{
	}
	
	class ExampleService : Instance
	{
	}
	
	class ExperienceAuthService : Instance
	{
	}
	
	class ExperienceInviteOptions : Instance
	{
	}
	
	class ExperienceNotificationService : Instance
	{
		public void PromptOptIn()
		{
		}
		public bool CanPromptOptInAsync()
		{
		}
		public ScriptSignal<Action> OptInPromptClosed { get; }
	}
	
	class ExperienceService : Instance
	{
	}
	
	class ExperienceStateCaptureService : Instance
	{
	}
	
	class Explosion : Instance
	{
		public ScriptSignal<Action<BasePart, float>> Hit { get; }
	}
	
	class FaceAnimatorService : Instance
	{
	}
	
	class FaceControls : Instance
	{
	}
	
	class FaceInstance : Instance
	{
	}
	
	class Decal : FaceInstance
	{
	}
	
	class Texture : Decal
	{
	}
	
	class FacialAnimationRecordingService : Instance
	{
	}
	
	class FacialAnimationStreamingServiceStats : Instance
	{
	}
	
	class FacialAnimationStreamingServiceV2 : Instance
	{
	}
	
	class FacialAnimationStreamingSubsessionStats : Instance
	{
	}
	
	class Feature : Instance
	{
	}
	
	class Hole : Feature
	{
	}
	
	class MotorFeature : Feature
	{
	}
	
	class Fire : Instance
	{
	}
	
	class FloatCurve : Instance
	{
		public FloatCurveKey GetKeyAtIndex()
		{
		}
		public object[] GetKeyIndicesAtTime()
		{
		}
		public object[] GetKeys()
		{
		}
		public float? GetValueAtTime()
		{
		}
		public object[] InsertKey()
		{
		}
		public int RemoveKeyAtIndex()
		{
		}
		public int SetKeys()
		{
		}
	}
	
	class Folder : Instance
	{
	}
	
	class ForceField : Instance
	{
	}
	
	class GamePassService : Instance
	{
		public bool PlayerHasPass()
		{
		}
	}
	
	class GamepadService : Instance
	{
		public void DisableGamepadCursor()
		{
		}
		public void EnableGamepadCursor()
		{
		}
	}
	
	class GenericChallengeService : Instance
	{
	}
	
	class GeometryService : Instance
	{
		public object[] CalculateConstraintsToPreserve()
		{
		}
		public object[] IntersectAsync()
		{
		}
		public object[] SubtractAsync()
		{
		}
		public object[] UnionAsync()
		{
		}
	}
	
	class GetTextBoundsParams : Instance
	{
	}
	
	class GlobalDataStore : Instance
	{
		public RBXScriptConnection OnUpdate()
		{
		}
		public object[] GetAsync()
		{
		}
		public object? IncrementAsync()
		{
		}
		public object[] RemoveAsync()
		{
		}
		public object? SetAsync()
		{
		}
		public object[] UpdateAsync()
		{
		}
	}
	
	class DataStore : GlobalDataStore
	{
		public object[] GetVersionAsync()
		{
		}
		public DataStoreKeyPages ListKeysAsync()
		{
		}
		public DataStoreVersionPages ListVersionsAsync()
		{
		}
		public void RemoveVersionAsync()
		{
		}
	}
	
	class OrderedDataStore : GlobalDataStore
	{
		public Instance? GetSortedAsync()
		{
		}
	}
	
	class GroupService : Instance
	{
		public StandardPages GetAlliesAsync()
		{
		}
		public StandardPages GetEnemiesAsync()
		{
		}
		public object? GetGroupInfoAsync()
		{
		}
		public object[] GetGroupsAsync()
		{
		}
	}
	
	class GuiBase : Instance
	{
	}
	
	class GuiBase2d : GuiBase
	{
		public ScriptSignal<Action<bool, GuiObject, GuiObject>> SelectionChanged { get; }
	}
	
	class GuiObject : GuiBase2d
	{
		public bool TweenPosition()
		{
		}
		public bool TweenSize()
		{
		}
		public bool TweenSizeAndPosition()
		{
		}
		public ScriptSignal<Action<UDim2>> DragBegin { get; }
		public ScriptSignal<Action<int, int>> DragStopped { get; }
		public ScriptSignal<Action<InputObject>> InputBegan { get; }
		public ScriptSignal<Action<InputObject>> InputChanged { get; }
		public ScriptSignal<Action<InputObject>> InputEnded { get; }
		public ScriptSignal<Action<int, int>> MouseEnter { get; }
		public ScriptSignal<Action<int, int>> MouseLeave { get; }
		public ScriptSignal<Action<int, int>> MouseMoved { get; }
		public ScriptSignal<Action<int, int>> MouseWheelBackward { get; }
		public ScriptSignal<Action<int, int>> MouseWheelForward { get; }
		public ScriptSignal<Action> SelectionGained { get; }
		public ScriptSignal<Action> SelectionLost { get; }
		public ScriptSignal<Action<object[], Enum.UserInputState>> TouchLongPress { get; }
		public ScriptSignal<Action<object[], Vector2, Vector2, Enum.UserInputState>> TouchPan { get; }
		public ScriptSignal<Action<object[], float, float, Enum.UserInputState>> TouchPinch { get; }
		public ScriptSignal<Action<object[], float, float, Enum.UserInputState>> TouchRotate { get; }
		public ScriptSignal<Action<Enum.SwipeDirection, int>> TouchSwipe { get; }
		public ScriptSignal<Action<object[]>> TouchTap { get; }
	}
	
	class CanvasGroup : GuiObject
	{
	}
	
	class Frame : GuiObject
	{
	}
	
	class GuiButton : GuiObject
	{
		public ScriptSignal<Action<InputObject, int>> Activated { get; }
		public ScriptSignal<Action> MouseButton1Click { get; }
		public ScriptSignal<Action<int, int>> MouseButton1Down { get; }
		public ScriptSignal<Action<int, int>> MouseButton1Up { get; }
		public ScriptSignal<Action> MouseButton2Click { get; }
		public ScriptSignal<Action<int, int>> MouseButton2Down { get; }
		public ScriptSignal<Action<int, int>> MouseButton2Up { get; }
	}
	
	class ImageButton : GuiButton
	{
	}
	
	class TextButton : GuiButton
	{
	}
	
	class GuiLabel : GuiObject
	{
	}
	
	class ImageLabel : GuiLabel
	{
	}
	
	class TextLabel : GuiLabel
	{
	}
	
	class ScrollingFrame : GuiObject
	{
	}
	
	class TextBox : GuiObject
	{
		public void CaptureFocus()
		{
		}
		public bool IsFocused()
		{
		}
		public void ReleaseFocus()
		{
		}
		public ScriptSignal<Action<bool, InputObject>> FocusLost { get; }
		public ScriptSignal<Action> Focused { get; }
		public ScriptSignal<Action> ReturnPressedFromOnScreenKeyboard { get; }
	}
	
	class VideoFrame : GuiObject
	{
		public void Pause()
		{
		}
		public void Play()
		{
		}
		public ScriptSignal<Action<string>> DidLoop { get; }
		public ScriptSignal<Action<string>> Ended { get; }
		public ScriptSignal<Action<string>> Loaded { get; }
		public ScriptSignal<Action<string>> Paused { get; }
		public ScriptSignal<Action<string>> Played { get; }
	}
	
	class ViewportFrame : GuiObject
	{
	}
	
	class LayerCollector : GuiBase2d
	{
		public object GetLayoutNodeTree()
		{
		}
	}
	
	class BillboardGui : LayerCollector
	{
	}
	
	class ScreenGui : LayerCollector
	{
	}
	
	class SurfaceGuiBase : LayerCollector
	{
	}
	
	class AdGui : SurfaceGuiBase
	{
		public Action<object> OnAdEvent { get; set; }
	}
	
	class SurfaceGui : SurfaceGuiBase
	{
	}
	
	class GuiBase3d : GuiBase
	{
	}
	
	class FloorWire : GuiBase3d
	{
	}
	
	class InstanceAdornment : GuiBase3d
	{
	}
	
	class SelectionBox : InstanceAdornment
	{
	}
	
	class PVAdornment : GuiBase3d
	{
	}
	
	class HandleAdornment : PVAdornment
	{
		public ScriptSignal<Action> MouseButton1Down { get; }
		public ScriptSignal<Action> MouseButton1Up { get; }
		public ScriptSignal<Action> MouseEnter { get; }
		public ScriptSignal<Action> MouseLeave { get; }
	}
	
	class BoxHandleAdornment : HandleAdornment
	{
	}
	
	class ConeHandleAdornment : HandleAdornment
	{
	}
	
	class CylinderHandleAdornment : HandleAdornment
	{
	}
	
	class ImageHandleAdornment : HandleAdornment
	{
	}
	
	class LineHandleAdornment : HandleAdornment
	{
	}
	
	class SphereHandleAdornment : HandleAdornment
	{
	}
	
	class WireframeHandleAdornment : HandleAdornment
	{
		public void AddLine()
		{
		}
		public void AddLines()
		{
		}
		public void AddPath()
		{
		}
		public void AddText()
		{
		}
		public void Clear()
		{
		}
	}
	
	class ParabolaAdornment : PVAdornment
	{
	}
	
	class SelectionSphere : PVAdornment
	{
	}
	
	class PartAdornment : GuiBase3d
	{
	}
	
	class HandlesBase : PartAdornment
	{
	}
	
	class ArcHandles : HandlesBase
	{
		public ScriptSignal<Action<Enum.Axis>> MouseButton1Down { get; }
		public ScriptSignal<Action<Enum.Axis>> MouseButton1Up { get; }
		public ScriptSignal<Action<Enum.Axis, float, float>> MouseDrag { get; }
		public ScriptSignal<Action<Enum.Axis>> MouseEnter { get; }
		public ScriptSignal<Action<Enum.Axis>> MouseLeave { get; }
	}
	
	class Handles : HandlesBase
	{
		public ScriptSignal<Action<Enum.NormalId>> MouseButton1Down { get; }
		public ScriptSignal<Action<Enum.NormalId>> MouseButton1Up { get; }
		public ScriptSignal<Action<Enum.NormalId, float>> MouseDrag { get; }
		public ScriptSignal<Action<Enum.NormalId>> MouseEnter { get; }
		public ScriptSignal<Action<Enum.NormalId>> MouseLeave { get; }
	}
	
	class SurfaceSelection : PartAdornment
	{
	}
	
	class SelectionLasso : GuiBase3d
	{
	}
	
	class SelectionPartLasso : SelectionLasso
	{
	}
	
	class SelectionPointLasso : SelectionLasso
	{
	}
	
	class Path2D : GuiBase
	{
		public Rect GetBoundingRect()
		{
		}
		public Path2DControlPoint GetControlPoint()
		{
		}
		public object[] GetControlPoints()
		{
		}
		public UDim2 GetPositionOnCurve()
		{
		}
		public UDim2 GetPositionOnCurveArcLength()
		{
		}
		public Vector2 GetTangentOnCurve()
		{
		}
		public Vector2 GetTangentOnCurveArcLength()
		{
		}
		public void InsertControlPoint()
		{
		}
		public void RemoveControlPoint()
		{
		}
		public void SetControlPoints()
		{
		}
		public void UpdateControlPoint()
		{
		}
	}
	
	class GuiService : Instance
	{
		public void AddSelectionParent()
		{
		}
		public void AddSelectionTuple()
		{
		}
		public void CloseInspectMenu()
		{
		}
		public bool GetEmotesMenuOpen()
		{
		}
		public bool GetGameplayPausedNotificationEnabled()
		{
		}
		public object[] GetGuiInset()
		{
		}
		public bool GetInspectMenuEnabled()
		{
		}
		public void InspectPlayerFromHumanoidDescription()
		{
		}
		public void InspectPlayerFromUserId()
		{
		}
		public bool IsTenFootInterface()
		{
		}
		public void RemoveSelectionGroup()
		{
		}
		public void Select()
		{
		}
		public void SetEmotesMenuOpen()
		{
		}
		public void SetGameplayPausedNotificationEnabled()
		{
		}
		public void SetInspectMenuEnabled()
		{
		}
		public ScriptSignal<Action> MenuClosed { get; }
		public ScriptSignal<Action> MenuOpened { get; }
	}
	
	class HapticService : Instance
	{
		public object[] GetMotor()
		{
		}
		public bool IsMotorSupported()
		{
		}
		public bool IsVibrationSupported()
		{
		}
		public void SetMotor()
		{
		}
	}
	
	class HeightmapImporterService : Instance
	{
	}
	
	class HiddenSurfaceRemovalAsset : Instance
	{
	}
	
	class Highlight : Instance
	{
	}
	
	class HttpService : Instance
	{
		public string GenerateGUID()
		{
		}
		public Secret GetSecret()
		{
		}
		public object? JSONDecode()
		{
		}
		public string JSONEncode()
		{
		}
		public string UrlEncode()
		{
		}
		public string GetAsync()
		{
		}
		public string PostAsync()
		{
		}
		public object RequestAsync()
		{
		}
	}
	
	class Humanoid : Instance
	{
		public void AddAccessory()
		{
		}
		public bool AddCustomStatus()
		{
		}
		public bool AddStatus()
		{
		}
		public void BuildRigFromAttachments()
		{
		}
		public void ChangeState()
		{
		}
		public void EquipTool()
		{
		}
		public object[] GetAccessories()
		{
		}
		public HumanoidDescription GetAppliedDescription()
		{
		}
		public Enum.BodyPartR15 GetBodyPartR15()
		{
		}
		public Enum.Limb GetLimb()
		{
		}
		public Vector3 GetMoveVelocity()
		{
		}
		public object[] GetPlayingAnimationTracks()
		{
		}
		public Enum.HumanoidStateType GetState()
		{
		}
		public bool GetStateEnabled()
		{
		}
		public object[] GetStatuses()
		{
		}
		public bool HasCustomStatus()
		{
		}
		public bool HasStatus()
		{
		}
		public AnimationTrack LoadAnimation()
		{
		}
		public void Move()
		{
		}
		public void MoveTo()
		{
		}
		public void RemoveAccessories()
		{
		}
		public bool RemoveCustomStatus()
		{
		}
		public bool RemoveStatus()
		{
		}
		public bool ReplaceBodyPartR15()
		{
		}
		public void SetStateEnabled()
		{
		}
		public void TakeDamage()
		{
		}
		public void UnequipTools()
		{
		}
		public AnimationTrack loadAnimation()
		{
		}
		public void takeDamage()
		{
		}
		public void ApplyDescription()
		{
		}
		public void ApplyDescriptionReset()
		{
		}
		public bool PlayEmote()
		{
		}
		public ScriptSignal<Action<AnimationTrack>> AnimationPlayed { get; }
		public ScriptSignal<Action<HumanoidDescription>> ApplyDescriptionFinished { get; }
		public ScriptSignal<Action<float>> Climbing { get; }
		public ScriptSignal<Action<string>> CustomStatusAdded { get; }
		public ScriptSignal<Action<string>> CustomStatusRemoved { get; }
		public ScriptSignal<Action> Died { get; }
		public ScriptSignal<Action<bool>> FallingDown { get; }
		public ScriptSignal<Action<bool>> FreeFalling { get; }
		public ScriptSignal<Action<bool>> GettingUp { get; }
		public ScriptSignal<Action<float>> HealthChanged { get; }
		public ScriptSignal<Action<bool>> Jumping { get; }
		public ScriptSignal<Action<bool>> MoveToFinished { get; }
		public ScriptSignal<Action<bool>> PlatformStanding { get; }
		public ScriptSignal<Action<bool>> Ragdoll { get; }
		public ScriptSignal<Action<float>> Running { get; }
		public ScriptSignal<Action<bool, BasePart>> Seated { get; }
		public ScriptSignal<Action<Enum.HumanoidStateType, Enum.HumanoidStateType>> StateChanged { get; }
		public ScriptSignal<Action<Enum.HumanoidStateType, bool>> StateEnabledChanged { get; }
		public ScriptSignal<Action<Enum.Status>> StatusAdded { get; }
		public ScriptSignal<Action<Enum.Status>> StatusRemoved { get; }
		public ScriptSignal<Action<bool>> Strafing { get; }
		public ScriptSignal<Action<float>> Swimming { get; }
		public ScriptSignal<Action<BasePart, BasePart>> Touched { get; }
	}
	
	class HumanoidDescription : Instance
	{
		public void AddEmote()
		{
		}
		public object[] GetAccessories()
		{
		}
		public object GetEmotes()
		{
		}
		public object[] GetEquippedEmotes()
		{
		}
		public void RemoveEmote()
		{
		}
		public void SetAccessories()
		{
		}
		public void SetEmotes()
		{
		}
		public void SetEquippedEmotes()
		{
		}
		public ScriptSignal<Action<object>> EmotesChanged { get; }
		public ScriptSignal<Action<object[]>> EquippedEmotesChanged { get; }
	}
	
	class IKControl : Instance
	{
		public int GetChainCount()
		{
		}
		public float GetChainLength()
		{
		}
		public CFrame GetNodeLocalCFrame()
		{
		}
		public CFrame GetNodeWorldCFrame()
		{
		}
		public CFrame GetRawFinalTarget()
		{
		}
		public CFrame GetSmoothedFinalTarget()
		{
		}
	}
	
	class ILegacyStudioBridge : Instance
	{
	}
	
	class LegacyStudioBridge : ILegacyStudioBridge
	{
	}
	
	class IXPService : Instance
	{
	}
	
	class IncrementalPatchBuilder : Instance
	{
	}
	
	class InputObject : Instance
	{
		public bool IsModifierKeyDown()
		{
		}
	}
	
	class InsertService : Instance
	{
		public void ApproveAssetId()
		{
		}
		public void ApproveAssetVersionId()
		{
		}
		public void Insert()
		{
		}
		public MeshPart CreateMeshPartAsync()
		{
		}
		public object[] GetBaseCategories()
		{
		}
		public object[] GetBaseSets()
		{
		}
		public object[] GetCollection()
		{
		}
		public object[] GetFreeDecals()
		{
		}
		public object[] GetFreeModels()
		{
		}
		public long GetLatestAssetVersionAsync()
		{
		}
		public object[] GetUserCategories()
		{
		}
		public object[] GetUserSets()
		{
		}
		public Instance? LoadAsset()
		{
		}
		public Instance? LoadAssetVersion()
		{
		}
		public Instance? loadAsset()
		{
		}
		public ScriptSignal<Action<Instance?>> InternalDelete { get; }
	}
	
	class InternalSyncItem : Instance
	{
	}
	
	class InternalSyncService : Instance
	{
	}
	
	class JointInstance : Instance
	{
	}
	
	class DynamicRotate : JointInstance
	{
	}
	
	class RotateP : DynamicRotate
	{
	}
	
	class RotateV : DynamicRotate
	{
	}
	
	class Glue : JointInstance
	{
	}
	
	class ManualSurfaceJointInstance : JointInstance
	{
	}
	
	class ManualGlue : ManualSurfaceJointInstance
	{
	}
	
	class ManualWeld : ManualSurfaceJointInstance
	{
	}
	
	class Motor : JointInstance
	{
		public void SetDesiredAngle()
		{
		}
	}
	
	class Motor6D : Motor
	{
	}
	
	class Rotate : JointInstance
	{
	}
	
	class Snap : JointInstance
	{
	}
	
	class VelocityMotor : JointInstance
	{
	}
	
	class Weld : JointInstance
	{
	}
	
	class JointsService : Instance
	{
		public void ClearJoinAfterMoveJoints()
		{
		}
		public void CreateJoinAfterMoveJoints()
		{
		}
		public void SetJoinAfterMoveInstance()
		{
		}
		public void SetJoinAfterMoveTarget()
		{
		}
		public void ShowPermissibleJoints()
		{
		}
	}
	
	class Keyframe : Instance
	{
		public void AddMarker()
		{
		}
		public void AddPose()
		{
		}
		public Instance[] GetMarkers()
		{
		}
		public Instance[] GetPoses()
		{
		}
		public void RemoveMarker()
		{
		}
		public void RemovePose()
		{
		}
	}
	
	class KeyframeMarker : Instance
	{
	}
	
	class KeyframeSequenceProvider : Instance
	{
		public string RegisterActiveKeyframeSequence()
		{
		}
		public string RegisterKeyframeSequence()
		{
		}
		public Instance? GetAnimations()
		{
		}
		public Instance? GetKeyframeSequenceAsync()
		{
		}
	}
	
	class LSPFileSyncService : Instance
	{
	}
	
	class LanguageService : Instance
	{
	}
	
	class Light : Instance
	{
	}
	
	class PointLight : Light
	{
	}
	
	class SpotLight : Light
	{
	}
	
	class SurfaceLight : Light
	{
	}
	
	class Lighting : Instance
	{
		public double GetMinutesAfterMidnight()
		{
		}
		public Vector3 GetMoonDirection()
		{
		}
		public float GetMoonPhase()
		{
		}
		public Vector3 GetSunDirection()
		{
		}
		public void SetMinutesAfterMidnight()
		{
		}
		public double getMinutesAfterMidnight()
		{
		}
		public void setMinutesAfterMidnight()
		{
		}
		public ScriptSignal<Action<bool>> LightingChanged { get; }
	}
	
	class LinkingService : Instance
	{
	}
	
	class LiveScriptingService : Instance
	{
	}
	
	class LocalizationService : Instance
	{
		public Instance[] GetCorescriptLocalizations()
		{
		}
		public object[] GetTableEntries()
		{
		}
		public Instance? GetTranslatorForPlayer()
		{
		}
		public string GetCountryRegionForPlayerAsync()
		{
		}
		public Instance? GetTranslatorForLocaleAsync()
		{
		}
		public Instance? GetTranslatorForPlayerAsync()
		{
		}
	}
	
	class LocalizationTable : Instance
	{
		public string GetContents()
		{
		}
		public object[] GetEntries()
		{
		}
		public string GetString()
		{
		}
		public Instance? GetTranslator()
		{
		}
		public void RemoveEntry()
		{
		}
		public void RemoveEntryValue()
		{
		}
		public void RemoveKey()
		{
		}
		public void RemoveTargetLocale()
		{
		}
		public void SetContents()
		{
		}
		public void SetEntries()
		{
		}
		public void SetEntry()
		{
		}
		public void SetEntryContext()
		{
		}
		public void SetEntryExample()
		{
		}
		public void SetEntryKey()
		{
		}
		public void SetEntrySource()
		{
		}
		public void SetEntryValue()
		{
		}
	}
	
	class CloudLocalizationTable : LocalizationTable
	{
	}
	
	class LodDataEntity : Instance
	{
	}
	
	class LodDataService : Instance
	{
	}
	
	class LogReporterService : Instance
	{
	}
	
	class LogService : Instance
	{
		public void ClearOutput()
		{
		}
		public object[] GetLogHistory()
		{
		}
		public ScriptSignal<Action<string, Enum.MessageType>> MessageOut { get; }
	}
	
	class LuaSourceContainer : Instance
	{
	}
	
	class BaseScript : LuaSourceContainer
	{
	}
	
	class Script : BaseScript
	{
	}
	
	class LocalScript : Script
	{
	}
	
	class ModuleScript : LuaSourceContainer
	{
	}
	
	class LuauScriptAnalyzerService : Instance
	{
	}
	
	class MarkerCurve : Instance
	{
		public object GetMarkerAtIndex()
		{
		}
		public object[] GetMarkers()
		{
		}
		public object[] InsertMarkerAtTime()
		{
		}
		public int RemoveMarkerAtIndex()
		{
		}
	}
	
	class MarketplaceService : Instance
	{
		public void PromptBulkPurchase()
		{
		}
		public void PromptBundlePurchase()
		{
		}
		public void PromptGamePassPurchase()
		{
		}
		public void PromptPremiumPurchase()
		{
		}
		public void PromptProductPurchase()
		{
		}
		public void PromptPurchase()
		{
		}
		public void PromptSubscriptionPurchase()
		{
		}
		public Instance? GetDeveloperProductsAsync()
		{
		}
		public object GetProductInfo()
		{
		}
		public object GetSubscriptionProductInfoAsync()
		{
		}
		public object GetUserSubscriptionDetailsAsync()
		{
		}
		public object[] GetUserSubscriptionPaymentHistoryAsync()
		{
		}
		public object GetUserSubscriptionStatusAsync()
		{
		}
		public bool PlayerOwnsAsset()
		{
		}
		public bool PlayerOwnsBundle()
		{
		}
		public bool UserOwnsGamePassAsync()
		{
		}
		public ScriptSignal<Action<Instance?, Enum.MarketplaceBulkPurchasePromptStatus, object>> PromptBulkPurchaseFinished { get; }
		public ScriptSignal<Action<Instance?, long, bool>> PromptBundlePurchaseFinished { get; }
		public ScriptSignal<Action<Instance?, long, bool>> PromptGamePassPurchaseFinished { get; }
		public ScriptSignal<Action> PromptPremiumPurchaseFinished { get; }
		public ScriptSignal<Action<long, long, bool>> PromptProductPurchaseFinished { get; }
		public ScriptSignal<Action<Instance?, long, bool>> PromptPurchaseFinished { get; }
		public ScriptSignal<Action<Player, string, bool>> PromptSubscriptionPurchaseFinished { get; }
		public Action<object> ProcessReceipt { get; set; }
	}
	
	class MaterialGenerationService : Instance
	{
	}
	
	class MaterialGenerationSession : Instance
	{
	}
	
	class MaterialService : Instance
	{
		public string GetBaseMaterialOverride()
		{
		}
		public MaterialVariant GetMaterialVariant()
		{
		}
		public void SetBaseMaterialOverride()
		{
		}
	}
	
	class MaterialVariant : Instance
	{
	}
	
	class MemoryStoreHashMap : Instance
	{
		public object? GetAsync()
		{
		}
		public MemoryStoreHashMapPages ListItemsAsync()
		{
		}
		public void RemoveAsync()
		{
		}
		public bool SetAsync()
		{
		}
		public object? UpdateAsync()
		{
		}
	}
	
	class MemoryStoreQueue : Instance
	{
		public void AddAsync()
		{
		}
		public object[] ReadAsync()
		{
		}
		public void RemoveAsync()
		{
		}
	}
	
	class MemoryStoreService : Instance
	{
		public MemoryStoreHashMap GetHashMap()
		{
		}
		public MemoryStoreQueue GetQueue()
		{
		}
		public MemoryStoreSortedMap GetSortedMap()
		{
		}
	}
	
	class MemoryStoreSortedMap : Instance
	{
		public object[] GetAsync()
		{
		}
		public object[] GetRangeAsync()
		{
		}
		public void RemoveAsync()
		{
		}
		public bool SetAsync()
		{
		}
		public object[] UpdateAsync()
		{
		}
	}
	
	class MessageBusConnection : Instance
	{
	}
	
	class MessageBusService : Instance
	{
	}
	
	class MessagingService : Instance
	{
		public void PublishAsync()
		{
		}
		public RBXScriptConnection SubscribeAsync()
		{
		}
	}
	
	class MetaBreakpoint : Instance
	{
	}
	
	class MetaBreakpointContext : Instance
	{
	}
	
	class MetaBreakpointManager : Instance
	{
	}
	
	class Mouse : Instance
	{
		public ScriptSignal<Action> Button1Down { get; }
		public ScriptSignal<Action> Button1Up { get; }
		public ScriptSignal<Action> Button2Down { get; }
		public ScriptSignal<Action> Button2Up { get; }
		public ScriptSignal<Action> Idle { get; }
		public ScriptSignal<Action<string>> KeyDown { get; }
		public ScriptSignal<Action<string>> KeyUp { get; }
		public ScriptSignal<Action> Move { get; }
		public ScriptSignal<Action> WheelBackward { get; }
		public ScriptSignal<Action> WheelForward { get; }
		public ScriptSignal<Action<string>> keyDown { get; }
	}
	
	class PlayerMouse : Mouse
	{
	}
	
	class NetworkMarker : Instance
	{
		public ScriptSignal<Action> Received { get; }
	}
	
	class NoCollisionConstraint : Instance
	{
	}
	
	class Noise : Instance
	{
	}
	
	class OmniRecommendationsService : Instance
	{
	}
	
	class OpenCloudApiV1 : Instance
	{
		public OpenCloudModel CreateModel()
		{
		}
		public OpenCloudModel CreateUserNotificationAsync()
		{
		}
	}
	
	class OpenCloudService : Instance
	{
		public OpenCloudApiV1 GetApiV1()
		{
		}
		public object InvokeAsync()
		{
		}
	}
	
	class OperationGraph : Instance
	{
	}
	
	class PVInstance : Instance
	{
		public CFrame GetPivot()
		{
		}
		public void PivotTo()
		{
		}
	}
	
	class BasePart : PVInstance
	{
		public Vector3 AngularAccelerationToTorque()
		{
		}
		public void ApplyAngularImpulse()
		{
		}
		public void ApplyImpulse()
		{
		}
		public void ApplyImpulseAtPosition()
		{
		}
		public void BreakJoints()
		{
		}
		public bool CanCollideWith()
		{
		}
		public object[] CanSetNetworkOwnership()
		{
		}
		public Vector3 GetClosestPointOnSurface()
		{
		}
		public Instance[] GetConnectedParts()
		{
		}
		public Instance[] GetJoints()
		{
		}
		public float GetMass()
		{
		}
		public Instance? GetNetworkOwner()
		{
		}
		public bool GetNetworkOwnershipAuto()
		{
		}
		public Instance[] GetNoCollisionConstraints()
		{
		}
		public CFrame GetRenderCFrame()
		{
		}
		public Instance? GetRootPart()
		{
		}
		public Instance[] GetTouchingParts()
		{
		}
		public Vector3 GetVelocityAtPosition()
		{
		}
		public bool IsGrounded()
		{
		}
		public void MakeJoints()
		{
		}
		public bool Resize()
		{
		}
		public void SetNetworkOwner()
		{
		}
		public void SetNetworkOwnershipAuto()
		{
		}
		public Vector3 TorqueToAngularAcceleration()
		{
		}
		public void breakJoints()
		{
		}
		public float getMass()
		{
		}
		public void makeJoints()
		{
		}
		public bool resize()
		{
		}
		public Instance? IntersectAsync()
		{
		}
		public Instance? SubtractAsync()
		{
		}
		public Instance? UnionAsync()
		{
		}
		public ScriptSignal<Action<BasePart>> LocalSimulationTouched { get; }
		public ScriptSignal<Action> OutfitChanged { get; }
		public ScriptSignal<Action<BasePart>> StoppedTouching { get; }
		public ScriptSignal<Action<BasePart>> TouchEnded { get; }
		public ScriptSignal<Action<BasePart>> Touched { get; }
	}
	
	class CornerWedgePart : BasePart
	{
	}
	
	class FormFactorPart : BasePart
	{
	}
	
	class Part : FormFactorPart
	{
	}
	
	class Platform : Part
	{
		public ScriptSignal<Action<Instance?>> RemoteCreateMotor6D { get; }
		public ScriptSignal<Action> RemoteDestroyMotor6D { get; }
	}
	
	class Seat : Part
	{
		public void Sit()
		{
		}
		public ScriptSignal<Action<Instance?>> RemoteCreateSeatWeld { get; }
		public ScriptSignal<Action> RemoteDestroySeatWeld { get; }
	}
	
	class SkateboardPlatform : Part
	{
		public void ApplySpecificImpulse()
		{
		}
		public ScriptSignal<Action<Instance?, Instance?>> Equipped { get; }
		public ScriptSignal<Action<Enum.MoveState, Enum.MoveState>> MoveStateChanged { get; }
		public ScriptSignal<Action<Instance?>> RemoteCreateMotor6D { get; }
		public ScriptSignal<Action> RemoteDestroyMotor6D { get; }
		public ScriptSignal<Action<Instance?>> Unequipped { get; }
		public ScriptSignal<Action<Instance?, Instance?>> equipped { get; }
		public ScriptSignal<Action<Instance?>> unequipped { get; }
	}
	
	class SpawnLocation : Part
	{
	}
	
	class WedgePart : FormFactorPart
	{
	}
	
	class Terrain : BasePart
	{
		public bool AutowedgeCell()
		{
		}
		public void AutowedgeCells()
		{
		}
		public Vector3 CellCenterToWorld()
		{
		}
		public Vector3 CellCornerToWorld()
		{
		}
		public void Clear()
		{
		}
		public TerrainRegion CopyRegion()
		{
		}
		public int CountCells()
		{
		}
		public void FillBall()
		{
		}
		public void FillBlock()
		{
		}
		public void FillCylinder()
		{
		}
		public void FillRegion()
		{
		}
		public void FillWedge()
		{
		}
		public object[] GetCell()
		{
		}
		public Color3 GetMaterialColor()
		{
		}
		public object[] GetWaterCell()
		{
		}
		public void PasteRegion()
		{
		}
		public object ReadVoxelChannels()
		{
		}
		public object[] ReadVoxels()
		{
		}
		public void ReplaceMaterial()
		{
		}
		public void SetCell()
		{
		}
		public void SetCells()
		{
		}
		public void SetMaterialColor()
		{
		}
		public void SetWaterCell()
		{
		}
		public Vector3 WorldToCell()
		{
		}
		public Vector3 WorldToCellPreferEmpty()
		{
		}
		public Vector3 WorldToCellPreferSolid()
		{
		}
		public void WriteVoxelChannels()
		{
		}
		public void WriteVoxels()
		{
		}
	}
	
	class TriangleMeshPart : BasePart
	{
	}
	
	class MeshPart : TriangleMeshPart
	{
		public void ApplyMesh()
		{
		}
	}
	
	class PartOperation : TriangleMeshPart
	{
		public void SubstituteGeometry()
		{
		}
	}
	
	class IntersectOperation : PartOperation
	{
	}
	
	class NegateOperation : PartOperation
	{
	}
	
	class UnionOperation : PartOperation
	{
	}
	
	class TrussPart : BasePart
	{
	}
	
	class VehicleSeat : BasePart
	{
		public void Sit()
		{
		}
		public ScriptSignal<Action<Instance?>> RemoteCreateSeatWeld { get; }
		public ScriptSignal<Action> RemoteDestroySeatWeld { get; }
	}
	
	class Model : PVInstance
	{
		public void AddPersistentPlayer()
		{
		}
		public void BreakJoints()
		{
		}
		public CFrame GetBoundingBox()
		{
		}
		public Vector3 GetExtentsSize()
		{
		}
		public CFrame GetModelCFrame()
		{
		}
		public Vector3 GetModelSize()
		{
		}
		public Instance[] GetPersistentPlayers()
		{
		}
		public CFrame GetPrimaryPartCFrame()
		{
		}
		public float GetScale()
		{
		}
		public void MakeJoints()
		{
		}
		public void MoveTo()
		{
		}
		public void RemovePersistentPlayer()
		{
		}
		public void ResetOrientationToIdentity()
		{
		}
		public void ScaleTo()
		{
		}
		public void SetIdentityOrientation()
		{
		}
		public void SetPrimaryPartCFrame()
		{
		}
		public void TranslateBy()
		{
		}
		public void breakJoints()
		{
		}
		public void makeJoints()
		{
		}
		public void move()
		{
		}
		public void moveTo()
		{
		}
	}
	
	class Actor : Model
	{
		public RBXScriptConnection BindToMessage()
		{
		}
		public RBXScriptConnection BindToMessageParallel()
		{
		}
		public void SendMessage()
		{
		}
	}
	
	class BackpackItem : Model
	{
	}
	
	class Tool : BackpackItem
	{
		public void Activate()
		{
		}
		public void Deactivate()
		{
		}
		public ScriptSignal<Action> Activated { get; }
		public ScriptSignal<Action> Deactivated { get; }
		public ScriptSignal<Action<Mouse>> Equipped { get; }
		public ScriptSignal<Action> Unequipped { get; }
	}
	
	class WorldRoot : Model
	{
		public bool ArePartsTouchingOthers()
		{
		}
		public RaycastResult Blockcast()
		{
		}
		public void BulkMoveTo()
		{
		}
		public object[] FindPartOnRay()
		{
		}
		public object[] FindPartOnRayWithIgnoreList()
		{
		}
		public object[] FindPartOnRayWithWhitelist()
		{
		}
		public Instance[] FindPartsInRegion3()
		{
		}
		public Instance[] FindPartsInRegion3WithIgnoreList()
		{
		}
		public Instance[] FindPartsInRegion3WithWhiteList()
		{
		}
		public Instance[] GetPartBoundsInBox()
		{
		}
		public Instance[] GetPartBoundsInRadius()
		{
		}
		public Instance[] GetPartsInPart()
		{
		}
		public bool IsRegion3Empty()
		{
		}
		public bool IsRegion3EmptyWithIgnoreList()
		{
		}
		public RaycastResult Raycast()
		{
		}
		public RaycastResult Shapecast()
		{
		}
		public RaycastResult Spherecast()
		{
		}
		public object[] findPartOnRay()
		{
		}
		public Instance[] findPartsInRegion3()
		{
		}
	}
	
	class Workspace : WorldRoot
	{
		public int GetNumAwakeParts()
		{
		}
		public int GetPhysicsThrottling()
		{
		}
		public double GetRealPhysicsFPS()
		{
		}
		public double GetServerTimeNow()
		{
		}
		public void JoinToOutsiders()
		{
		}
		public bool PGSIsEnabled()
		{
		}
		public void UnjoinFromOutsiders()
		{
		}
		public ScriptSignal<Action<Player>> PersistentLoaded { get; }
	}
	
	class WorldModel : WorldRoot
	{
	}
	
	class PackageLink : Instance
	{
	}
	
	class PackageUIService : Instance
	{
	}
	
	class Pages : Instance
	{
		public object[] GetCurrentPage()
		{
		}
		public void AdvanceToNextPageAsync()
		{
		}
	}
	
	class AudioPages : Pages
	{
	}
	
	class BanHistoryPages : Pages
	{
	}
	
	class CatalogPages : Pages
	{
	}
	
	class DataStoreKeyPages : Pages
	{
	}
	
	class DataStoreListingPages : Pages
	{
	}
	
	class DataStorePages : Pages
	{
	}
	
	class DataStoreVersionPages : Pages
	{
	}
	
	class FriendPages : Pages
	{
	}
	
	class InventoryPages : Pages
	{
	}
	
	class EmotesPages : InventoryPages
	{
	}
	
	class MemoryStoreHashMapPages : Pages
	{
	}
	
	class OutfitPages : Pages
	{
	}
	
	class StandardPages : Pages
	{
	}
	
	class ParticleEmitter : Instance
	{
		public void Clear()
		{
		}
		public void Emit()
		{
		}
		public ScriptSignal<Action> OnClearRequested { get; }
		public ScriptSignal<Action<int>> OnEmitRequested { get; }
	}
	
	class PatchBundlerFileWatch : Instance
	{
	}
	
	class PatchMapping : Instance
	{
	}
	
	class Path : Instance
	{
		public object[] GetPointCoordinates()
		{
		}
		public object[] GetWaypoints()
		{
		}
		public int CheckOcclusionAsync()
		{
		}
		public void ComputeAsync()
		{
		}
		public ScriptSignal<Action<int>> Blocked { get; }
		public ScriptSignal<Action<int>> Unblocked { get; }
	}
	
	class PathfindingLink : Instance
	{
	}
	
	class PathfindingModifier : Instance
	{
	}
	
	class PathfindingService : Instance
	{
		public Instance? CreatePath()
		{
		}
		public Instance? ComputeRawPathAsync()
		{
		}
		public Instance? ComputeSmoothPathAsync()
		{
		}
		public Instance? FindPathAsync()
		{
		}
	}
	
	class PausedState : Instance
	{
	}
	
	class PausedStateBreakpoint : PausedState
	{
	}
	
	class PausedStateException : PausedState
	{
	}
	
	class PhysicsService : Instance
	{
		public bool CollisionGroupContainsPart()
		{
		}
		public void CollisionGroupSetCollidable()
		{
		}
		public bool CollisionGroupsAreCollidable()
		{
		}
		public int CreateCollisionGroup()
		{
		}
		public int GetCollisionGroupId()
		{
		}
		public string GetCollisionGroupName()
		{
		}
		public object[] GetCollisionGroups()
		{
		}
		public int GetMaxCollisionGroups()
		{
		}
		public object[] GetRegisteredCollisionGroups()
		{
		}
		public bool IsCollisionGroupRegistered()
		{
		}
		public void RegisterCollisionGroup()
		{
		}
		public void RemoveCollisionGroup()
		{
		}
		public void RenameCollisionGroup()
		{
		}
		public void SetPartCollisionGroup()
		{
		}
		public void UnregisterCollisionGroup()
		{
		}
	}
	
	class PlaceStatsService : Instance
	{
	}
	
	class PlacesService : Instance
	{
	}
	
	class PlatformCloudStorageService : Instance
	{
	}
	
	class PlatformFriendsService : Instance
	{
	}
	
	class Player : Instance
	{
		public void ClearCharacterAppearance()
		{
		}
		public float DistanceFromCharacter()
		{
		}
		public object GetJoinData()
		{
		}
		public Mouse GetMouse()
		{
		}
		public float GetNetworkPing()
		{
		}
		public bool HasAppearanceLoaded()
		{
		}
		public bool IsVerified()
		{
		}
		public void Kick()
		{
		}
		public bool LoadBoolean()
		{
		}
		public void LoadCharacterAppearance()
		{
		}
		public Instance? LoadInstance()
		{
		}
		public double LoadNumber()
		{
		}
		public string LoadString()
		{
		}
		public void Move()
		{
		}
		public void SaveBoolean()
		{
		}
		public void SaveInstance()
		{
		}
		public void SaveNumber()
		{
		}
		public void SaveString()
		{
		}
		public bool loadBoolean()
		{
		}
		public Instance? loadInstance()
		{
		}
		public double loadNumber()
		{
		}
		public string loadString()
		{
		}
		public void saveBoolean()
		{
		}
		public void saveInstance()
		{
		}
		public void saveNumber()
		{
		}
		public void saveString()
		{
		}
		public object[] GetFriendsOnline()
		{
		}
		public int GetRankInGroup()
		{
		}
		public string GetRoleInGroup()
		{
		}
		public bool IsBestFriendsWith()
		{
		}
		public bool IsFriendsWith()
		{
		}
		public bool IsInGroup()
		{
		}
		public void LoadCharacter()
		{
		}
		public void LoadCharacterWithHumanoidDescription()
		{
		}
		public void RequestStreamAroundAsync()
		{
		}
		public bool WaitForDataReady()
		{
		}
		public bool isFriendsWith()
		{
		}
		public bool waitForDataReady()
		{
		}
		public ScriptSignal<Action<Model>> CharacterAdded { get; }
		public ScriptSignal<Action<Model>> CharacterAppearanceLoaded { get; }
		public ScriptSignal<Action<Model>> CharacterRemoving { get; }
		public ScriptSignal<Action<string, Player>> Chatted { get; }
		public ScriptSignal<Action<double>> Idled { get; }
		public ScriptSignal<Action<Enum.TeleportState, long, string>> OnTeleport { get; }
	}
	
	class PlayerHydrationService : Instance
	{
	}
	
	class PlayerScripts : Instance
	{
		public void ClearComputerCameraMovementModes()
		{
		}
		public void ClearComputerMovementModes()
		{
		}
		public void ClearTouchCameraMovementModes()
		{
		}
		public void ClearTouchMovementModes()
		{
		}
		public void RegisterComputerCameraMovementMode()
		{
		}
		public void RegisterComputerMovementMode()
		{
		}
		public void RegisterTouchCameraMovementMode()
		{
		}
		public void RegisterTouchMovementMode()
		{
		}
	}
	
	class PlayerViewService : Instance
	{
		public CFrame GetDeviceCameraCFrame()
		{
		}
	}
	
	class Players : Instance
	{
		public Player GetPlayerByUserId()
		{
		}
		public Player GetPlayerFromCharacter()
		{
		}
		public Instance[] GetPlayers()
		{
		}
		public Instance[] getPlayers()
		{
		}
		public Player playerFromCharacter()
		{
		}
		public Instance[] players()
		{
		}
		public void BanAsync()
		{
		}
		public Model CreateHumanoidModelFromDescription()
		{
		}
		public Model CreateHumanoidModelFromUserId()
		{
		}
		public BanHistoryPages GetBanHistoryAsync()
		{
		}
		public Model GetCharacterAppearanceAsync()
		{
		}
		public object GetCharacterAppearanceInfoAsync()
		{
		}
		public FriendPages GetFriendsAsync()
		{
		}
		public HumanoidDescription GetHumanoidDescriptionFromOutfitId()
		{
		}
		public HumanoidDescription GetHumanoidDescriptionFromUserId()
		{
		}
		public string GetNameFromUserIdAsync()
		{
		}
		public long GetUserIdFromNameAsync()
		{
		}
		public object[] GetUserThumbnailAsync()
		{
		}
		public void UnbanAsync()
		{
		}
		public ScriptSignal<Action<Player>> PlayerAdded { get; }
		public ScriptSignal<Action<Player>> PlayerMembershipChanged { get; }
		public ScriptSignal<Action<Player>> PlayerRemoving { get; }
		public ScriptSignal<Action<Player, string>> UserSubscriptionStatusChanged { get; }
	}
	
	class PluginCapabilities : Instance
	{
	}
	
	class PluginManagementService : Instance
	{
	}
	
	class PluginManagerInterface : Instance
	{
	}
	
	class PluginPolicyService : Instance
	{
	}
	
	class PolicyService : Instance
	{
		public object GetPolicyInfoForPlayerAsync()
		{
		}
	}
	
	class PoseBase : Instance
	{
	}
	
	class NumberPose : PoseBase
	{
	}
	
	class Pose : PoseBase
	{
		public void AddSubPose()
		{
		}
		public Instance[] GetSubPoses()
		{
		}
		public void RemoveSubPose()
		{
		}
	}
	
	class PostEffect : Instance
	{
	}
	
	class BloomEffect : PostEffect
	{
	}
	
	class BlurEffect : PostEffect
	{
	}
	
	class ColorCorrectionEffect : PostEffect
	{
	}
	
	class DepthOfFieldEffect : PostEffect
	{
	}
	
	class SunRaysEffect : PostEffect
	{
	}
	
	class ProcessInstancePhysicsService : Instance
	{
	}
	
	class ProjectFolderService : Instance
	{
	}
	
	class ProximityPrompt : Instance
	{
		public void InputHoldBegin()
		{
		}
		public void InputHoldEnd()
		{
		}
		public ScriptSignal<Action<Player>> PromptButtonHoldBegan { get; }
		public ScriptSignal<Action<Player>> PromptButtonHoldEnded { get; }
		public ScriptSignal<Action> PromptHidden { get; }
		public ScriptSignal<Action<Enum.ProximityPromptInputType>> PromptShown { get; }
		public ScriptSignal<Action<Player>> TriggerEnded { get; }
		public ScriptSignal<Action<Player>> Triggered { get; }
	}
	
	class ProximityPromptService : Instance
	{
		public ScriptSignal<Action<ProximityPrompt, Player>> PromptButtonHoldBegan { get; }
		public ScriptSignal<Action<ProximityPrompt, Player>> PromptButtonHoldEnded { get; }
		public ScriptSignal<Action<ProximityPrompt>> PromptHidden { get; }
		public ScriptSignal<Action<ProximityPrompt, Enum.ProximityPromptInputType>> PromptShown { get; }
		public ScriptSignal<Action<ProximityPrompt, Player>> PromptTriggerEnded { get; }
		public ScriptSignal<Action<ProximityPrompt, Player>> PromptTriggered { get; }
	}
	
	class PublishService : Instance
	{
	}
	
	class RTAnimationTracker : Instance
	{
		public ScriptSignal<Action<Enum.TrackerError, string>> TrackerError { get; }
		public ScriptSignal<Action<Enum.TrackerPromptEvent>> TrackerPrompt { get; }
	}
	
	class ReflectionService : Instance
	{
	}
	
	class RemoteCursorService : Instance
	{
	}
	
	class RemoteDebuggerServer : Instance
	{
	}
	
	class RemoteFunction : Instance
	{
		public object[] InvokeClient()
		{
		}
		public object[] InvokeServer()
		{
		}
		public ScriptSignal<Action<int, object[]>> RemoteOnInvokeClient { get; }
		public ScriptSignal<Action<int, string>> RemoteOnInvokeError { get; }
		public ScriptSignal<Action<int, Player, object[]>> RemoteOnInvokeServer { get; }
		public ScriptSignal<Action<int, object[]>> RemoteOnInvokeSuccess { get; }
		public Action<object[]> OnClientInvoke { get; set; }
		public Action<Player, object[]> OnServerInvoke { get; set; }
	}
	
	class ReplicatedFirst : Instance
	{
		public void RemoveDefaultLoadingScreen()
		{
		}
	}
	
	class ReplicatedStorage : Instance
	{
	}
	
	class RibbonNotificationService : Instance
	{
	}
	
	class RobloxServerStorage : Instance
	{
	}
	
	class RomarkService : Instance
	{
		public void EndRemoteRomarkTest()
		{
		}
	}
	
	class RotationCurve : Instance
	{
		public RotationCurveKey GetKeyAtIndex()
		{
		}
		public object[] GetKeyIndicesAtTime()
		{
		}
		public object[] GetKeys()
		{
		}
		public CFrame? GetValueAtTime()
		{
		}
		public object[] InsertKey()
		{
		}
		public int RemoveKeyAtIndex()
		{
		}
		public int SetKeys()
		{
		}
	}
	
	class RtMessagingService : Instance
	{
	}
	
	class RunService : Instance
	{
		public void BindToRenderStep()
		{
		}
		public bool IsClient()
		{
		}
		public bool IsRunMode()
		{
		}
		public bool IsRunning()
		{
		}
		public bool IsServer()
		{
		}
		public bool IsStudio()
		{
		}
		public void UnbindFromRenderStep()
		{
		}
		public ScriptSignal<Action<double>> Heartbeat { get; }
		public ScriptSignal<Action<double>> PostSimulation { get; }
		public ScriptSignal<Action<double>> PreAnimation { get; }
		public ScriptSignal<Action<double>> PreRender { get; }
		public ScriptSignal<Action<double>> PreSimulation { get; }
		public ScriptSignal<Action<double>> RenderStepped { get; }
		public ScriptSignal<Action<double, double>> Stepped { get; }
	}
	
	class SafetyService : Instance
	{
	}
	
	class ScreenshotHud : Instance
	{
	}
	
	class ScriptBuilder : Instance
	{
	}
	
	class SyncScriptBuilder : ScriptBuilder
	{
	}
	
	class ScriptChangeService : Instance
	{
	}
	
	class ScriptCloneWatcher : Instance
	{
	}
	
	class ScriptCloneWatcherHelper : Instance
	{
	}
	
	class ScriptCommitService : Instance
	{
	}
	
	class ScriptContext : Instance
	{
		public ScriptSignal<Action<string, string, Instance?>> Error { get; }
	}
	
	class ScriptDocument : Instance
	{
	}
	
	class ScriptEditorService : Instance
	{
	}
	
	class ScriptProfilerService : Instance
	{
	}
	
	class ScriptRegistrationService : Instance
	{
	}
	
	class ScriptRuntime : Instance
	{
	}
	
	class SelectionHighlightManager : Instance
	{
	}
	
	class SensorBase : Instance
	{
		public void Sense()
		{
		}
		public ScriptSignal<Action> OnSensorOutputChanged { get; }
	}
	
	class AtmosphereSensor : SensorBase
	{
	}
	
	class BuoyancySensor : SensorBase
	{
	}
	
	class ControllerSensor : SensorBase
	{
	}
	
	class ControllerPartSensor : ControllerSensor
	{
	}
	
	class ServerScriptService : Instance
	{
	}
	
	class ServerStorage : Instance
	{
	}
	
	class ServiceProvider : Instance
	{
		public Instance? FindService()
		{
		}
		public Instance? GetService()
		{
		}
		public Instance? getService()
		{
		}
		public Instance? service()
		{
		}
		public ScriptSignal<Action> Close { get; }
		public ScriptSignal<Action<Instance?>> ServiceAdded { get; }
		public ScriptSignal<Action<Instance?>> ServiceRemoving { get; }
	}
	
	class DataModel : ServiceProvider
	{
		public void BindToClose()
		{
		}
		public string GetMessage()
		{
		}
		public bool GetRemoteBuildMode()
		{
		}
		public bool IsGearTypeAllowed()
		{
		}
		public bool IsLoaded()
		{
		}
		public bool SavePlace()
		{
		}
		public ScriptSignal<Action> AllowedGearTypeChanged { get; }
		public ScriptSignal<Action<bool>> GraphicsQualityChangeRequest { get; }
		public ScriptSignal<Action<Instance?, string>> ItemChanged { get; }
		public ScriptSignal<Action> Loaded { get; }
		public Action OnClose { get; set; }
	}
	
	class GenericSettings : ServiceProvider
	{
	}
	
	class UserSettings : GenericSettings
	{
		public bool IsUserFeatureEnabled()
		{
		}
		public void Reset()
		{
		}
	}
	
	class ServiceVisibilityService : Instance
	{
	}
	
	class SessionService : Instance
	{
	}
	
	class SharedTableRegistry : Instance
	{
		public SharedTable GetSharedTable()
		{
		}
		public void SetSharedTable()
		{
		}
	}
	
	class ShorelineUpgraderService : Instance
	{
	}
	
	class Sky : Instance
	{
	}
	
	class Smoke : Instance
	{
	}
	
	class SmoothVoxelsUpgraderService : Instance
	{
	}
	
	class SnippetService : Instance
	{
	}
	
	class SocialService : Instance
	{
		public void HideSelfView()
		{
		}
		public void PromptGameInvite()
		{
		}
		public void PromptPhoneBook()
		{
		}
		public void ShowSelfView()
		{
		}
		public bool CanSendCallInviteAsync()
		{
		}
		public bool CanSendGameInviteAsync()
		{
		}
		public ScriptSignal<Action<Instance?, Enum.InviteState>> CallInviteStateChanged { get; }
		public ScriptSignal<Action<Instance?, object[]>> GameInvitePromptClosed { get; }
		public ScriptSignal<Action<Instance?>> PhoneBookPromptClosed { get; }
		public Action<string, object[]> OnCallInviteInvoked { get; set; }
	}
	
	class Sound : Instance
	{
		public void Pause()
		{
		}
		public void Play()
		{
		}
		public void Resume()
		{
		}
		public void Stop()
		{
		}
		public void pause()
		{
		}
		public void play()
		{
		}
		public void stop()
		{
		}
		public ScriptSignal<Action<string, int>> DidLoop { get; }
		public ScriptSignal<Action<string>> Ended { get; }
		public ScriptSignal<Action<string>> Loaded { get; }
		public ScriptSignal<Action<string>> Paused { get; }
		public ScriptSignal<Action<string>> Played { get; }
		public ScriptSignal<Action<string>> Resumed { get; }
		public ScriptSignal<Action<string>> Stopped { get; }
	}
	
	class SoundEffect : Instance
	{
	}
	
	class ChorusSoundEffect : SoundEffect
	{
	}
	
	class CompressorSoundEffect : SoundEffect
	{
	}
	
	class CustomSoundEffect : SoundEffect
	{
	}
	
	class AssetSoundEffect : CustomSoundEffect
	{
	}
	
	class ChannelSelectorSoundEffect : CustomSoundEffect
	{
	}
	
	class DistortionSoundEffect : SoundEffect
	{
	}
	
	class EchoSoundEffect : SoundEffect
	{
	}
	
	class EqualizerSoundEffect : SoundEffect
	{
	}
	
	class FlangeSoundEffect : SoundEffect
	{
	}
	
	class PitchShiftSoundEffect : SoundEffect
	{
	}
	
	class ReverbSoundEffect : SoundEffect
	{
	}
	
	class TremoloSoundEffect : SoundEffect
	{
	}
	
	class SoundGroup : Instance
	{
	}
	
	class SoundService : Instance
	{
		public object[] GetListener()
		{
		}
		public void PlayLocalSound()
		{
		}
		public void SetListener()
		{
		}
	}
	
	class Sparkles : Instance
	{
	}
	
	class StackFrame : Instance
	{
	}
	
	class StarterGear : Instance
	{
	}
	
	class StarterPack : Instance
	{
	}
	
	class StarterPlayer : Instance
	{
	}
	
	class StarterPlayerScripts : Instance
	{
	}
	
	class StarterCharacterScripts : StarterPlayerScripts
	{
	}
	
	class StartupMessageService : Instance
	{
	}
	
	class Stats : Instance
	{
		public float GetMemoryUsageMbForTag()
		{
		}
		public float GetTotalMemoryUsageMb()
		{
		}
	}
	
	class StreamingService : Instance
	{
	}
	
	class StudioAssetService : Instance
	{
	}
	
	class StudioAttachment : Instance
	{
	}
	
	class StudioCallout : Instance
	{
	}
	
	class StudioDeviceEmulatorService : Instance
	{
	}
	
	class StudioObjectBase : Instance
	{
	}
	
	class StudioWidget : StudioObjectBase
	{
	}
	
	class StudioPublishService : Instance
	{
	}
	
	class StudioScriptDebugEventListener : Instance
	{
	}
	
	class StudioSdkService : Instance
	{
	}
	
	class StudioWidgetsService : Instance
	{
	}
	
	class StyleBase : Instance
	{
		public Instance[] GetStyleRules()
		{
		}
		public void InsertStyleRule()
		{
		}
		public void SetStyleRules()
		{
		}
		public ScriptSignal<Action> StyleRulesChanged { get; }
	}
	
	class StyleRule : StyleBase
	{
		public object GetProperties()
		{
		}
		public object? GetProperty()
		{
		}
		public void SetProperties()
		{
		}
		public void SetProperty()
		{
		}
	}
	
	class StyleSheet : StyleBase
	{
		public Instance[] GetDerives()
		{
		}
		public void SetDerives()
		{
		}
	}
	
	class StyleDerive : Instance
	{
	}
	
	class StyleLink : Instance
	{
	}
	
	class StylingService : Instance
	{
	}
	
	class SurfaceAppearance : Instance
	{
	}
	
	class Team : Instance
	{
		public Instance[] GetPlayers()
		{
		}
		public ScriptSignal<Action<Player>> PlayerAdded { get; }
		public ScriptSignal<Action<Player>> PlayerRemoved { get; }
	}
	
	class TeamCreateData : Instance
	{
	}
	
	class TeamCreatePublishService : Instance
	{
	}
	
	class TeamCreateService : Instance
	{
	}
	
	class Teams : Instance
	{
		public Instance[] GetTeams()
		{
		}
		public void RebalanceTeams()
		{
		}
	}
	
	class TeleportAsyncResult : Instance
	{
	}
	
	class TeleportOptions : Instance
	{
		public object? GetTeleportData()
		{
		}
		public void SetTeleportData()
		{
		}
	}
	
	class TeleportService : Instance
	{
		public Instance? GetArrivingTeleportGui()
		{
		}
		public object? GetLocalPlayerTeleportData()
		{
		}
		public object? GetTeleportSetting()
		{
		}
		public void SetTeleportGui()
		{
		}
		public void SetTeleportSetting()
		{
		}
		public void Teleport()
		{
		}
		public void TeleportToPlaceInstance()
		{
		}
		public void TeleportToPrivateServer()
		{
		}
		public void TeleportToSpawnByName()
		{
		}
		public object[] GetPlayerPlaceInstanceAsync()
		{
		}
		public object[] ReserveServer()
		{
		}
		public Instance? TeleportAsync()
		{
		}
		public string TeleportPartyAsync()
		{
		}
		public ScriptSignal<Action<Instance?, object?>> LocalPlayerArrivedFromTeleport { get; }
		public ScriptSignal<Action<Instance?, Enum.TeleportResult, string, long, Instance?>> TeleportInitFailed { get; }
	}
	
	class TemporaryCageMeshProvider : Instance
	{
	}
	
	class TemporaryScriptService : Instance
	{
	}
	
	class TerrainDetail : Instance
	{
	}
	
	class TerrainRegion : Instance
	{
	}
	
	class TextBoxService : Instance
	{
	}
	
	class TextChannel : Instance
	{
		public TextChatMessage DisplaySystemMessage()
		{
		}
		public object[] AddUserAsync()
		{
		}
		public TextChatMessage SendAsync()
		{
		}
		public ScriptSignal<Action<TextChatMessage>> MessageReceived { get; }
		public Action<TextChatMessage> OnIncomingMessage { get; set; }
		public Action<TextChatMessage, TextSource> ShouldDeliverCallback { get; set; }
	}
	
	class TextChatCommand : Instance
	{
		public ScriptSignal<Action<TextSource, string>> Triggered { get; }
	}
	
	class TextChatConfigurations : Instance
	{
	}
	
	class BubbleChatConfiguration : TextChatConfigurations
	{
	}
	
	class ChatInputBarConfiguration : TextChatConfigurations
	{
	}
	
	class ChatWindowConfiguration : TextChatConfigurations
	{
	}
	
	class TextChatMessage : Instance
	{
	}
	
	class TextChatMessageProperties : Instance
	{
	}
	
	class TextChatService : Instance
	{
		public void DisplayBubble()
		{
		}
		public bool CanUserChatAsync()
		{
		}
		public bool CanUsersChatAsync()
		{
		}
		public ScriptSignal<Action<Instance?, TextChatMessage>> BubbleDisplayed { get; }
		public ScriptSignal<Action<TextChatMessage>> MessageReceived { get; }
		public ScriptSignal<Action<TextChatMessage>> SendingMessage { get; }
		public Action<TextChatMessage, Instance?> OnBubbleAdded { get; set; }
		public Action<TextChatMessage> OnIncomingMessage { get; set; }
	}
	
	class TextFilterResult : Instance
	{
		public string GetChatForUserAsync()
		{
		}
		public string GetNonChatStringForBroadcastAsync()
		{
		}
		public string GetNonChatStringForUserAsync()
		{
		}
	}
	
	class TextFilterTranslatedResult : Instance
	{
		public TextFilterResult GetTranslationForLocale()
		{
		}
		public object GetTranslations()
		{
		}
	}
	
	class TextService : Instance
	{
		public Vector2 GetTextSize()
		{
		}
		public TextFilterTranslatedResult FilterAndTranslateStringAsync()
		{
		}
		public TextFilterResult FilterStringAsync()
		{
		}
		public object GetFamilyInfoAsync()
		{
		}
		public Vector2 GetTextBoundsAsync()
		{
		}
	}
	
	class TextSource : Instance
	{
	}
	
	class TextureGenerationPartGroup : Instance
	{
	}
	
	class TextureGenerationService : Instance
	{
	}
	
	class TextureGenerationUnwrappingRequest : Instance
	{
	}
	
	class ThreadState : Instance
	{
	}
	
	class ToastNotificationService : Instance
	{
	}
	
	class TouchTransmitter : Instance
	{
	}
	
	class TracerService : Instance
	{
	}
	
	class TrackerLodController : Instance
	{
	}
	
	class TrackerStreamAnimation : Instance
	{
	}
	
	class Trail : Instance
	{
		public void Clear()
		{
		}
		public ScriptSignal<Action> OnClearRequested { get; }
	}
	
	class Translator : Instance
	{
		public string FormatByKey()
		{
		}
		public string Translate()
		{
		}
	}
	
	class TutorialService : Instance
	{
	}
	
	class TweenBase : Instance
	{
		public void Cancel()
		{
		}
		public void Pause()
		{
		}
		public void Play()
		{
		}
		public ScriptSignal<Action<Enum.PlaybackState>> Completed { get; }
	}
	
	class Tween : TweenBase
	{
	}
	
	class TweenService : Instance
	{
		public Tween Create()
		{
		}
		public float GetValue()
		{
		}
	}
	
	class UGCAvatarService : Instance
	{
	}
	
	class UIBase : Instance
	{
	}
	
	class UIComponent : UIBase
	{
	}
	
	class UIConstraint : UIComponent
	{
	}
	
	class UIAspectRatioConstraint : UIConstraint
	{
	}
	
	class UISizeConstraint : UIConstraint
	{
	}
	
	class UITextSizeConstraint : UIConstraint
	{
	}
	
	class UICorner : UIComponent
	{
	}
	
	class UIDragDetector : UIComponent
	{
		public RBXScriptConnection AddConstraintFunction()
		{
		}
		public UDim2 GetReferencePosition()
		{
		}
		public float GetReferenceRotation()
		{
		}
		public void SetDragStyleFunction()
		{
		}
		public ScriptSignal<Action<Vector2>> DragContinue { get; }
		public ScriptSignal<Action<Vector2>> DragEnd { get; }
		public ScriptSignal<Action<Vector2>> DragStart { get; }
	}
	
	class UIFlexItem : UIComponent
	{
	}
	
	class UIGradient : UIComponent
	{
	}
	
	class UILayout : UIComponent
	{
	}
	
	class UIGridStyleLayout : UILayout
	{
		public void ApplyLayout()
		{
		}
		public void SetCustomSortFunction()
		{
		}
	}
	
	class UIGridLayout : UIGridStyleLayout
	{
	}
	
	class UIListLayout : UIGridStyleLayout
	{
	}
	
	class UIPageLayout : UIGridStyleLayout
	{
		public void JumpTo()
		{
		}
		public void JumpToIndex()
		{
		}
		public void Next()
		{
		}
		public void Previous()
		{
		}
		public ScriptSignal<Action<Instance?>> PageEnter { get; }
		public ScriptSignal<Action<Instance?>> PageLeave { get; }
		public ScriptSignal<Action<Instance?>> Stopped { get; }
	}
	
	class UITableLayout : UIGridStyleLayout
	{
	}
	
	class UIPadding : UIComponent
	{
	}
	
	class UIScale : UIComponent
	{
	}
	
	class UIStroke : UIComponent
	{
	}
	
	class UIDragDetectorService : Instance
	{
	}
	
	class UnvalidatedAssetService : Instance
	{
	}
	
	class UserGameSettings : Instance
	{
		public int GetCameraYInvertValue()
		{
		}
		public bool GetOnboardingCompleted()
		{
		}
		public bool InFullScreen()
		{
		}
		public bool InStudioMode()
		{
		}
		public void SetCameraYInvertVisible()
		{
		}
		public void SetGamepadCameraSensitivityVisible()
		{
		}
		public void SetOnboardingCompleted()
		{
		}
		public ScriptSignal<Action<bool>> FullscreenChanged { get; }
		public ScriptSignal<Action<bool>> StudioModeChanged { get; }
	}
	
	class UserInputService : Instance
	{
		public bool GamepadSupports()
		{
		}
		public object[] GetConnectedGamepads()
		{
		}
		public InputObject GetDeviceAcceleration()
		{
		}
		public InputObject GetDeviceGravity()
		{
		}
		public object[] GetDeviceRotation()
		{
		}
		public TextBox GetFocusedTextBox()
		{
		}
		public bool GetGamepadConnected()
		{
		}
		public object[] GetGamepadState()
		{
		}
		public string GetImageForKeyCode()
		{
		}
		public object[] GetKeysPressed()
		{
		}
		public Enum.UserInputType GetLastInputType()
		{
		}
		public object[] GetMouseButtonsPressed()
		{
		}
		public Vector2 GetMouseDelta()
		{
		}
		public Vector2 GetMouseLocation()
		{
		}
		public object[] GetNavigationGamepads()
		{
		}
		public string GetStringForKeyCode()
		{
		}
		public object[] GetSupportedGamepadKeyCodes()
		{
		}
		public CFrame GetUserCFrame()
		{
		}
		public bool IsGamepadButtonDown()
		{
		}
		public bool IsKeyDown()
		{
		}
		public bool IsMouseButtonPressed()
		{
		}
		public bool IsNavigationGamepad()
		{
		}
		public void RecenterUserHeadCFrame()
		{
		}
		public void SetNavigationGamepad()
		{
		}
		public ScriptSignal<Action<InputObject>> DeviceAccelerationChanged { get; }
		public ScriptSignal<Action<InputObject>> DeviceGravityChanged { get; }
		public ScriptSignal<Action<InputObject, CFrame>> DeviceRotationChanged { get; }
		public ScriptSignal<Action<Enum.UserInputType>> GamepadConnected { get; }
		public ScriptSignal<Action<Enum.UserInputType>> GamepadDisconnected { get; }
		public ScriptSignal<Action<InputObject, bool>> InputBegan { get; }
		public ScriptSignal<Action<InputObject, bool>> InputChanged { get; }
		public ScriptSignal<Action<InputObject, bool>> InputEnded { get; }
		public ScriptSignal<Action> JumpRequest { get; }
		public ScriptSignal<Action<Enum.UserInputType>> LastInputTypeChanged { get; }
		public ScriptSignal<Action<float, Vector2, float, bool>> PointerAction { get; }
		public ScriptSignal<Action<TextBox>> TextBoxFocusReleased { get; }
		public ScriptSignal<Action<TextBox>> TextBoxFocused { get; }
		public ScriptSignal<Action<InputObject, bool>> TouchEnded { get; }
		public ScriptSignal<Action<object[], Enum.UserInputState, bool>> TouchLongPress { get; }
		public ScriptSignal<Action<InputObject, bool>> TouchMoved { get; }
		public ScriptSignal<Action<object[], Vector2, Vector2, Enum.UserInputState, bool>> TouchPan { get; }
		public ScriptSignal<Action<object[], float, float, Enum.UserInputState, bool>> TouchPinch { get; }
		public ScriptSignal<Action<object[], float, float, Enum.UserInputState, bool>> TouchRotate { get; }
		public ScriptSignal<Action<InputObject, bool>> TouchStarted { get; }
		public ScriptSignal<Action<Enum.SwipeDirection, int, bool>> TouchSwipe { get; }
		public ScriptSignal<Action<object[], bool>> TouchTap { get; }
		public ScriptSignal<Action<Vector2, bool>> TouchTapInWorld { get; }
		public ScriptSignal<Action<Enum.UserCFrame, CFrame>> UserCFrameChanged { get; }
		public ScriptSignal<Action> WindowFocusReleased { get; }
		public ScriptSignal<Action> WindowFocused { get; }
	}
	
	class UserService : Instance
	{
		public object[] GetUserInfosByUserIdsAsync()
		{
		}
	}
	
	class VRService : Instance
	{
		public Enum.VRTouchpadMode GetTouchpadMode()
		{
		}
		public CFrame GetUserCFrame()
		{
		}
		public bool GetUserCFrameEnabled()
		{
		}
		public void RecenterUserHeadCFrame()
		{
		}
		public void RequestNavigation()
		{
		}
		public void SetTouchpadMode()
		{
		}
		public ScriptSignal<Action<CFrame, Enum.UserCFrame>> NavigationRequested { get; }
		public ScriptSignal<Action<Enum.VRTouchpad, Enum.VRTouchpadMode>> TouchpadModeChanged { get; }
		public ScriptSignal<Action<Enum.UserCFrame, CFrame>> UserCFrameChanged { get; }
		public ScriptSignal<Action<Enum.UserCFrame, bool>> UserCFrameEnabled { get; }
	}
	
	class VRStatusService : Instance
	{
	}
	
	class ValueBase : Instance
	{
	}
	
	class BoolValue : ValueBase
	{
		public ScriptSignal<Action<bool>> Changed { get; }
		public ScriptSignal<Action<bool>> changed { get; }
	}
	
	class BrickColorValue : ValueBase
	{
		public ScriptSignal<Action<BrickColor>> Changed { get; }
		public ScriptSignal<Action<BrickColor>> changed { get; }
	}
	
	class CFrameValue : ValueBase
	{
		public ScriptSignal<Action<CFrame>> Changed { get; }
		public ScriptSignal<Action<CFrame>> changed { get; }
	}
	
	class Color3Value : ValueBase
	{
		public ScriptSignal<Action<Color3>> Changed { get; }
		public ScriptSignal<Action<Color3>> changed { get; }
	}
	
	class DoubleConstrainedValue : ValueBase
	{
		public ScriptSignal<Action<double>> Changed { get; }
		public ScriptSignal<Action<double>> changed { get; }
	}
	
	class IntConstrainedValue : ValueBase
	{
		public ScriptSignal<Action<long>> Changed { get; }
		public ScriptSignal<Action<long>> changed { get; }
	}
	
	class IntValue : ValueBase
	{
		public ScriptSignal<Action<long>> Changed { get; }
		public ScriptSignal<Action<long>> changed { get; }
	}
	
	class NumberValue : ValueBase
	{
		public ScriptSignal<Action<double>> Changed { get; }
		public ScriptSignal<Action<double>> changed { get; }
	}
	
	class ObjectValue : ValueBase
	{
		public ScriptSignal<Action<Instance?>> Changed { get; }
		public ScriptSignal<Action<Instance?>> changed { get; }
	}
	
	class RayValue : ValueBase
	{
		public ScriptSignal<Action<Ray>> Changed { get; }
		public ScriptSignal<Action<Ray>> changed { get; }
	}
	
	class StringValue : ValueBase
	{
		public ScriptSignal<Action<string>> Changed { get; }
		public ScriptSignal<Action<string>> changed { get; }
	}
	
	class Vector3Value : ValueBase
	{
		public ScriptSignal<Action<Vector3>> Changed { get; }
		public ScriptSignal<Action<Vector3>> changed { get; }
	}
	
	class Vector3Curve : Instance
	{
		public object[] GetValueAtTime()
		{
		}
		public FloatCurve X()
		{
		}
		public FloatCurve Y()
		{
		}
		public FloatCurve Z()
		{
		}
	}
	
	class VideoCaptureService : Instance
	{
	}
	
	class VideoDeviceInput : Instance
	{
	}
	
	class VideoService : Instance
	{
	}
	
	class VisibilityCheckDispatcher : Instance
	{
	}
	
	class VisualizationMode : Instance
	{
	}
	
	class VisualizationModeCategory : Instance
	{
	}
	
	class VisualizationModeService : Instance
	{
	}
	
	class VoiceChatInternal : Instance
	{
		public object[] GetAudioProcessingSettings()
		{
		}
		public object[] GetMicDevices()
		{
		}
		public object[] GetParticipants()
		{
		}
		public object[] GetSpeakerDevices()
		{
		}
		public int GetVoiceChatApiVersion()
		{
		}
		public int GetVoiceChatAvailable()
		{
		}
		public bool IsPublishPaused()
		{
		}
		public bool IsSubscribePaused()
		{
		}
		public bool JoinByGroupId()
		{
		}
		public bool JoinByGroupIdToken()
		{
		}
		public void Leave()
		{
		}
		public bool PublishPause()
		{
		}
		public void SetMicDevice()
		{
		}
		public void SetSpeakerDevice()
		{
		}
		public bool SubscribePause()
		{
		}
		public bool SubscribePauseAll()
		{
		}
		public bool IsVoiceEnabledForUserIdAsync()
		{
		}
		public ScriptSignal<Action<Enum.VoiceChatState, Enum.VoiceChatState>> StateChanged { get; }
	}
	
	class VoiceChatService : Instance
	{
		public bool IsVoiceEnabledForUserIdAsync()
		{
		}
	}
	
	class WeldConstraint : Instance
	{
	}
	
	class Wire : Instance
	{
	}
	
}
