// THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY!

namespace RobloxRuntime.Classes
{
	// GENERATED ROBLOX INSTANCE CLASSES
	
	public partial interface Instance
	{
		public bool Archivable { get; set; }
		public string ClassName { get; set; }
		public string Name { get; set; }
		public Instance? Parent { get; set; }
		public bool archivable { get; set; }
		public string className { get; set; }
		public int numExpectedDirectChildren { get; set; }
		public void AddTag(string tag);
		public void ClearAllChildren();
		public void Destroy();
		public Instance? FindFirstAncestor(string name);
		public Instance? FindFirstAncestorOfClass(string className);
		public Instance? FindFirstAncestorWhichIsA(string className);
		public Instance? FindFirstChild(string name, bool? recursive);
		public Instance? FindFirstChildOfClass(string className);
		public Instance? FindFirstChildWhichIsA(string className, bool? recursive);
		public Instance? FindFirstDescendant(string name);
		public Actor GetActor();
		public ScriptSignal GetAttributeChangedSignal(string attribute);
		public Instance[] GetChildren();
		public string GetFullName();
		public ScriptSignal GetPropertyChangedSignal(string property);
		public bool HasTag(string tag);
		public bool IsA(string className);
		public bool IsPropertyModified(string name);
		public void RemoveTag(string tag);
		public void ResetPropertyToDefault(string name);
		public void SetAttribute(string attribute, object? value);
		public void destroy();
		public Instance? findFirstChild(string name, bool? recursive);
		public Instance[] getChildren();
		public bool isA(string className);
		public void remove();
	}
	
	public interface AccessoryDescription : Instance
	{
		public Enum.AccessoryType AccessoryType { get; set; }
		public long AssetId { get; set; }
		public Instance? Instance { get; set; }
		public bool IsLayered { get; set; }
		public int Order { get; set; }
		public Vector3 Position { get; set; }
		public float Puffiness { get; set; }
		public Vector3 Rotation { get; set; }
		public Vector3 Scale { get; set; }
		public Instance? GetAppliedInstance();
	}
	
	public interface AccountService : Instance
	{
	}
	
	public interface Accoutrement : Instance
	{
		public Vector3 AttachmentForward { get; set; }
		public CFrame AttachmentPoint { get; set; }
		public Vector3 AttachmentPos { get; set; }
		public Vector3 AttachmentRight { get; set; }
		public Vector3 AttachmentUp { get; set; }
		public int BackendAccoutrementState { get; set; }
	}
	
	public interface Accessory : Accoutrement
	{
		public Enum.AccessoryType AccessoryType { get; set; }
	}
	
	public interface Hat : Accoutrement
	{
	}
	
	public interface AchievementService : Instance
	{
	}
	
	public interface ActivityHistoryService : Instance
	{
		public ScriptSignal EventNotificationReceived { get; }
	}
	
	public interface AdPortal : Instance
	{
		public string PortalInvalidReason { get; set; }
		public Enum.AdUnitStatus Status { get; set; }
	}
	
	public interface AnalyticsService : Instance
	{
		public void FireCustomEvent(Instance? player, string eventCategory, object? customData);
		public void FireEvent(string category, object? value);
		public void FireInGameEconomyEvent(Instance? player, string itemName, Enum.AnalyticsEconomyAction economyAction, string itemCategory, int amount, string currency, object? location, object? customData);
		public void FireLogEvent(Instance? player, Enum.AnalyticsLogLevel logLevel, string message, object? debugInfo, object? customData);
		public void FirePlayerProgressionEvent(Instance? player, string category, Enum.AnalyticsProgressionStatus progressionStatus, object? location, object? statistics, object? customData);
		public void LogEconomyEvent(Player player, Enum.AnalyticsEconomyFlowType flowType, string currencyType, float amount, float endingBalance, string transactionType, string itemSku, object? customFields);
		public void LogFunnelStepEvent(Player player, string funnelName, string funnelSessionId, int? step, string? stepName, object? customFields);
		public void LogOnboardingFunnelStepEvent(Player player, int step, string stepName, object? customFields);
		public void LogProgressionCompleteEvent(Player player, string progressionPathName, int level, string levelName, object? customFields);
		public void LogProgressionEvent(Player player, string progressionPathName, Enum.AnalyticsProgressionType status, int level, string levelName, object? customFields);
		public void LogProgressionFailEvent(Player player, string progressionPathName, int level, string levelName, object? customFields);
		public void LogProgressionStartEvent(Player player, string progressionPathName, int level, string levelName, object? customFields);
	}
	
	public interface Animation : Instance
	{
		public string AnimationId { get; set; }
	}
	
	public interface AnimationClip : Instance
	{
		public bool Loop { get; set; }
		public Enum.AnimationPriority Priority { get; set; }
	}
	
	public interface CurveAnimation : AnimationClip
	{
	}
	
	public partial interface KeyframeSequence : AnimationClip
	{
		public void AddKeyframe(Instance? keyframe);
		public Instance[] GetKeyframes();
		public void RemoveKeyframe(Instance? keyframe);
	}
	
	public partial interface AnimationClipProvider : Instance
	{
		public string RegisterActiveAnimationClip(AnimationClip animationClip);
		public string RegisterAnimationClip(AnimationClip animationClip);
		public AnimationClip GetAnimationClipAsync(string assetId);
		public Instance? GetAnimations(long userId);
		public ClipEvaluator GetClipEvaluatorAsync(string assetId);
	}
	
	public interface AnimationController : Instance
	{
		public object[] GetPlayingAnimationTracks();
		public AnimationTrack LoadAnimation(Animation animation);
		public ScriptSignal<AnimationTrack> AnimationPlayed { get; }
	}
	
	public interface AnimationFromVideoCreatorService : Instance
	{
	}
	
	public interface AnimationFromVideoCreatorStudioService : Instance
	{
	}
	
	public interface AnimationRigData : Instance
	{
		public string articulatedJoint { get; set; }
		public string label { get; set; }
		public string name { get; set; }
		public string parent { get; set; }
		public string postTransform { get; set; }
		public string preTransform { get; set; }
		public string transform { get; set; }
	}
	
	public interface AnimationStreamTrack : Instance
	{
		public TrackerStreamAnimation? Animation { get; set; }
		public Enum.FACSDataLod FACSDataLod { get; set; }
		public bool IsPlaying { get; set; }
		public Enum.AnimationPriority Priority { get; set; }
		public float WeightCurrent { get; set; }
		public float WeightTarget { get; set; }
	}
	
	public interface AnimationTrack : Instance
	{
		public Animation? Animation { get; set; }
		public bool IsPlaying { get; set; }
		public float Length { get; set; }
		public bool Looped { get; set; }
		public Enum.AnimationPriority Priority { get; set; }
		public float Speed { get; set; }
		public float TimePosition { get; set; }
		public float WeightCurrent { get; set; }
		public float WeightTarget { get; set; }
		public void AdjustSpeed(float? speed);
		public void AdjustWeight(float? weight, float? fadeTime);
		public ScriptSignal GetMarkerReachedSignal(string name);
		public double GetTimeOfKeyframe(string keyframeName);
		public void Play(float? fadeTime, float? weight, float? speed);
		public void Stop(float? fadeTime);
		public ScriptSignal DidLoop { get; }
		public ScriptSignal Ended { get; }
		public ScriptSignal<string> KeyframeReached { get; }
		public ScriptSignal Stopped { get; }
	}
	
	public partial interface Animator : Instance
	{
		public bool EvaluationThrottled { get; set; }
		public bool PreferLodEnabled { get; set; }
		public CFrame RootMotion { get; set; }
		public float RootMotionWeight { get; set; }
		public void ApplyJointVelocities(object? motors);
		public object[] GetPlayingAnimationTracks();
		public AnimationTrack LoadAnimation(Animation animation);
		public void RegisterEvaluationParallelCallback(Action callback);
		public ScriptSignal<AnimationTrack> AnimationPlayed { get; }
	}
	
	public interface AnnotationsService : Instance
	{
	}
	
	public interface AppLifecycleObserverService : Instance
	{
	}
	
	public interface AppUpdateService : Instance
	{
	}
	
	public interface AssetCounterService : Instance
	{
	}
	
	public interface AssetDeliveryProxy : Instance
	{
		public string Interface { get; set; }
		public int Port { get; set; }
		public bool StartServer { get; set; }
	}
	
	public interface AssetImportService : Instance
	{
	}
	
	public interface AssetImportSession : Instance
	{
		public ScriptSignal<object> UploadComplete { get; }
		public ScriptSignal<float> UploadProgress { get; }
	}
	
	public interface AssetManagerService : Instance
	{
	}
	
	public interface AssetPatchSettings : Instance
	{
		public string ContentId { get; set; }
		public string OutputPath { get; set; }
		public string PatchId { get; set; }
	}
	
	public partial interface AssetService : Instance
	{
		public EditableImage CreateEditableImageAsync(string textureId);
		public EditableMesh CreateEditableMeshAsync(string meshId);
		public EditableMesh CreateEditableMeshFromPartAsync(Instance? meshPart);
		public long CreatePlaceAsync(string placeName, long templatePlaceID, string description);
		public long CreatePlaceInPlayerInventoryAsync(Instance? player, string placeName, long templatePlaceID, string description);
		public object[] GetAssetIdsForPackage(long packageAssetId);
		public object[] GetAudioMetadataAsync(object[] idList);
		public object GetBundleDetailsAsync(long bundleId);
		public long GetCreatorAssetID(long creationID);
		public Instance? GetGamePlacesAsync();
		public object[] PromptCreateAssetAsync(Player player, Instance? instance, Enum.AssetType assetType);
		public object[] PromptImportAnimationClipFromVideoAsync(Player player, Action progressCallback);
		public void SavePlaceAsync();
		public AudioPages SearchAudio(AudioSearchParams searchParameters);
	}
	
	public interface Atmosphere : Instance
	{
		public Color3 Color { get; set; }
		public Color3 Decay { get; set; }
		public float Density { get; set; }
		public float Glare { get; set; }
		public float Haze { get; set; }
		public float Offset { get; set; }
	}
	
	public interface Attachment : Instance
	{
		public Vector3 Axis { get; set; }
		public CFrame CFrame { get; set; }
		public Vector3 Orientation { get; set; }
		public Vector3 Position { get; set; }
		public Vector3 Rotation { get; set; }
		public Vector3 SecondaryAxis { get; set; }
		public bool Visible { get; set; }
		public Vector3 WorldAxis { get; set; }
		public CFrame WorldCFrame { get; set; }
		public Vector3 WorldOrientation { get; set; }
		public Vector3 WorldPosition { get; set; }
		public Vector3 WorldRotation { get; set; }
		public Vector3 WorldSecondaryAxis { get; set; }
		public Vector3 GetAxis();
		public Instance[] GetConstraints();
		public Vector3 GetSecondaryAxis();
		public void SetAxis(Vector3 axis);
		public void SetSecondaryAxis(Vector3 axis);
	}
	
	public interface Bone : Attachment
	{
		public CFrame Transform { get; set; }
		public CFrame TransformedCFrame { get; set; }
		public CFrame TransformedWorldCFrame { get; set; }
	}
	
	public interface AudioAnalyzer : Instance
	{
		public float PeakLevel { get; set; }
		public float RmsLevel { get; set; }
		public object[] GetConnectedWires(string pin);
		public object[] GetSpectrum();
	}
	
	public interface AudioChorus : Instance
	{
		public bool Bypass { get; set; }
		public float Depth { get; set; }
		public float Mix { get; set; }
		public float Rate { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioCompressor : Instance
	{
		public float Attack { get; set; }
		public bool Bypass { get; set; }
		public float MakeupGain { get; set; }
		public float Ratio { get; set; }
		public float Release { get; set; }
		public float Threshold { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioDeviceInput : Instance
	{
		public Enum.AccessModifierType AccessType { get; set; }
		public bool Active { get; }
		public bool Muted { get; set; }
		public Player? Player { get; set; }
		public float Volume { get; set; }
		public object[] GetConnectedWires(string pin);
		public object[] GetUserIdAccessList();
		public void SetUserIdAccessList(object[] userIds);
	}
	
	public interface AudioDeviceOutput : Instance
	{
		public Player? Player { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioDistortion : Instance
	{
		public bool Bypass { get; set; }
		public float Level { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioEcho : Instance
	{
		public bool Bypass { get; set; }
		public float DelayTime { get; set; }
		public float DryLevel { get; set; }
		public float Feedback { get; set; }
		public float WetLevel { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioEmitter : Instance
	{
		public string AudioInteractionGroup { get; set; }
		public object[] GetConnectedWires(string pin);
		public object GetDistanceAttenuation();
		public void SetDistanceAttenuation(object curve);
	}
	
	public interface AudioEqualizer : Instance
	{
		public bool Bypass { get; set; }
		public float HighGain { get; set; }
		public float LowGain { get; set; }
		public float MidGain { get; set; }
		public NumberRange MidRange { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioFader : Instance
	{
		public bool Bypass { get; set; }
		public float Volume { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioFilter : Instance
	{
		public bool Bypass { get; set; }
		public Enum.AudioFilterType FilterType { get; set; }
		public float Frequency { get; set; }
		public float Gain { get; set; }
		public float Q { get; set; }
		public object[] GetConnectedWires(string pin);
		public float GetGainAt(float frequency);
	}
	
	public interface AudioFlanger : Instance
	{
		public bool Bypass { get; set; }
		public float Depth { get; set; }
		public float Mix { get; set; }
		public float Rate { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioListener : Instance
	{
		public string AudioInteractionGroup { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioPitchShifter : Instance
	{
		public bool Bypass { get; set; }
		public float Pitch { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioPlayer : Instance
	{
		public string Asset { get; set; }
		public string AssetId { get; set; }
		public bool AutoLoad { get; set; }
		public bool IsPlaying { get; }
		public bool IsReady { get; set; }
		public NumberRange LoopRegion { get; set; }
		public bool Looping { get; set; }
		public NumberRange PlaybackRegion { get; set; }
		public double PlaybackSpeed { get; set; }
		public double TimeLength { get; set; }
		public double TimePosition { get; set; }
		public float Volume { get; set; }
		public object[] GetConnectedWires(string pin);
		public void Play();
		public void Stop();
		public ScriptSignal Ended { get; }
		public ScriptSignal Looped { get; }
	}
	
	public interface AudioReverb : Instance
	{
		public bool Bypass { get; set; }
		public float DecayRatio { get; set; }
		public float DecayTime { get; set; }
		public float Density { get; set; }
		public float Diffusion { get; set; }
		public float DryLevel { get; set; }
		public float EarlyDelayTime { get; set; }
		public float HighCutFrequency { get; set; }
		public float LateDelayTime { get; set; }
		public float LowShelfFrequency { get; set; }
		public float LowShelfGain { get; set; }
		public float ReferenceFrequency { get; set; }
		public float WetLevel { get; set; }
		public object[] GetConnectedWires(string pin);
	}
	
	public interface AudioSearchParams : Instance
	{
		public string Album { get; set; }
		public string Artist { get; set; }
		public Enum.AudioSubType AudioSubType { get; set; }
		public Enum.AudioSubType AudioSubtype { get; set; }
		public int MaxDuration { get; set; }
		public int MinDuration { get; set; }
		public string SearchKeyword { get; set; }
		public string Tag { get; set; }
		public string Title { get; set; }
	}
	
	public interface AvatarChatService : Instance
	{
	}
	
	public interface AvatarCreationService : Instance
	{
		public void SendAnalyticsEvent(string eventName, object parameters);
		public AvatarGenerationSession CreateAvatarGenerationSessionAsync(Player player);
		public object GetAvatarGenerationConfig();
		public Instance? LoadAvatarModelAsync(string id);
		public EditableImage LoadAvatarPreviewImageAsync(string avatarPreview);
		public object[] PromptCreateAvatarAsync(Player player, HumanoidDescription humanoidDescription);
		public object[] ValidateUGCAccessoryAsync(Player player, Instance? accessory, Enum.AccessoryType accessoryType);
		public object[] ValidateUGCBodyPartAsync(Player player, Instance? instance, Enum.BodyPart bodyPart);
		public object[] ValidateUGCFullBodyAsync(Player player, HumanoidDescription humanoidDescription);
	}
	
	public interface AvatarEditorService : Instance
	{
		public Enum.AccessoryType GetAccessoryType(Enum.AvatarAssetType avatarAssetType);
		public void PromptAllowInventoryReadAccess();
		public void PromptCreateOutfit(HumanoidDescription outfit, Enum.HumanoidRigType rigType);
		public void PromptDeleteOutfit(long outfitId);
		public void PromptRenameOutfit(long outfitId);
		public void PromptSaveAvatar(HumanoidDescription humanoidDescription, Enum.HumanoidRigType rigType);
		public void PromptSetFavorite(long itemId, Enum.AvatarItemType itemType, bool shouldFavorite);
		public void PromptUpdateOutfit(long outfitId, HumanoidDescription updatedOutfit, Enum.HumanoidRigType rigType);
		public HumanoidDescription CheckApplyDefaultClothing(HumanoidDescription humanoidDescription);
		public HumanoidDescription ConformToAvatarRules(HumanoidDescription humanoidDescription);
		public object GetAvatarRules();
		public object[] GetBatchItemDetails(object[] itemIds, Enum.AvatarItemType itemType);
		public bool GetFavorite(long itemId, Enum.AvatarItemType itemType);
		public InventoryPages GetInventory(object[] assetTypes);
		public object GetItemDetails(long itemId, Enum.AvatarItemType itemType);
		public object GetOutfitDetails(long outfitId);
		public OutfitPages GetOutfits(Enum.OutfitSource? outfitSource, Enum.OutfitType? outfitType);
		public object[] GetRecommendedAssets(Enum.AvatarAssetType assetType, long? contextAssetId);
		public object[] GetRecommendedBundles(long bundleId);
		public CatalogPages SearchCatalog(CatalogSearchParams searchParameters);
		public ScriptSignal<Enum.AvatarPromptResult> PromptAllowInventoryReadAccessCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult, object?> PromptCreateOutfitCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult> PromptDeleteOutfitCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult> PromptRenameOutfitCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult, HumanoidDescription> PromptSaveAvatarCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult> PromptSetFavoriteCompleted { get; }
		public ScriptSignal<Enum.AvatarPromptResult> PromptUpdateOutfitCompleted { get; }
	}
	
	public interface AvatarGenerationJob : Instance
	{
		public Enum.AvatarGenerationError Error { get; set; }
		public string ErrorMessage { get; set; }
		public float Progress { get; set; }
		public Enum.AvatarGenerationJobStatus Status { get; set; }
		public object GetOutput();
		public void Cancel();
		public void Wait();
	}
	
	public interface Avatar2DGenerationJob : AvatarGenerationJob
	{
		public string Result { get; set; }
	}
	
	public interface Avatar3DGenerationJob : AvatarGenerationJob
	{
		public string Result { get; set; }
	}
	
	public interface AvatarGenerationSession : Instance
	{
		public Avatar3DGenerationJob GenerateAvatarModel(Avatar2DGenerationJob previewJob, object options);
		public Avatar2DGenerationJob GenerateAvatarPreview(string textPrompt, object options);
	}
	
	public interface AvatarImportService : Instance
	{
	}
	
	public interface Backpack : Instance
	{
	}
	
	public interface BadgeService : Instance
	{
		public bool AwardBadge(long userId, long badgeId);
		public object[] CheckUserBadgesAsync(long userId, object[] badgeIds);
		public object GetBadgeInfoAsync(long badgeId);
		public bool IsDisabled(long badgeId);
		public bool IsLegal(long badgeId);
		public bool UserHasBadge(long userId, long badgeId);
		public bool UserHasBadgeAsync(long userId, long badgeId);
	}
	
	public interface BaseImportData : Instance
	{
		public string Id { get; set; }
		public string ImportName { get; set; }
		public bool ShouldImport { get; set; }
		public ScriptSignal<object> StatusRemoved { get; }
		public ScriptSignal<object> StatusReported { get; }
	}
	
	public interface AnimationImportData : BaseImportData
	{
	}
	
	public interface FacsImportData : BaseImportData
	{
	}
	
	public interface GroupImportData : BaseImportData
	{
		public bool Anchored { get; set; }
		public bool ImportAsModelAsset { get; set; }
		public bool InsertInWorkspace { get; set; }
	}
	
	public interface JointImportData : BaseImportData
	{
	}
	
	public interface MaterialImportData : BaseImportData
	{
		public string DiffuseFilePath { get; set; }
		public bool IsPbr { get; set; }
		public string MetalnessFilePath { get; set; }
		public string NormalFilePath { get; set; }
		public string RoughnessFilePath { get; set; }
	}
	
	public interface MeshImportData : BaseImportData
	{
		public bool Anchored { get; set; }
		public bool CageManifold { get; set; }
		public bool CageMeshIntersectedPreview { get; set; }
		public bool CageMeshNotIntersected { get; set; }
		public bool CageNoOverlappingVertices { get; set; }
		public bool CageNonManifoldPreview { get; set; }
		public bool CageOverlappingVerticesPreview { get; set; }
		public bool CageUVMatched { get; set; }
		public bool CageUVMisMatchedPreview { get; set; }
		public Vector3 Dimensions { get; set; }
		public bool DoubleSided { get; set; }
		public bool IgnoreVertexColors { get; set; }
		public bool IrrelevantCageModifiedPreview { get; set; }
		public bool MeshHoleDetectedPreview { get; set; }
		public bool MeshNoHoleDetected { get; set; }
		public bool NoIrrelevantCageModified { get; set; }
		public bool NoOuterCageFarExtendedFromMesh { get; set; }
		public bool OuterCageFarExtendedFromMeshPreview { get; set; }
		public float PolygonCount { get; set; }
		public bool UseImportedPivot { get; set; }
	}
	
	public interface RootImportData : BaseImportData
	{
		public bool AddModelToInventory { get; set; }
		public bool Anchored { get; set; }
		public float AnimationIdForRestPose { get; set; }
		public string ExistingPackageId { get; set; }
		public Vector3 FileDimensions { get; set; }
		public bool ImportAsModelAsset { get; set; }
		public bool ImportAsPackage { get; set; }
		public bool InsertInWorkspace { get; set; }
		public bool InsertWithScenePosition { get; set; }
		public bool InvertNegativeFaces { get; set; }
		public bool KeepZeroInfluenceBones { get; set; }
		public bool MergeMeshes { get; set; }
		public float PolygonCount { get; set; }
		public long PreferredUploadId { get; set; }
		public Enum.RestPose RestPose { get; set; }
		public Enum.RigScale RigScale { get; set; }
		public Enum.RigType RigType { get; set; }
		public bool RigVisualization { get; set; }
		public Enum.MeshScaleUnit ScaleUnit { get; set; }
		public bool UseSceneOriginAsCFrame { get; set; }
		public bool UseSceneOriginAsPivot { get; set; }
		public bool UsesCages { get; set; }
		public bool ValidateUgcBody { get; set; }
		public Enum.NormalId WorldForward { get; set; }
		public Enum.NormalId WorldUp { get; set; }
	}
	
	public interface BasePlayerGui : Instance
	{
		public Instance[] GetGuiObjectsAtPosition(int x, int y);
	}
	
	public interface PlayerGui : BasePlayerGui
	{
		public Enum.ScreenOrientation CurrentScreenOrientation { get; set; }
		public Enum.ScreenOrientation ScreenOrientation { get; set; }
		public GuiObject? SelectionImageObject { get; set; }
		public float GetTopbarTransparency();
		public void SetTopbarTransparency(float transparency);
		public ScriptSignal<float> TopbarTransparencyChangedSignal { get; }
	}
	
	public partial interface StarterGui : BasePlayerGui
	{
		public bool ResetPlayerGuiOnSpawn { get; set; }
		public Enum.RtlTextSupport RtlTextSupport { get; set; }
		public Enum.ScreenOrientation ScreenOrientation { get; set; }
		public Enum.VirtualCursorMode VirtualCursorMode { get; set; }
		public bool GetCoreGuiEnabled(Enum.CoreGuiType coreGuiType);
		public void SetCore(string parameterName, object? value);
		public void SetCoreGuiEnabled(Enum.CoreGuiType coreGuiType, bool enabled);
		public object? GetCore(string parameterName);
	}
	
	public interface BaseRemoteEvent : Instance
	{
	}
	
	public interface RemoteEvent : BaseRemoteEvent
	{
		public void FireAllClients(object[] arguments);
		public void FireClient(Player player, object[] arguments);
		public void FireServer(object[] arguments);
		public ScriptSignal<object[]> OnClientEvent { get; }
		public ScriptSignal<Player, object[]> OnServerEvent { get; }
	}
	
	public interface UnreliableRemoteEvent : BaseRemoteEvent
	{
		public void FireAllClients(object[] arguments);
		public void FireClient(Player player, object[] arguments);
		public void FireServer(object[] arguments);
		public ScriptSignal<object[]> OnClientEvent { get; }
		public ScriptSignal<Player, object[]> OnServerEvent { get; }
	}
	
	public interface BaseWrap : Instance
	{
		public string CageMeshId { get; set; }
		public CFrame CageOrigin { get; set; }
		public CFrame CageOriginWorld { get; set; }
		public bool ImportInProcess { get; }
		public CFrame ImportOrigin { get; set; }
		public CFrame ImportOriginWorld { get; set; }
	}
	
	public interface WrapLayer : BaseWrap
	{
		public Enum.WrapLayerAutoSkin AutoSkin { get; set; }
		public CFrame BindOffset { get; set; }
		public Color3 Color { get; set; }
		public Enum.WrapLayerDebugMode DebugMode { get; set; }
		public bool Enabled { get; set; }
		public int Order { get; set; }
		public float Puffiness { get; set; }
		public string ReferenceMeshId { get; set; }
		public CFrame ReferenceOrigin { get; set; }
		public CFrame ReferenceOriginWorld { get; set; }
		public float ShrinkFactor { get; set; }
	}
	
	public interface WrapTarget : BaseWrap
	{
		public Color3 Color { get; set; }
		public Enum.WrapTargetDebugMode DebugMode { get; set; }
		public float Stiffness { get; set; }
	}
	
	public interface Beam : Instance
	{
		public Attachment? Attachment0 { get; set; }
		public Attachment? Attachment1 { get; set; }
		public float Brightness { get; set; }
		public ColorSequence Color { get; set; }
		public float CurveSize0 { get; set; }
		public float CurveSize1 { get; set; }
		public bool Enabled { get; set; }
		public bool FaceCamera { get; set; }
		public float LightEmission { get; set; }
		public float LightInfluence { get; set; }
		public float LocalTransparencyModifier { get; set; }
		public int Segments { get; set; }
		public string Texture { get; set; }
		public float TextureLength { get; set; }
		public Enum.TextureMode TextureMode { get; set; }
		public float TextureSpeed { get; set; }
		public NumberSequence Transparency { get; set; }
		public float Width0 { get; set; }
		public float Width1 { get; set; }
		public float ZOffset { get; set; }
		public void SetTextureOffset(float? offset);
	}
	
	public interface BindableEvent : Instance
	{
		public void Fire(object[] arguments);
		public ScriptSignal<object[]> Event { get; }
	}
	
	public interface BindableFunction : Instance
	{
		public object[] Invoke(object[] arguments);
	}
	
	public interface BodyMover : Instance
	{
	}
	
	public interface BodyAngularVelocity : BodyMover
	{
		public Vector3 AngularVelocity { get; set; }
		public Vector3 MaxTorque { get; set; }
		public float P { get; set; }
		public Vector3 angularvelocity { get; set; }
		public Vector3 maxTorque { get; set; }
	}
	
	public interface BodyForce : BodyMover
	{
		public Vector3 Force { get; set; }
		public Vector3 force { get; set; }
	}
	
	public interface BodyGyro : BodyMover
	{
		public CFrame CFrame { get; set; }
		public float D { get; set; }
		public Vector3 MaxTorque { get; set; }
		public float P { get; set; }
		public Vector3 maxTorque { get; set; }
	}
	
	public interface BodyPosition : BodyMover
	{
		public float D { get; set; }
		public Vector3 MaxForce { get; set; }
		public float P { get; set; }
		public Vector3 Position { get; set; }
		public Vector3 maxForce { get; set; }
		public Vector3 position { get; set; }
		public Vector3 GetLastForce();
		public Vector3 lastForce();
		public ScriptSignal ReachedTarget { get; }
	}
	
	public interface BodyThrust : BodyMover
	{
		public Vector3 Force { get; set; }
		public Vector3 Location { get; set; }
		public Vector3 force { get; set; }
		public Vector3 location { get; set; }
	}
	
	public interface BodyVelocity : BodyMover
	{
		public Vector3 MaxForce { get; set; }
		public float P { get; set; }
		public Vector3 Velocity { get; set; }
		public Vector3 maxForce { get; set; }
		public Vector3 velocity { get; set; }
		public Vector3 GetLastForce();
		public Vector3 lastForce();
	}
	
	public interface RocketPropulsion : BodyMover
	{
		public bool Active { get; set; }
		public float CartoonFactor { get; set; }
		public float MaxSpeed { get; set; }
		public float MaxThrust { get; set; }
		public Vector3 MaxTorque { get; set; }
		public BasePart? Target { get; set; }
		public Vector3 TargetOffset { get; set; }
		public float TargetRadius { get; set; }
		public float ThrustD { get; set; }
		public float ThrustP { get; set; }
		public float TurnD { get; set; }
		public float TurnP { get; set; }
		public void Abort();
		public void Fire();
		public void fire();
		public ScriptSignal ReachedTarget { get; }
	}
	
	public interface BodyPartDescription : Instance
	{
		public long AssetId { get; set; }
		public Enum.BodyPart BodyPart { get; set; }
		public Color3 Color { get; set; }
		public Instance? Instance { get; set; }
	}
	
	public interface Breakpoint : Instance
	{
	}
	
	public interface BubbleChatMessageProperties : Instance
	{
		public Color3 BackgroundColor3 { get; set; }
		public double BackgroundTransparency { get; set; }
		public Font FontFace { get; set; }
		public bool TailVisible { get; set; }
		public Color3 TextColor3 { get; set; }
		public long TextSize { get; set; }
	}
	
	public interface BulkImportService : Instance
	{
	}
	
	public interface CalloutService : Instance
	{
	}
	
	public interface Camera : Instance
	{
		public CFrame CFrame { get; set; }
		public Instance? CameraSubject { get; set; }
		public Enum.CameraType CameraType { get; set; }
		public CFrame CoordinateFrame { get; set; }
		public float DiagonalFieldOfView { get; set; }
		public float FieldOfView { get; set; }
		public Enum.FieldOfViewMode FieldOfViewMode { get; set; }
		public CFrame Focus { get; set; }
		public bool HeadLocked { get; set; }
		public float HeadScale { get; set; }
		public float MaxAxisFieldOfView { get; set; }
		public float NearPlaneZ { get; set; }
		public bool VRTiltAndRollEnabled { get; set; }
		public Vector2 ViewportSize { get; set; }
		public CFrame focus { get; set; }
		public float GetLargestCutoffDistance(Instance[] ignoreList);
		public float GetPanSpeed();
		public Instance[] GetPartsObscuringTarget(object[] castPoints, Instance[] ignoreList);
		public CFrame GetRenderCFrame();
		public float GetRoll();
		public float GetTiltSpeed();
		public void Interpolate(CFrame endPos, CFrame endFocus, float duration);
		public void PanUnits(int units);
		public Ray ScreenPointToRay(float x, float y, float? depth);
		public void SetCameraPanMode(Enum.CameraPanMode? mode);
		public void SetRoll(float rollAngle);
		public bool TiltUnits(int units);
		public Ray ViewportPointToRay(float x, float y, float? depth);
		public object[] WorldToScreenPoint(Vector3 worldPoint);
		public object[] WorldToViewportPoint(Vector3 worldPoint);
		public void ZoomToExtents(CFrame boundingBoxCFrame, Vector3 boundingBoxSize);
		public ScriptSignal InterpolationFinished { get; }
	}
	
	public interface CaptureService : Instance
	{
		public void CaptureScreenshot(Action onCaptureReady);
		public void PromptSaveCapturesToGallery(object[] contentIds, Action resultCallback);
		public void PromptShareCapture(string contentId, string launchData, Action onAcceptedCallback, Action onDeniedCallback);
		public ScriptSignal CaptureBegan { get; }
		public ScriptSignal CaptureEnded { get; }
		public ScriptSignal<object> CaptureSaved { get; }
		public ScriptSignal<string> UserCaptureSaved { get; }
	}
	
	public interface CharacterAppearance : Instance
	{
	}
	
	public interface BodyColors : CharacterAppearance
	{
		public BrickColor HeadColor { get; set; }
		public Color3 HeadColor3 { get; set; }
		public BrickColor LeftArmColor { get; set; }
		public Color3 LeftArmColor3 { get; set; }
		public BrickColor LeftLegColor { get; set; }
		public Color3 LeftLegColor3 { get; set; }
		public BrickColor RightArmColor { get; set; }
		public Color3 RightArmColor3 { get; set; }
		public BrickColor RightLegColor { get; set; }
		public Color3 RightLegColor3 { get; set; }
		public BrickColor TorsoColor { get; set; }
		public Color3 TorsoColor3 { get; set; }
	}
	
	public interface CharacterMesh : CharacterAppearance
	{
		public long BaseTextureId { get; set; }
		public Enum.BodyPart BodyPart { get; set; }
		public long MeshId { get; set; }
		public long OverlayTextureId { get; set; }
	}
	
	public interface Clothing : CharacterAppearance
	{
		public Color3 Color3 { get; set; }
		public string Outfit1 { get; set; }
		public string Outfit2 { get; set; }
	}
	
	public interface Pants : Clothing
	{
		public string PantsTemplate { get; set; }
	}
	
	public interface Shirt : Clothing
	{
		public string ShirtTemplate { get; set; }
	}
	
	public interface ShirtGraphic : CharacterAppearance
	{
		public Color3 Color3 { get; set; }
		public string Graphic { get; set; }
	}
	
	public interface Chat : Instance
	{
		public bool BubbleChatEnabled { get; set; }
		public bool LoadDefaultChat { get; }
		public void Chat(Instance? partOrCharacter, string message, Enum.ChatColor? color);
		public object[] InvokeChatCallback(Enum.ChatCallbackType callbackType, object[] callbackArguments);
		public void RegisterChatCallback(Enum.ChatCallbackType callbackType, Action callbackFunction);
		public void SetBubbleChatSettings(object? settings);
		public bool CanUserChatAsync(long userId);
		public bool CanUsersChatAsync(long userIdFrom, long userIdTo);
		public string FilterStringAsync(string stringToFilter, Player playerFrom, Player playerTo);
		public string FilterStringForBroadcast(string stringToFilter, Player playerFrom);
		public string FilterStringForPlayerAsync(string stringToFilter, Player playerToFilterFor);
		public ScriptSignal<Instance?, string, Enum.ChatColor> Chatted { get; }
	}
	
	public interface ChatbotUIService : Instance
	{
	}
	
	public interface ClickDetector : Instance
	{
		public string CursorIcon { get; set; }
		public float MaxActivationDistance { get; set; }
		public ScriptSignal<Player> MouseClick { get; }
		public ScriptSignal<Player> MouseHoverEnter { get; }
		public ScriptSignal<Player> MouseHoverLeave { get; }
		public ScriptSignal<Player> RightMouseClick { get; }
		public ScriptSignal<Player> mouseClick { get; }
	}
	
	public interface DragDetector : ClickDetector
	{
		public string ActivatedCursorIcon { get; set; }
		public bool ApplyAtCenterOfMass { get; set; }
		public Vector3 Axis { get; set; }
		public CFrame DragFrame { get; set; }
		public Enum.DragDetectorDragStyle DragStyle { get; set; }
		public bool Enabled { get; set; }
		public Enum.KeyCode GamepadModeSwitchKeyCode { get; set; }
		public Enum.KeyCode KeyboardModeSwitchKeyCode { get; set; }
		public float MaxDragAngle { get; set; }
		public Vector3 MaxDragTranslation { get; set; }
		public float MaxForce { get; set; }
		public float MaxTorque { get; set; }
		public float MinDragAngle { get; set; }
		public Vector3 MinDragTranslation { get; set; }
		public Vector3 Orientation { get; set; }
		public Enum.DragDetectorPermissionPolicy PermissionPolicy { get; set; }
		public Instance? PhysicalDragClickedPart { get; set; }
		public Vector3 PhysicalDragHitPoint { get; set; }
		public bool PhysicalDragIsInVR { get; set; }
		public CFrame PhysicalDragTargetFrame { get; set; }
		public Instance? ReferenceInstance { get; set; }
		public Enum.DragDetectorResponseStyle ResponseStyle { get; set; }
		public float Responsiveness { get; set; }
		public bool RunLocally { get; set; }
		public Vector3 SecondaryAxis { get; set; }
		public float TrackballRadialPullFactor { get; set; }
		public float TrackballRollFactor { get; set; }
		public Enum.KeyCode VRSwitchKeyCode { get; set; }
		public Vector3 WorldAxis { get; set; }
		public Vector3 WorldSecondaryAxis { get; set; }
		public ScriptConnection AddConstraintFunction(int priority, Action function);
		public CFrame GetReferenceFrame();
		public void RestartDrag();
		public void SetDragStyleFunction(Action function);
		public void SetPermissionPolicyFunction(Action function);
		public ScriptSignal<Player, Ray, CFrame, CFrame?, bool> DragContinue { get; }
		public ScriptSignal<Player, Ray, CFrame, CFrame?, bool> DragContinueReplicate { get; }
		public ScriptSignal<Player> DragEnd { get; }
		public ScriptSignal<Player> DragEndReplicate { get; }
		public ScriptSignal<Player, Ray, CFrame, CFrame, BasePart, CFrame?, bool> DragStart { get; }
		public ScriptSignal<Player, Ray, CFrame, CFrame, BasePart, CFrame?, bool> DragStartReplicate { get; }
	}
	
	public interface Clouds : Instance
	{
		public Color3 Color { get; set; }
		public float Cover { get; set; }
		public float Density { get; set; }
		public bool Enabled { get; set; }
	}
	
	public interface Collaborator : Instance
	{
		public CFrame CFrame { get; set; }
		public int CollaboratorColor { get; set; }
		public Color3 CollaboratorColor3 { get; set; }
		public string CurDocGUID { get; set; }
		public int CurScriptLineNumber { get; set; }
		public bool IsIdle { get; set; }
		public Enum.CollaboratorStatus Status { get; set; }
		public long UserId { get; set; }
		public string Username { get; set; }
	}
	
	public interface CollaboratorsService : Instance
	{
	}
	
	public interface CollectionService : Instance
	{
		public void AddTag(Instance? instance, string tag);
		public object[] GetAllTags();
		public ScriptSignal GetInstanceAddedSignal(string tag);
		public ScriptSignal GetInstanceRemovedSignal(string tag);
		public Instance[] GetTagged(string tag);
		public object[] GetTags(Instance? instance);
		public bool HasTag(Instance? instance, string tag);
		public void RemoveTag(Instance? instance, string tag);
		public ScriptSignal<Instance?> ItemAdded { get; }
		public ScriptSignal<Instance?> ItemRemoved { get; }
		public ScriptSignal<string> TagAdded { get; }
		public ScriptSignal<string> TagRemoved { get; }
	}
	
	public interface CommandInstance : Instance
	{
		public bool AllowGUIAccessPoints { get; set; }
		public string DisplayName { get; set; }
		public string Name { get; set; }
	}
	
	public interface CommandService : Instance
	{
	}
	
	public interface CommerceService : Instance
	{
		public void PromptRealWorldCommerceBrowser(Player player, string url);
		public bool UserEligibleForRealWorldCommerceAsync();
	}
	
	public interface Configuration : Instance
	{
	}
	
	public interface ConfigureServerService : Instance
	{
	}
	
	public interface ConnectivityService : Instance
	{
	}
	
	public interface Constraint : Instance
	{
		public bool Active { get; set; }
		public Attachment? Attachment0 { get; set; }
		public Attachment? Attachment1 { get; set; }
		public BrickColor Color { get; set; }
		public bool Enabled { get; set; }
		public bool Visible { get; set; }
		public Vector3 GetDebugAppliedForce(int bodyId);
		public Vector3 GetDebugAppliedTorque(int bodyId);
	}
	
	public interface AlignOrientation : Constraint
	{
		public Enum.AlignType AlignType { get; set; }
		public CFrame CFrame { get; set; }
		public Vector3 LookAtPosition { get; set; }
		public float MaxAngularVelocity { get; set; }
		public float MaxTorque { get; set; }
		public Enum.OrientationAlignmentMode Mode { get; set; }
		public Vector3 PrimaryAxis { get; set; }
		public bool PrimaryAxisOnly { get; set; }
		public bool ReactionTorqueEnabled { get; set; }
		public float Responsiveness { get; set; }
		public bool RigidityEnabled { get; set; }
		public Vector3 SecondaryAxis { get; set; }
	}
	
	public interface AlignPosition : Constraint
	{
		public bool ApplyAtCenterOfMass { get; set; }
		public Enum.ForceLimitMode ForceLimitMode { get; set; }
		public Enum.ActuatorRelativeTo ForceRelativeTo { get; set; }
		public Vector3 MaxAxesForce { get; set; }
		public float MaxForce { get; set; }
		public float MaxVelocity { get; set; }
		public Enum.PositionAlignmentMode Mode { get; set; }
		public Vector3 Position { get; set; }
		public bool ReactionForceEnabled { get; set; }
		public float Responsiveness { get; set; }
		public bool RigidityEnabled { get; set; }
	}
	
	public interface AngularVelocity : Constraint
	{
		public Vector3 AngularVelocity { get; set; }
		public float MaxTorque { get; set; }
		public bool ReactionTorqueEnabled { get; set; }
		public Enum.ActuatorRelativeTo RelativeTo { get; set; }
	}
	
	public interface AnimationConstraint : Constraint
	{
		public CFrame C0 { get; set; }
		public CFrame C1 { get; set; }
		public bool IsKinematic { get; set; }
		public float MaxForce { get; set; }
		public float MaxTorque { get; set; }
		public BasePart? Part0 { get; set; }
		public BasePart? Part1 { get; set; }
		public CFrame Transform { get; set; }
	}
	
	public interface BallSocketConstraint : Constraint
	{
		public bool LimitsEnabled { get; set; }
		public float MaxFrictionTorque { get; set; }
		public float MaxFrictionTorqueXml { get; set; }
		public float Radius { get; set; }
		public float Restitution { get; set; }
		public bool TwistLimitsEnabled { get; set; }
		public float TwistLowerAngle { get; set; }
		public float TwistUpperAngle { get; set; }
		public float UpperAngle { get; set; }
	}
	
	public interface HingeConstraint : Constraint
	{
		public Enum.ActuatorType ActuatorType { get; set; }
		public float AngularResponsiveness { get; set; }
		public float AngularSpeed { get; set; }
		public float AngularVelocity { get; set; }
		public float CurrentAngle { get; set; }
		public bool LimitsEnabled { get; set; }
		public float LowerAngle { get; set; }
		public float MotorMaxAcceleration { get; set; }
		public float MotorMaxTorque { get; set; }
		public float Radius { get; set; }
		public float Restitution { get; set; }
		public float ServoMaxTorque { get; set; }
		public bool SoftlockServoUponReachingTarget { get; set; }
		public float TargetAngle { get; set; }
		public float UpperAngle { get; set; }
	}
	
	public interface LineForce : Constraint
	{
		public bool ApplyAtCenterOfMass { get; set; }
		public bool InverseSquareLaw { get; set; }
		public float Magnitude { get; set; }
		public float MaxForce { get; set; }
		public bool ReactionForceEnabled { get; set; }
	}
	
	public interface LinearVelocity : Constraint
	{
		public Enum.ForceLimitMode ForceLimitMode { get; set; }
		public bool ForceLimitsEnabled { get; set; }
		public Vector3 LineDirection { get; set; }
		public float LineVelocity { get; set; }
		public Vector3 MaxAxesForce { get; set; }
		public float MaxForce { get; set; }
		public Vector2 MaxPlanarAxesForce { get; set; }
		public Vector2 PlaneVelocity { get; set; }
		public Vector3 PrimaryTangentAxis { get; set; }
		public Enum.ActuatorRelativeTo RelativeTo { get; set; }
		public Vector3 SecondaryTangentAxis { get; set; }
		public Vector3 VectorVelocity { get; set; }
		public Enum.VelocityConstraintMode VelocityConstraintMode { get; set; }
	}
	
	public interface PlaneConstraint : Constraint
	{
	}
	
	public interface Plane : PlaneConstraint
	{
	}
	
	public interface RigidConstraint : Constraint
	{
	}
	
	public interface RodConstraint : Constraint
	{
		public float CurrentDistance { get; set; }
		public float Length { get; set; }
		public float LimitAngle0 { get; set; }
		public float LimitAngle1 { get; set; }
		public bool LimitsEnabled { get; set; }
		public float Thickness { get; set; }
	}
	
	public interface RopeConstraint : Constraint
	{
		public float CurrentDistance { get; set; }
		public float Length { get; set; }
		public float Restitution { get; set; }
		public float Thickness { get; set; }
		public bool WinchEnabled { get; set; }
		public float WinchForce { get; set; }
		public float WinchResponsiveness { get; set; }
		public float WinchSpeed { get; set; }
		public float WinchTarget { get; set; }
	}
	
	public interface SlidingBallConstraint : Constraint
	{
		public Enum.ActuatorType ActuatorType { get; set; }
		public float CurrentPosition { get; set; }
		public bool LimitsEnabled { get; set; }
		public float LinearResponsiveness { get; set; }
		public float LowerLimit { get; set; }
		public float MotorMaxAcceleration { get; set; }
		public float MotorMaxForce { get; set; }
		public float Restitution { get; set; }
		public float ServoMaxForce { get; set; }
		public float Size { get; set; }
		public bool SoftlockServoUponReachingTarget { get; set; }
		public float Speed { get; set; }
		public float TargetPosition { get; set; }
		public float UpperLimit { get; set; }
		public float Velocity { get; set; }
	}
	
	public interface CylindricalConstraint : SlidingBallConstraint
	{
		public Enum.ActuatorType AngularActuatorType { get; set; }
		public bool AngularLimitsEnabled { get; set; }
		public float AngularResponsiveness { get; set; }
		public float AngularRestitution { get; set; }
		public float AngularSpeed { get; set; }
		public float AngularVelocity { get; set; }
		public float CurrentAngle { get; set; }
		public float InclinationAngle { get; set; }
		public float LowerAngle { get; set; }
		public float MotorMaxAngularAcceleration { get; set; }
		public float MotorMaxTorque { get; set; }
		public bool RotationAxisVisible { get; set; }
		public float ServoMaxTorque { get; set; }
		public bool SoftlockAngularServoUponReachingTarget { get; set; }
		public float TargetAngle { get; set; }
		public float UpperAngle { get; set; }
		public Vector3 WorldRotationAxis { get; set; }
	}
	
	public interface PrismaticConstraint : SlidingBallConstraint
	{
	}
	
	public interface SpringConstraint : Constraint
	{
		public float Coils { get; set; }
		public float CurrentLength { get; set; }
		public float Damping { get; set; }
		public float FreeLength { get; set; }
		public bool LimitsEnabled { get; set; }
		public float MaxForce { get; set; }
		public float MaxLength { get; set; }
		public float MinLength { get; set; }
		public float Radius { get; set; }
		public float Stiffness { get; set; }
		public float Thickness { get; set; }
	}
	
	public interface Torque : Constraint
	{
		public Enum.ActuatorRelativeTo RelativeTo { get; set; }
		public Vector3 Torque { get; set; }
	}
	
	public interface TorsionSpringConstraint : Constraint
	{
		public float Coils { get; set; }
		public float CurrentAngle { get; set; }
		public float Damping { get; set; }
		public bool LimitEnabled { get; set; }
		public bool LimitsEnabled { get; set; }
		public float MaxAngle { get; set; }
		public float MaxTorque { get; set; }
		public float Radius { get; set; }
		public float Restitution { get; set; }
		public float Stiffness { get; set; }
	}
	
	public interface UniversalConstraint : Constraint
	{
		public bool LimitsEnabled { get; set; }
		public float MaxAngle { get; set; }
		public float Radius { get; set; }
		public float Restitution { get; set; }
	}
	
	public interface VectorForce : Constraint
	{
		public bool ApplyAtCenterOfMass { get; set; }
		public Vector3 Force { get; set; }
		public Enum.ActuatorRelativeTo RelativeTo { get; set; }
	}
	
	public interface ContentProvider : Instance
	{
		public string BaseUrl { get; set; }
		public int RequestQueueSize { get; set; }
		public Enum.AssetFetchStatus GetAssetFetchStatus(string contentId);
		public ScriptSignal GetAssetFetchStatusChangedSignal(string contentId);
		public object[] ListEncryptedAssets();
		public void Preload(string contentId);
		public void RegisterDefaultEncryptionKey(string encryptionKey);
		public void RegisterDefaultSessionKey(string sessionKey);
		public void RegisterEncryptedAsset(string assetId, string encryptionKey);
		public void RegisterSessionEncryptedAsset(string contentId, string sessionKey);
		public void UnregisterDefaultEncryptionKey();
		public void UnregisterEncryptedAsset(string assetId);
		public void PreloadAsync(object[] contentIdList, Action? callbackFunction);
		public ScriptSignal<string> AssetFetchFailed { get; }
	}
	
	public interface ContextActionService : Instance
	{
		public void BindAction(string actionName, Action functionToBind, bool createTouchButton, object[] inputTypes);
		public void BindActionAtPriority(string actionName, Action functionToBind, bool createTouchButton, int priorityLevel, object[] inputTypes);
		public void BindActionToInputTypes(string actionName, Action functionToBind, bool createTouchButton, object[] inputTypes);
		public void BindActivate(Enum.UserInputType userInputTypeForActivation, object[] keyCodesForActivation);
		public object GetAllBoundActionInfo();
		public object GetBoundActionInfo(string actionName);
		public string GetCurrentLocalToolIcon();
		public void SetDescription(string actionName, string description);
		public void SetImage(string actionName, string image);
		public void SetPosition(string actionName, UDim2 position);
		public void SetTitle(string actionName, string title);
		public void UnbindAction(string actionName);
		public void UnbindActivate(Enum.UserInputType userInputTypeForActivation, Enum.KeyCode? keyCodeForActivation);
		public void UnbindAllActions();
		public Instance? GetButton(string actionName);
		public ScriptSignal<Instance?> LocalToolEquipped { get; }
		public ScriptSignal<Instance?> LocalToolUnequipped { get; }
	}
	
	public interface Controller : Instance
	{
		public void BindButton(Enum.Button button, string caption);
		public bool GetButton(Enum.Button button);
		public void UnbindButton(Enum.Button button);
		public void bindButton(Enum.Button button, string caption);
		public bool getButton(Enum.Button button);
		public ScriptSignal<Enum.Button> ButtonChanged { get; }
	}
	
	public interface HumanoidController : Controller
	{
	}
	
	public interface SkateboardController : Controller
	{
		public float Steer { get; set; }
		public float Throttle { get; set; }
		public ScriptSignal<string> AxisChanged { get; }
	}
	
	public interface VehicleController : Controller
	{
	}
	
	public interface ControllerBase : Instance
	{
		public bool Active { get; set; }
		public bool BalanceRigidityEnabled { get; set; }
		public float MoveSpeedFactor { get; set; }
	}
	
	public interface AirController : ControllerBase
	{
		public float BalanceMaxTorque { get; set; }
		public float BalanceSpeed { get; set; }
		public Vector3 LinearImpulse { get; set; }
		public bool MaintainAngularMomentum { get; set; }
		public bool MaintainLinearMomentum { get; set; }
		public float MoveMaxForce { get; set; }
		public float TurnMaxTorque { get; set; }
		public float TurnSpeedFactor { get; set; }
	}
	
	public interface ClimbController : ControllerBase
	{
		public float AccelerationTime { get; set; }
		public float BalanceMaxTorque { get; set; }
		public float BalanceSpeed { get; set; }
		public float MoveMaxForce { get; set; }
	}
	
	public interface GroundController : ControllerBase
	{
		public float AccelerationLean { get; set; }
		public float AccelerationTime { get; set; }
		public float BalanceMaxTorque { get; set; }
		public float BalanceSpeed { get; set; }
		public float DecelerationTime { get; set; }
		public float Friction { get; set; }
		public float FrictionWeight { get; set; }
		public float GroundOffset { get; set; }
		public float StandForce { get; set; }
		public float StandSpeed { get; set; }
		public float TurnSpeedFactor { get; set; }
	}
	
	public interface SwimController : ControllerBase
	{
		public float AccelerationTime { get; set; }
		public float PitchMaxTorque { get; set; }
		public float PitchSpeedFactor { get; set; }
		public float RollMaxTorque { get; set; }
		public float RollSpeedFactor { get; set; }
	}
	
	public interface ControllerManager : Instance
	{
		public ControllerBase? ActiveController { get; set; }
		public float BaseMoveSpeed { get; set; }
		public float BaseTurnSpeed { get; set; }
		public ControllerSensor? ClimbSensor { get; set; }
		public Vector3 FacingDirection { get; set; }
		public ControllerSensor? GroundSensor { get; set; }
		public Vector3 MovingDirection { get; set; }
		public BasePart? RootPart { get; set; }
		public Vector3 UpDirection { get; set; }
	}
	
	public interface ControllerService : Instance
	{
	}
	
	public interface ConversationalAIAcceptanceService : Instance
	{
	}
	
	public interface CoreScriptDebuggingManagerHelper : Instance
	{
	}
	
	public interface CreationDBService : Instance
	{
	}
	
	public interface CrossDMScriptChangeListener : Instance
	{
	}
	
	public interface DataModelMesh : Instance
	{
		public Vector3 Offset { get; set; }
		public Vector3 Scale { get; set; }
		public Vector3 VertexColor { get; set; }
	}
	
	public interface BevelMesh : DataModelMesh
	{
		public float Bevel { get; set; }
		public float BevelRoundness { get; set; }
		public float Bulge { get; set; }
	}
	
	public interface BlockMesh : BevelMesh
	{
	}
	
	public interface CylinderMesh : BevelMesh
	{
	}
	
	public interface EditableMesh : DataModelMesh
	{
		public bool SkinningEnabled { get; set; }
		public long AddTriangle(long vertexId0, long vertexId1, long vertexId2);
		public long AddVertex(Vector3 p);
		public object[] FindClosestPointOnSurface(Vector3 point);
		public long FindClosestVertex(Vector3 toThisPoint);
		public object[] FindVerticesWithinSphere(Vector3 center, float radius);
		public object[] GetAdjacentTriangles(long triangleId);
		public object[] GetAdjacentVertices(long vertexId);
		public Vector3 GetPosition(long vertexId);
		public object[] GetTriangleVertices(long triangleId);
		public object[] GetTriangles();
		public Vector2 GetUV(long vertexId);
		public Color3 GetVertexColor(long vertexId);
		public float GetVertexColorAlpha(long vertexId);
		public Vector3 GetVertexNormal(long vertexId);
		public object[] GetVertices();
		public object[] RaycastLocal(Vector3 origin, Vector3 direction);
		public void RemoveTriangle(long triangleId);
		public void RemoveVertex(long vertexId);
		public void SetPosition(long vertexId, Vector3 p);
		public void SetUV(long vertexId, Vector2 uv);
		public void SetVertexColor(long vertexId, Color3 color);
		public void SetVertexColorAlpha(long vertexId, float alpha);
		public void SetVertexNormal(long vertexId, Vector3 vnormal);
		public MeshPart CreateMeshPartAsync(object? options);
	}
	
	public interface RobloxEditableMesh : EditableMesh
	{
	}
	
	public interface FileMesh : DataModelMesh
	{
		public string MeshId { get; set; }
		public string TextureId { get; set; }
	}
	
	public interface SpecialMesh : FileMesh
	{
		public Enum.MeshType MeshType { get; set; }
	}
	
	public interface DataModelPatchService : Instance
	{
	}
	
	public interface DataStoreGetOptions : Instance
	{
		public bool UseCache { get; set; }
	}
	
	public interface DataStoreIncrementOptions : Instance
	{
		public object GetMetadata();
		public void SetMetadata(object attributes);
	}
	
	public interface DataStoreInfo : Instance
	{
		public long CreatedTime { get; set; }
		public string DataStoreName { get; set; }
		public long UpdatedTime { get; set; }
	}
	
	public interface DataStoreKey : Instance
	{
		public string KeyName { get; set; }
	}
	
	public interface DataStoreKeyInfo : Instance
	{
		public long CreatedTime { get; set; }
		public long UpdatedTime { get; set; }
		public string Version { get; set; }
		public object GetMetadata();
		public object[] GetUserIds();
	}
	
	public interface DataStoreObjectVersionInfo : Instance
	{
		public long CreatedTime { get; set; }
		public bool IsDeleted { get; set; }
		public string Version { get; set; }
	}
	
	public interface DataStoreOptions : Instance
	{
		public bool AllScopes { get; set; }
		public void SetExperimentalFeatures(object experimentalFeatures);
	}
	
	public interface DataStoreService : Instance
	{
		public GlobalDataStore GetDataStore(string name, string? scope, Instance? options);
		public GlobalDataStore GetGlobalDataStore();
		public OrderedDataStore GetOrderedDataStore(string name, string? scope);
		public int GetRequestBudgetForRequestType(Enum.DataStoreRequestType requestType);
		public DataStoreListingPages ListDataStoresAsync(string prefix, int? pageSize, string? cursor);
	}
	
	public interface DataStoreSetOptions : Instance
	{
		public object GetMetadata();
		public void SetMetadata(object attributes);
	}
	
	public interface Debris : Instance
	{
		public int MaxItems { get; set; }
		public void AddItem(Instance? item, double? lifetime);
		public void addItem(Instance? item, double? lifetime);
	}
	
	public interface DebuggablePluginWatcher : Instance
	{
	}
	
	public interface DebuggerConnection : Instance
	{
	}
	
	public interface LocalDebuggerConnection : DebuggerConnection
	{
	}
	
	public interface DebuggerConnectionManager : Instance
	{
	}
	
	public interface DebuggerLuaResponse : Instance
	{
	}
	
	public interface DebuggerUIService : Instance
	{
	}
	
	public interface DebuggerVariable : Instance
	{
	}
	
	public interface DeviceIdService : Instance
	{
	}
	
	public interface Dialog : Instance
	{
		public Enum.DialogBehaviorType BehaviorType { get; set; }
		public float ConversationDistance { get; set; }
		public bool GoodbyeChoiceActive { get; set; }
		public string GoodbyeDialog { get; set; }
		public bool InUse { get; set; }
		public string InitialPrompt { get; set; }
		public Enum.DialogPurpose Purpose { get; set; }
		public Enum.DialogTone Tone { get; set; }
		public float TriggerDistance { get; set; }
		public Vector3 TriggerOffset { get; set; }
		public Instance[] GetCurrentPlayers();
		public ScriptSignal<Instance?, Instance?> DialogChoiceSelected { get; }
	}
	
	public interface DialogChoice : Instance
	{
		public bool GoodbyeChoiceActive { get; set; }
		public string GoodbyeDialog { get; set; }
		public string ResponseDialog { get; set; }
		public string UserDialog { get; set; }
	}
	
	public interface Dragger : Instance
	{
		public void AxisRotate(Enum.Axis? axis);
		public void MouseDown(Instance? mousePart, Vector3 pointOnMousePart, Instance[] parts);
		public void MouseMove(Ray mouseRay);
		public void MouseUp();
	}
	
	public interface DraggerService : Instance
	{
		public bool AlignDraggedObjects { get; set; }
		public bool AngleSnapEnabled { get; set; }
		public float AngleSnapIncrement { get; set; }
		public bool AnimateHover { get; set; }
		public bool CollisionsEnabled { get; set; }
		public Enum.DraggerCoordinateSpace DraggerCoordinateSpace { get; set; }
		public Enum.DraggerMovementMode DraggerMovementMode { get; set; }
		public Color3 GeometrySnapColor { get; set; }
		public float HoverAnimateFrequency { get; set; }
		public float HoverThickness { get; set; }
		public bool JointsEnabled { get; set; }
		public bool LinearSnapEnabled { get; set; }
		public float LinearSnapIncrement { get; set; }
		public bool ShowHover { get; set; }
		public bool ShowPivotIndicator { get; set; }
	}
	
	public interface EditableImage : Instance
	{
		public Vector2 Size { get; set; }
		public EditableImage Copy(Vector2 min, Vector2 max);
		public void Crop(Vector2 min, Vector2 max);
		public void DrawCircle(Vector2 center, int radius, Color3 color, float transparency, Enum.ImageCombineType combineType);
		public void DrawImage(Vector2 position, EditableImage image, Enum.ImageCombineType combineType);
		public void DrawLine(Vector2 p1, Vector2 p2, Color3 color, float transparency, Enum.ImageCombineType combineType);
		public void DrawProjectionImage(EditableMesh mesh, object projection, object brushConfig);
		public void DrawRectangle(Vector2 position, Vector2 size, Color3 color, float transparency, Enum.ImageCombineType combineType);
		public object[] ReadPixels(Vector2 position, Vector2 size);
		public void Resize(Vector2 size);
		public void Rotate(float degrees, bool changeSize);
		public void WritePixels(Vector2 position, Vector2 size, object[] pixels);
	}
	
	public interface RobloxEditableImage : EditableImage
	{
	}
	
	public interface EngineAPICloudProcessingService : Instance
	{
	}
	
	public interface EulerRotationCurve : Instance
	{
		public Enum.RotationOrder RotationOrder { get; set; }
		public object[] GetAnglesAtTime(float time);
		public CFrame GetRotationAtTime(float time);
		public FloatCurve X();
		public FloatCurve Y();
		public FloatCurve Z();
	}
	
	public interface EventIngestService : Instance
	{
	}
	
	public interface ExampleService : Instance
	{
	}
	
	public interface ExperienceAuthService : Instance
	{
	}
	
	public interface ExperienceInviteOptions : Instance
	{
		public string InviteMessageId { get; set; }
		public long InviteUser { get; set; }
		public string LaunchData { get; set; }
		public string PromptMessage { get; set; }
	}
	
	public interface ExperienceNotificationService : Instance
	{
		public void PromptOptIn();
		public bool CanPromptOptInAsync();
		public ScriptSignal OptInPromptClosed { get; }
	}
	
	public interface ExperienceService : Instance
	{
	}
	
	public interface ExperienceStateCaptureService : Instance
	{
	}
	
	public interface Explosion : Instance
	{
		public float BlastPressure { get; set; }
		public float BlastRadius { get; set; }
		public float DestroyJointRadiusPercent { get; set; }
		public Enum.ExplosionType ExplosionType { get; set; }
		public float LocalTransparencyModifier { get; set; }
		public Vector3 Position { get; set; }
		public float TimeScale { get; set; }
		public bool Visible { get; set; }
		public ScriptSignal<BasePart, float> Hit { get; }
	}
	
	public interface FaceAnimatorService : Instance
	{
	}
	
	public interface FaceControls : Instance
	{
	}
	
	public interface FaceInstance : Instance
	{
		public Enum.NormalId Face { get; set; }
	}
	
	public interface Decal : FaceInstance
	{
		public Color3 Color3 { get; set; }
		public float LocalTransparencyModifier { get; set; }
		public float Shiny { get; set; }
		public float Specular { get; set; }
		public string Texture { get; set; }
		public float Transparency { get; set; }
		public int ZIndex { get; set; }
	}
	
	public interface Texture : Decal
	{
		public float OffsetStudsU { get; set; }
		public float OffsetStudsV { get; set; }
		public float StudsPerTileU { get; set; }
		public float StudsPerTileV { get; set; }
	}
	
	public interface FacialAnimationRecordingService : Instance
	{
	}
	
	public interface FacialAnimationStreamingServiceStats : Instance
	{
	}
	
	public interface FacialAnimationStreamingServiceV2 : Instance
	{
	}
	
	public interface FacialAnimationStreamingSubsessionStats : Instance
	{
	}
	
	public interface Feature : Instance
	{
		public Enum.NormalId FaceId { get; set; }
		public Enum.InOut InOut { get; set; }
		public Enum.LeftRight LeftRight { get; set; }
		public Enum.TopBottom TopBottom { get; set; }
	}
	
	public interface Hole : Feature
	{
	}
	
	public interface MotorFeature : Feature
	{
	}
	
	public interface Fire : Instance
	{
		public Color3 Color { get; set; }
		public bool Enabled { get; set; }
		public float Heat { get; set; }
		public float LocalTransparencyModifier { get; set; }
		public Color3 SecondaryColor { get; set; }
		public float Size { get; set; }
		public float TimeScale { get; set; }
		public float heat_xml { get; set; }
		public float size { get; set; }
		public float size_xml { get; set; }
	}
	
	public interface FloatCurve : Instance
	{
		public int Length { get; set; }
		public string ValuesAndTimes { get; set; }
		public FloatCurveKey GetKeyAtIndex(int index);
		public object[] GetKeyIndicesAtTime(float time);
		public object[] GetKeys();
		public float? GetValueAtTime(float time);
		public object[] InsertKey(FloatCurveKey key);
		public int RemoveKeyAtIndex(int startingIndex, int? count);
		public int SetKeys(object[] keys);
	}
	
	public interface Folder : Instance
	{
	}
	
	public interface ForceField : Instance
	{
		public bool Visible { get; set; }
	}
	
	public interface GamePassService : Instance
	{
		public bool PlayerHasPass(Player player, long gamePassId);
	}
	
	public interface GamepadService : Instance
	{
		public bool GamepadCursorEnabled { get; }
		public void DisableGamepadCursor();
		public void EnableGamepadCursor(Instance? guiObject);
	}
	
	public interface GenericChallengeService : Instance
	{
	}
	
	public interface GeometryService : Instance
	{
		public object[] CalculateConstraintsToPreserve(Instance? source, object[] destination, object? options);
		public object[] IntersectAsync(Instance? part, object[] parts, object? options);
		public object[] SubtractAsync(Instance? part, object[] parts, object? options);
		public object[] UnionAsync(Instance? part, object[] parts, object? options);
	}
	
	public interface GetTextBoundsParams : Instance
	{
		public Font Font { get; set; }
		public bool RichText { get; set; }
		public float Size { get; set; }
		public string Text { get; set; }
		public float Width { get; set; }
	}
	
	public interface GlobalDataStore : Instance
	{
		public ScriptConnection OnUpdate(string key, Action callback);
		public object[] GetAsync(string key, DataStoreGetOptions? options);
		public object? IncrementAsync(string key, int? delta, object[]? userIds, DataStoreIncrementOptions? options);
		public object[] RemoveAsync(string key);
		public object? SetAsync(string key, object? value, object[]? userIds, DataStoreSetOptions? options);
		public object[] UpdateAsync(string key, Action transformFunction);
	}
	
	public interface DataStore : GlobalDataStore
	{
		public object[] GetVersionAsync(string key, string version);
		public DataStoreKeyPages ListKeysAsync(string prefix, int? pageSize, string? cursor, bool? excludeDeleted);
		public DataStoreVersionPages ListVersionsAsync(string key, Enum.SortDirection? sortDirection, long? minDate, long? maxDate, int? pageSize);
		public void RemoveVersionAsync(string key, string version);
	}
	
	public interface OrderedDataStore : GlobalDataStore
	{
		public Instance? GetSortedAsync(bool ascending, int pagesize, object? minValue, object? maxValue);
	}
	
	public interface GroupService : Instance
	{
		public StandardPages GetAlliesAsync(long groupId);
		public StandardPages GetEnemiesAsync(long groupId);
		public object? GetGroupInfoAsync(long groupId);
		public object[] GetGroupsAsync(long userId);
	}
	
	public interface GuiBase : Instance
	{
	}
	
	public interface GuiBase2d : GuiBase
	{
		public Vector2 AbsolutePosition { get; set; }
		public float AbsoluteRotation { get; set; }
		public Vector2 AbsoluteSize { get; set; }
		public bool AutoLocalize { get; set; }
		public bool Localize { get; set; }
		public LocalizationTable? RootLocalizationTable { get; set; }
		public Enum.SelectionBehavior SelectionBehaviorDown { get; set; }
		public Enum.SelectionBehavior SelectionBehaviorLeft { get; set; }
		public Enum.SelectionBehavior SelectionBehaviorRight { get; set; }
		public Enum.SelectionBehavior SelectionBehaviorUp { get; set; }
		public bool SelectionGroup { get; set; }
		public ScriptSignal<bool, GuiObject, GuiObject> SelectionChanged { get; }
	}
	
	public interface GuiObject : GuiBase2d
	{
		public bool Active { get; set; }
		public Vector2 AnchorPoint { get; set; }
		public Enum.AutomaticSize AutomaticSize { get; set; }
		public BrickColor BackgroundColor { get; set; }
		public Color3 BackgroundColor3 { get; set; }
		public float BackgroundTransparency { get; set; }
		public BrickColor BorderColor { get; set; }
		public Color3 BorderColor3 { get; set; }
		public Enum.BorderMode BorderMode { get; set; }
		public int BorderSizePixel { get; set; }
		public bool ClipsDescendants { get; set; }
		public int DragBeginConnectionCount { get; set; }
		public int DragStoppedConnectionCount { get; set; }
		public bool Draggable { get; set; }
		public Enum.GuiState GuiState { get; set; }
		public bool Interactable { get; set; }
		public int LayoutOrder { get; set; }
		public int MouseEnterConnectionCount { get; set; }
		public int MouseLeaveConnectionCount { get; set; }
		public int MouseMovedConnectionCount { get; set; }
		public int MouseWheelBackwardConnectionCount { get; set; }
		public int MouseWheelForwardConnectionCount { get; set; }
		public GuiObject? NextSelectionDown { get; set; }
		public GuiObject? NextSelectionLeft { get; set; }
		public GuiObject? NextSelectionRight { get; set; }
		public GuiObject? NextSelectionUp { get; set; }
		public UDim2 Position { get; set; }
		public float Rotation { get; set; }
		public bool Selectable { get; set; }
		public GuiObject? SelectionImageObject { get; set; }
		public int SelectionOrder { get; set; }
		public UDim2 Size { get; set; }
		public Enum.SizeConstraint SizeConstraint { get; set; }
		public float Transparency { get; set; }
		public bool Visible { get; set; }
		public int ZIndex { get; set; }
		public bool TweenPosition(UDim2 endPosition, Enum.EasingDirection? easingDirection, Enum.EasingStyle? easingStyle, float? time, bool? _override, Action? callback);
		public bool TweenSize(UDim2 endSize, Enum.EasingDirection? easingDirection, Enum.EasingStyle? easingStyle, float? time, bool? _override, Action? callback);
		public bool TweenSizeAndPosition(UDim2 endSize, UDim2 endPosition, Enum.EasingDirection? easingDirection, Enum.EasingStyle? easingStyle, float? time, bool? _override, Action? callback);
		public ScriptSignal<UDim2> DragBegin { get; }
		public ScriptSignal<int, int> DragStopped { get; }
		public ScriptSignal<InputObject> InputBegan { get; }
		public ScriptSignal<InputObject> InputChanged { get; }
		public ScriptSignal<InputObject> InputEnded { get; }
		public ScriptSignal<int, int> MouseEnter { get; }
		public ScriptSignal<int, int> MouseLeave { get; }
		public ScriptSignal<int, int> MouseMoved { get; }
		public ScriptSignal<int, int> MouseWheelBackward { get; }
		public ScriptSignal<int, int> MouseWheelForward { get; }
		public ScriptSignal SelectionGained { get; }
		public ScriptSignal SelectionLost { get; }
		public ScriptSignal<object[], Enum.UserInputState> TouchLongPress { get; }
		public ScriptSignal<object[], Vector2, Vector2, Enum.UserInputState> TouchPan { get; }
		public ScriptSignal<object[], float, float, Enum.UserInputState> TouchPinch { get; }
		public ScriptSignal<object[], float, float, Enum.UserInputState> TouchRotate { get; }
		public ScriptSignal<Enum.SwipeDirection, int> TouchSwipe { get; }
		public ScriptSignal<object[]> TouchTap { get; }
	}
	
	public interface CanvasGroup : GuiObject
	{
		public Color3 GroupColor3 { get; set; }
		public float GroupTransparency { get; set; }
	}
	
	public interface Frame : GuiObject
	{
		public Enum.FrameStyle Style { get; set; }
	}
	
	public interface GuiButton : GuiObject
	{
		public bool AutoButtonColor { get; set; }
		public bool Modal { get; set; }
		public int MouseButton1ClickConnectionCount { get; set; }
		public int MouseButton1DownConnectionCount { get; set; }
		public int MouseButton1UpConnectionCount { get; set; }
		public int MouseButton2ClickConnectionCount { get; set; }
		public int MouseButton2DownConnectionCount { get; set; }
		public int MouseButton2UpConnectionCount { get; set; }
		public bool Selected { get; set; }
		public Enum.ButtonStyle Style { get; set; }
		public ScriptSignal<InputObject, int> Activated { get; }
		public ScriptSignal MouseButton1Click { get; }
		public ScriptSignal<int, int> MouseButton1Down { get; }
		public ScriptSignal<int, int> MouseButton1Up { get; }
		public ScriptSignal MouseButton2Click { get; }
		public ScriptSignal<int, int> MouseButton2Down { get; }
		public ScriptSignal<int, int> MouseButton2Up { get; }
	}
	
	public interface ImageButton : GuiButton
	{
		public string HoverImage { get; set; }
		public string Image { get; set; }
		public Color3 ImageColor3 { get; set; }
		public Vector2 ImageRectOffset { get; set; }
		public Vector2 ImageRectSize { get; set; }
		public float ImageTransparency { get; set; }
		public bool IsLoaded { get; set; }
		public string PressedImage { get; set; }
		public Enum.ResamplerMode ResampleMode { get; set; }
		public Enum.ScaleType ScaleType { get; set; }
		public Rect SliceCenter { get; set; }
		public float SliceScale { get; set; }
		public UDim2 TileSize { get; set; }
	}
	
	public interface TextButton : GuiButton
	{
		public string ContentText { get; set; }
		public Enum.Font Font { get; set; }
		public Font FontFace { get; set; }
		public Enum.FontSize FontSize { get; set; }
		public float LineHeight { get; set; }
		public string LocalizedText { get; set; }
		public int MaxVisibleGraphemes { get; set; }
		public string OpenTypeFeatures { get; set; }
		public string OpenTypeFeaturesError { get; set; }
		public bool RichText { get; set; }
		public string Text { get; set; }
		public Vector2 TextBounds { get; set; }
		public BrickColor TextColor { get; set; }
		public Color3 TextColor3 { get; set; }
		public Enum.TextDirection TextDirection { get; set; }
		public bool TextFits { get; set; }
		public bool TextScaled { get; set; }
		public float TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public float TextStrokeTransparency { get; set; }
		public float TextTransparency { get; set; }
		public Enum.TextTruncate TextTruncate { get; set; }
		public bool TextWrap { get; set; }
		public bool TextWrapped { get; set; }
		public Enum.TextXAlignment TextXAlignment { get; set; }
		public Enum.TextYAlignment TextYAlignment { get; set; }
	}
	
	public interface GuiLabel : GuiObject
	{
	}
	
	public interface ImageLabel : GuiLabel
	{
		public string Image { get; set; }
		public Color3 ImageColor3 { get; set; }
		public Vector2 ImageRectOffset { get; set; }
		public Vector2 ImageRectSize { get; set; }
		public float ImageTransparency { get; set; }
		public bool IsLoaded { get; set; }
		public Enum.ResamplerMode ResampleMode { get; set; }
		public Enum.ScaleType ScaleType { get; set; }
		public Rect SliceCenter { get; set; }
		public float SliceScale { get; set; }
		public UDim2 TileSize { get; set; }
	}
	
	public interface TextLabel : GuiLabel
	{
		public string ContentText { get; set; }
		public Enum.Font Font { get; set; }
		public Font FontFace { get; set; }
		public Enum.FontSize FontSize { get; set; }
		public float LineHeight { get; set; }
		public string LocalizedText { get; set; }
		public int MaxVisibleGraphemes { get; set; }
		public string OpenTypeFeatures { get; set; }
		public string OpenTypeFeaturesError { get; set; }
		public bool RichText { get; set; }
		public string Text { get; set; }
		public Vector2 TextBounds { get; set; }
		public BrickColor TextColor { get; set; }
		public Color3 TextColor3 { get; set; }
		public Enum.TextDirection TextDirection { get; set; }
		public bool TextFits { get; set; }
		public bool TextScaled { get; set; }
		public float TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public float TextStrokeTransparency { get; set; }
		public float TextTransparency { get; set; }
		public Enum.TextTruncate TextTruncate { get; set; }
		public bool TextWrap { get; set; }
		public bool TextWrapped { get; set; }
		public Enum.TextXAlignment TextXAlignment { get; set; }
		public Enum.TextYAlignment TextYAlignment { get; set; }
	}
	
	public interface ScrollingFrame : GuiObject
	{
		public Vector2 AbsoluteCanvasSize { get; set; }
		public Vector2 AbsoluteWindowSize { get; set; }
		public Enum.AutomaticSize AutomaticCanvasSize { get; set; }
		public string BottomImage { get; set; }
		public Vector2 CanvasPosition { get; set; }
		public UDim2 CanvasSize { get; set; }
		public Enum.ElasticBehavior ElasticBehavior { get; set; }
		public Enum.ScrollBarInset HorizontalScrollBarInset { get; set; }
		public string MidImage { get; set; }
		public Color3 ScrollBarImageColor3 { get; set; }
		public float ScrollBarImageTransparency { get; set; }
		public int ScrollBarThickness { get; set; }
		public Enum.ScrollingDirection ScrollingDirection { get; set; }
		public bool ScrollingEnabled { get; set; }
		public string TopImage { get; set; }
		public Enum.ScrollBarInset VerticalScrollBarInset { get; set; }
		public Enum.VerticalScrollBarPosition VerticalScrollBarPosition { get; set; }
	}
	
	public interface TextBox : GuiObject
	{
		public bool ClearTextOnFocus { get; set; }
		public string ContentText { get; set; }
		public int CursorPosition { get; set; }
		public Enum.Font Font { get; set; }
		public Font FontFace { get; set; }
		public Enum.FontSize FontSize { get; set; }
		public float LineHeight { get; set; }
		public int MaxVisibleGraphemes { get; set; }
		public bool MultiLine { get; set; }
		public string OpenTypeFeatures { get; set; }
		public string OpenTypeFeaturesError { get; set; }
		public Color3 PlaceholderColor3 { get; set; }
		public string PlaceholderText { get; set; }
		public bool RichText { get; set; }
		public int SelectionStart { get; set; }
		public bool ShowNativeInput { get; set; }
		public string Text { get; set; }
		public Vector2 TextBounds { get; set; }
		public BrickColor TextColor { get; set; }
		public Color3 TextColor3 { get; set; }
		public Enum.TextDirection TextDirection { get; set; }
		public bool TextEditable { get; set; }
		public bool TextFits { get; set; }
		public bool TextScaled { get; set; }
		public float TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public float TextStrokeTransparency { get; set; }
		public float TextTransparency { get; set; }
		public Enum.TextTruncate TextTruncate { get; set; }
		public bool TextWrap { get; set; }
		public bool TextWrapped { get; set; }
		public Enum.TextXAlignment TextXAlignment { get; set; }
		public Enum.TextYAlignment TextYAlignment { get; set; }
		public void CaptureFocus();
		public bool IsFocused();
		public void ReleaseFocus(bool? submitted);
		public ScriptSignal<bool, InputObject> FocusLost { get; }
		public ScriptSignal Focused { get; }
		public ScriptSignal ReturnPressedFromOnScreenKeyboard { get; }
	}
	
	public interface VideoFrame : GuiObject
	{
		public bool IsLoaded { get; set; }
		public bool Looped { get; set; }
		public bool Playing { get; set; }
		public bool PlayingReplicating { get; set; }
		public Vector2 Resolution { get; set; }
		public double TimeLength { get; set; }
		public double TimePosition { get; set; }
		public double TimePositionReplicating { get; set; }
		public string Video { get; set; }
		public float Volume { get; set; }
		public void Pause();
		public void Play();
		public ScriptSignal<string> DidLoop { get; }
		public ScriptSignal<string> Ended { get; }
		public ScriptSignal<string> Loaded { get; }
		public ScriptSignal<string> Paused { get; }
		public ScriptSignal<string> Played { get; }
	}
	
	public interface ViewportFrame : GuiObject
	{
		public Color3 Ambient { get; set; }
		public CFrame CameraCFrame { get; set; }
		public float CameraFieldOfView { get; set; }
		public Camera? CurrentCamera { get; set; }
		public Color3 ImageColor3 { get; set; }
		public float ImageTransparency { get; set; }
		public Color3 LightColor { get; set; }
		public Vector3 LightDirection { get; set; }
	}
	
	public interface LayerCollector : GuiBase2d
	{
		public bool Enabled { get; set; }
		public bool ResetOnSpawn { get; set; }
		public Enum.ZIndexBehavior ZIndexBehavior { get; set; }
		public object GetLayoutNodeTree();
	}
	
	public interface BillboardGui : LayerCollector
	{
		public bool Active { get; set; }
		public Instance? Adornee { get; set; }
		public bool AlwaysOnTop { get; set; }
		public float Brightness { get; set; }
		public bool ClipsDescendants { get; set; }
		public float CurrentDistance { get; set; }
		public float DistanceLowerLimit { get; set; }
		public float DistanceStep { get; set; }
		public float DistanceUpperLimit { get; set; }
		public Vector3 ExtentsOffset { get; set; }
		public Vector3 ExtentsOffsetWorldSpace { get; set; }
		public float LightInfluence { get; set; }
		public float MaxDistance { get; set; }
		public Instance? PlayerToHideFrom { get; set; }
		public UDim2 Size { get; set; }
		public Vector2 SizeOffset { get; set; }
		public Vector3 StudsOffset { get; set; }
		public Vector3 StudsOffsetWorldSpace { get; set; }
	}
	
	public interface ScreenGui : LayerCollector
	{
		public bool ClipToDeviceSafeArea { get; set; }
		public int DisplayOrder { get; set; }
		public bool IgnoreGuiInset { get; set; }
		public Enum.SafeAreaCompatibility SafeAreaCompatibility { get; set; }
		public Enum.ScreenInsets ScreenInsets { get; set; }
	}
	
	public interface SurfaceGuiBase : LayerCollector
	{
		public bool Active { get; set; }
		public Instance? Adornee { get; set; }
		public Enum.NormalId Face { get; set; }
	}
	
	public interface AdGui : SurfaceGuiBase
	{
		public Enum.AdShape AdShape { get; set; }
		public bool EnableVideoAds { get; set; }
		public string FallbackImage { get; set; }
		public Enum.AdUnitStatus Status { get; set; }
	}
	
	public interface SurfaceGui : SurfaceGuiBase
	{
		public bool AlwaysOnTop { get; set; }
		public float Brightness { get; set; }
		public Vector2 CanvasSize { get; set; }
		public bool ClipsDescendants { get; set; }
		public float LightInfluence { get; set; }
		public float MaxDistance { get; set; }
		public float PixelsPerStud { get; set; }
		public Enum.SurfaceGuiSizingMode SizingMode { get; set; }
		public float ToolPunchThroughDistance { get; set; }
		public float ZOffset { get; set; }
	}
	
	public interface GuiBase3d : GuiBase
	{
		public BrickColor Color { get; set; }
		public Color3 Color3 { get; set; }
		public float Transparency { get; set; }
		public bool Visible { get; set; }
	}
	
	public interface FloorWire : GuiBase3d
	{
		public float CycleOffset { get; set; }
		public BasePart? From { get; set; }
		public float StudsBetweenTextures { get; set; }
		public string Texture { get; set; }
		public Vector2 TextureSize { get; set; }
		public BasePart? To { get; set; }
		public float Velocity { get; set; }
		public float WireRadius { get; set; }
	}
	
	public interface InstanceAdornment : GuiBase3d
	{
		public Instance? Adornee { get; set; }
	}
	
	public interface SelectionBox : InstanceAdornment
	{
		public float LineThickness { get; set; }
		public BrickColor SurfaceColor { get; set; }
		public Color3 SurfaceColor3 { get; set; }
		public float SurfaceTransparency { get; set; }
	}
	
	public interface PVAdornment : GuiBase3d
	{
		public PVInstance? Adornee { get; set; }
	}
	
	public interface HandleAdornment : PVAdornment
	{
		public Enum.AdornCullingMode AdornCullingMode { get; set; }
		public bool AlwaysOnTop { get; set; }
		public CFrame CFrame { get; set; }
		public Vector3 SizeRelativeOffset { get; set; }
		public int ZIndex { get; set; }
		public ScriptSignal MouseButton1Down { get; }
		public ScriptSignal MouseButton1Up { get; }
		public ScriptSignal MouseEnter { get; }
		public ScriptSignal MouseLeave { get; }
	}
	
	public interface BoxHandleAdornment : HandleAdornment
	{
		public Vector3 Size { get; set; }
	}
	
	public interface ConeHandleAdornment : HandleAdornment
	{
		public float Height { get; set; }
		public float Radius { get; set; }
	}
	
	public interface CylinderHandleAdornment : HandleAdornment
	{
		public float Angle { get; set; }
		public float Height { get; set; }
		public float InnerRadius { get; set; }
		public float Radius { get; set; }
	}
	
	public interface ImageHandleAdornment : HandleAdornment
	{
		public string Image { get; set; }
		public Vector2 Size { get; set; }
	}
	
	public interface LineHandleAdornment : HandleAdornment
	{
		public float Length { get; set; }
		public float Thickness { get; set; }
	}
	
	public interface SphereHandleAdornment : HandleAdornment
	{
		public float Radius { get; set; }
	}
	
	public interface WireframeHandleAdornment : HandleAdornment
	{
		public Vector3 Scale { get; set; }
		public void AddLine(Vector3 from, Vector3 to);
		public void AddLines(object[] points);
		public void AddPath(object[] points, bool loop);
		public void AddText(Vector3 point, string text, int? size);
		public void Clear();
	}
	
	public interface ParabolaAdornment : PVAdornment
	{
	}
	
	public interface SelectionSphere : PVAdornment
	{
		public BrickColor SurfaceColor { get; set; }
		public Color3 SurfaceColor3 { get; set; }
		public float SurfaceTransparency { get; set; }
	}
	
	public interface PartAdornment : GuiBase3d
	{
		public BasePart? Adornee { get; set; }
	}
	
	public interface HandlesBase : PartAdornment
	{
	}
	
	public interface ArcHandles : HandlesBase
	{
		public Axes Axes { get; set; }
		public int MouseButton1DownConnectionCount { get; set; }
		public int MouseButton1UpConnectionCount { get; set; }
		public int MouseDragConnectionCount { get; set; }
		public int MouseEnterConnectionCount { get; set; }
		public int MouseLeaveConnectionCount { get; set; }
		public ScriptSignal<Enum.Axis> MouseButton1Down { get; }
		public ScriptSignal<Enum.Axis> MouseButton1Up { get; }
		public ScriptSignal<Enum.Axis, float, float> MouseDrag { get; }
		public ScriptSignal<Enum.Axis> MouseEnter { get; }
		public ScriptSignal<Enum.Axis> MouseLeave { get; }
	}
	
	public interface Handles : HandlesBase
	{
		public Faces Faces { get; set; }
		public int MouseButton1DownConnectionCount { get; set; }
		public int MouseButton1UpConnectionCount { get; set; }
		public int MouseDragConnectionCount { get; set; }
		public int MouseEnterConnectionCount { get; set; }
		public int MouseLeaveConnectionCount { get; set; }
		public Enum.HandlesStyle Style { get; set; }
		public ScriptSignal<Enum.NormalId> MouseButton1Down { get; }
		public ScriptSignal<Enum.NormalId> MouseButton1Up { get; }
		public ScriptSignal<Enum.NormalId, float> MouseDrag { get; }
		public ScriptSignal<Enum.NormalId> MouseEnter { get; }
		public ScriptSignal<Enum.NormalId> MouseLeave { get; }
	}
	
	public interface SurfaceSelection : PartAdornment
	{
		public Enum.NormalId TargetSurface { get; set; }
	}
	
	public interface SelectionLasso : GuiBase3d
	{
		public Humanoid? Humanoid { get; set; }
	}
	
	public interface SelectionPartLasso : SelectionLasso
	{
		public BasePart? Part { get; set; }
	}
	
	public interface SelectionPointLasso : SelectionLasso
	{
		public Vector3 Point { get; set; }
	}
	
	public interface Path2D : GuiBase
	{
		public Color3 Color3 { get; set; }
		public float Thickness { get; set; }
		public bool Visible { get; set; }
		public int ZIndex { get; set; }
		public Rect GetBoundingRect();
		public Path2DControlPoint GetControlPoint(int index);
		public object[] GetControlPoints();
		public UDim2 GetPositionOnCurve(float t);
		public UDim2 GetPositionOnCurveArcLength(float t);
		public Vector2 GetTangentOnCurve(float t);
		public Vector2 GetTangentOnCurveArcLength(float t);
		public void InsertControlPoint(int index, Path2DControlPoint point);
		public void RemoveControlPoint(int index);
		public void SetControlPoints(object[] controlPoints);
		public void UpdateControlPoint(int index, Path2DControlPoint point);
	}
	
	public interface GuiService : Instance
	{
		public bool AutoSelectGuiEnabled { get; set; }
		public bool CoreGuiNavigationEnabled { get; set; }
		public bool GuiNavigationEnabled { get; set; }
		public bool IsModalDialog { get; set; }
		public bool IsWindows { get; set; }
		public bool MenuIsOpen { get; set; }
		public float PreferredTransparency { get; set; }
		public bool ReducedMotionEnabled { get; set; }
		public GuiObject? SelectedObject { get; set; }
		public Rect TopbarInset { get; set; }
		public bool TouchControlsEnabled { get; set; }
		public void AddSelectionParent(string selectionName, Instance? selectionParent);
		public void AddSelectionTuple(string selectionName, object[] selections);
		public void CloseInspectMenu();
		public bool GetEmotesMenuOpen();
		public bool GetGameplayPausedNotificationEnabled();
		public object[] GetGuiInset();
		public bool GetInspectMenuEnabled();
		public void InspectPlayerFromHumanoidDescription(Instance? humanoidDescription, string name);
		public void InspectPlayerFromUserId(long userId);
		public bool IsTenFootInterface();
		public void RemoveSelectionGroup(string selectionName);
		public void Select(Instance? selectionParent);
		public void SetEmotesMenuOpen(bool isOpen);
		public void SetGameplayPausedNotificationEnabled(bool enabled);
		public void SetInspectMenuEnabled(bool enabled);
		public ScriptSignal MenuClosed { get; }
		public ScriptSignal MenuOpened { get; }
	}
	
	public interface HapticService : Instance
	{
		public object[] GetMotor(Enum.UserInputType inputType, Enum.VibrationMotor vibrationMotor);
		public bool IsMotorSupported(Enum.UserInputType inputType, Enum.VibrationMotor vibrationMotor);
		public bool IsVibrationSupported(Enum.UserInputType inputType);
		public void SetMotor(Enum.UserInputType inputType, Enum.VibrationMotor vibrationMotor, object[] vibrationValues);
	}
	
	public interface HeightmapImporterService : Instance
	{
	}
	
	public interface HiddenSurfaceRemovalAsset : Instance
	{
	}
	
	public interface Highlight : Instance
	{
		public Instance? Adornee { get; set; }
		public Enum.HighlightDepthMode DepthMode { get; set; }
		public bool Enabled { get; set; }
		public Color3 FillColor { get; set; }
		public float FillTransparency { get; set; }
		public Color3 OutlineColor { get; set; }
		public float OutlineTransparency { get; set; }
	}
	
	public interface HttpService : Instance
	{
		public bool HttpEnabled { get; }
		public string GenerateGUID(bool? wrapInCurlyBraces);
		public Secret GetSecret(string key);
		public object? JSONDecode(string input);
		public string JSONEncode(object? input);
		public string UrlEncode(string input);
		public string GetAsync(object? url, bool? nocache, object? headers);
		public string PostAsync(object? url, string data, Enum.HttpContentType? content_type, bool? compress, object? headers);
		public object RequestAsync(object requestOptions);
	}
	
	public interface Humanoid : Instance
	{
		public bool AutoJumpEnabled { get; set; }
		public bool AutoRotate { get; set; }
		public bool AutomaticScalingEnabled { get; set; }
		public bool BreakJointsOnDeath { get; set; }
		public float CameraMaxDistance { get; set; }
		public float CameraMinDistance { get; set; }
		public Enum.CameraMode CameraMode { get; set; }
		public Vector3 CameraOffset { get; set; }
		public Enum.HumanoidCollisionType CollisionType { get; set; }
		public Enum.HumanoidDisplayDistanceType DisplayDistanceType { get; set; }
		public string DisplayName { get; set; }
		public bool EvaluateStateMachine { get; set; }
		public Enum.Material FloorMaterial { get; set; }
		public float Health { get; set; }
		public float HealthDisplayDistance { get; set; }
		public Enum.HumanoidHealthDisplayType HealthDisplayType { get; set; }
		public float Health_XML { get; set; }
		public float HipHeight { get; set; }
		public Vector3 InternalBodyScale { get; set; }
		public float InternalHeadScale { get; set; }
		public float InternalOriginalHipHeight { get; set; }
		public bool Jump { get; set; }
		public float JumpHeight { get; set; }
		public float JumpPower { get; set; }
		public bool JumpReplicate { get; set; }
		public BasePart? LeftLeg { get; set; }
		public float MaxHealth { get; set; }
		public float MaxSlopeAngle { get; set; }
		public Vector3 MoveDirection { get; set; }
		public Vector3 MoveDirectionInternal { get; set; }
		public float NameDisplayDistance { get; set; }
		public Enum.NameOcclusion NameOcclusion { get; set; }
		public Enum.HumanoidStateType NetworkHumanoidState { get; set; }
		public bool PlatformStand { get; set; }
		public bool RequiresNeck { get; set; }
		public Enum.HumanoidRigType RigType { get; set; }
		public BasePart? RightLeg { get; set; }
		public BasePart? RootPart { get; set; }
		public BasePart? SeatPart { get; set; }
		public bool Sit { get; set; }
		public bool Strafe { get; set; }
		public Vector3 TargetPoint { get; set; }
		public BasePart? Torso { get; set; }
		public bool UseJumpPower { get; set; }
		public float WalkAngleError { get; set; }
		public Vector3 WalkDirection { get; set; }
		public float WalkSpeed { get; set; }
		public BasePart? WalkToPart { get; set; }
		public Vector3 WalkToPoint { get; set; }
		public float maxHealth { get; set; }
		public void AddAccessory(Instance? accessory);
		public bool AddCustomStatus(string status);
		public bool AddStatus(Enum.Status? status);
		public void BuildRigFromAttachments();
		public void ChangeState(Enum.HumanoidStateType? state);
		public void EquipTool(Instance? tool);
		public object[] GetAccessories();
		public HumanoidDescription GetAppliedDescription();
		public Enum.BodyPartR15 GetBodyPartR15(Instance? part);
		public Enum.Limb GetLimb(Instance? part);
		public Vector3 GetMoveVelocity();
		public object[] GetPlayingAnimationTracks();
		public Enum.HumanoidStateType GetState();
		public bool GetStateEnabled(Enum.HumanoidStateType state);
		public object[] GetStatuses();
		public bool HasCustomStatus(string status);
		public bool HasStatus(Enum.Status? status);
		public AnimationTrack LoadAnimation(Animation animation);
		public void Move(Vector3 moveDirection, bool? relativeToCamera);
		public void MoveTo(Vector3 location, Instance? part);
		public void RemoveAccessories();
		public bool RemoveCustomStatus(string status);
		public bool RemoveStatus(Enum.Status? status);
		public bool ReplaceBodyPartR15(Enum.BodyPartR15 bodyPart, BasePart part);
		public void SetStateEnabled(Enum.HumanoidStateType state, bool enabled);
		public void TakeDamage(float amount);
		public void UnequipTools();
		public AnimationTrack loadAnimation(Animation animation);
		public void takeDamage(float amount);
		public void ApplyDescription(HumanoidDescription humanoidDescription, Enum.AssetTypeVerification? assetTypeVerification);
		public void ApplyDescriptionReset(HumanoidDescription humanoidDescription, Enum.AssetTypeVerification? assetTypeVerification);
		public bool PlayEmote(string emoteName);
		public ScriptSignal<AnimationTrack> AnimationPlayed { get; }
		public ScriptSignal<HumanoidDescription> ApplyDescriptionFinished { get; }
		public ScriptSignal<float> Climbing { get; }
		public ScriptSignal<string> CustomStatusAdded { get; }
		public ScriptSignal<string> CustomStatusRemoved { get; }
		public ScriptSignal Died { get; }
		public ScriptSignal<bool> FallingDown { get; }
		public ScriptSignal<bool> FreeFalling { get; }
		public ScriptSignal<bool> GettingUp { get; }
		public ScriptSignal<float> HealthChanged { get; }
		public ScriptSignal<bool> Jumping { get; }
		public ScriptSignal<bool> MoveToFinished { get; }
		public ScriptSignal<bool> PlatformStanding { get; }
		public ScriptSignal<bool> Ragdoll { get; }
		public ScriptSignal<float> Running { get; }
		public ScriptSignal<bool, BasePart> Seated { get; }
		public ScriptSignal<Enum.HumanoidStateType, Enum.HumanoidStateType> StateChanged { get; }
		public ScriptSignal<Enum.HumanoidStateType, bool> StateEnabledChanged { get; }
		public ScriptSignal<Enum.Status> StatusAdded { get; }
		public ScriptSignal<Enum.Status> StatusRemoved { get; }
		public ScriptSignal<bool> Strafing { get; }
		public ScriptSignal<float> Swimming { get; }
		public ScriptSignal<BasePart, BasePart> Touched { get; }
	}
	
	public interface HumanoidDescription : Instance
	{
		public string AccessoryBlob { get; set; }
		public string BackAccessory { get; set; }
		public float BodyTypeScale { get; set; }
		public long ClimbAnimation { get; set; }
		public float DepthScale { get; set; }
		public string EmotesDataInternal { get; set; }
		public string EquippedEmotesDataInternal { get; set; }
		public long Face { get; set; }
		public string FaceAccessory { get; set; }
		public long FallAnimation { get; set; }
		public string FrontAccessory { get; set; }
		public long GraphicTShirt { get; set; }
		public string HairAccessory { get; set; }
		public string HatAccessory { get; set; }
		public long Head { get; set; }
		public Color3 HeadColor { get; set; }
		public float HeadScale { get; set; }
		public float HeightScale { get; set; }
		public long IdleAnimation { get; set; }
		public long JumpAnimation { get; set; }
		public long LeftArm { get; set; }
		public Color3 LeftArmColor { get; set; }
		public long LeftLeg { get; set; }
		public Color3 LeftLegColor { get; set; }
		public long MoodAnimation { get; set; }
		public string NeckAccessory { get; set; }
		public long Pants { get; set; }
		public float ProportionScale { get; set; }
		public long RightArm { get; set; }
		public Color3 RightArmColor { get; set; }
		public long RightLeg { get; set; }
		public Color3 RightLegColor { get; set; }
		public long RunAnimation { get; set; }
		public long Shirt { get; set; }
		public string ShouldersAccessory { get; set; }
		public long SwimAnimation { get; set; }
		public long Torso { get; set; }
		public Color3 TorsoColor { get; set; }
		public string WaistAccessory { get; set; }
		public long WalkAnimation { get; set; }
		public float WidthScale { get; set; }
		public void AddEmote(string name, long assetId);
		public object[] GetAccessories(bool includeRigidAccessories);
		public object GetEmotes();
		public object[] GetEquippedEmotes();
		public void RemoveEmote(string name);
		public void SetAccessories(object[] accessories, bool includeRigidAccessories);
		public void SetEmotes(object emotes);
		public void SetEquippedEmotes(object[] equippedEmotes);
		public ScriptSignal<object> EmotesChanged { get; }
		public ScriptSignal<object[]> EquippedEmotesChanged { get; }
	}
	
	public interface IKControl : Instance
	{
		public Instance? ChainRoot { get; set; }
		public bool Enabled { get; set; }
		public Instance? EndEffector { get; set; }
		public CFrame EndEffectorOffset { get; set; }
		public CFrame Offset { get; set; }
		public Instance? Pole { get; set; }
		public int Priority { get; set; }
		public float SmoothTime { get; set; }
		public Instance? Target { get; set; }
		public Enum.IKControlType Type { get; set; }
		public float Weight { get; set; }
		public int GetChainCount();
		public float GetChainLength();
		public CFrame GetNodeLocalCFrame(int index);
		public CFrame GetNodeWorldCFrame(int index);
		public CFrame GetRawFinalTarget();
		public CFrame GetSmoothedFinalTarget();
	}
	
	public interface ILegacyStudioBridge : Instance
	{
	}
	
	public interface LegacyStudioBridge : ILegacyStudioBridge
	{
	}
	
	public interface IXPService : Instance
	{
	}
	
	public interface IncrementalPatchBuilder : Instance
	{
		public bool AddPathsToBundle { get; set; }
		public double BuildDebouncePeriod { get; set; }
		public bool HighCompression { get; set; }
		public bool SerializePatch { get; set; }
		public bool ZstdCompression { get; set; }
	}
	
	public interface InputObject : Instance
	{
		public Vector3 Delta { get; set; }
		public Enum.KeyCode KeyCode { get; set; }
		public Vector3 Position { get; set; }
		public Enum.UserInputState UserInputState { get; set; }
		public Enum.UserInputType UserInputType { get; set; }
		public bool IsModifierKeyDown(Enum.ModifierKey modifierKey);
	}
	
	public interface InsertService : Instance
	{
		public bool AllowClientInsertModels { get; set; }
		public bool AllowInsertFreeModels { get; set; }
		public void ApproveAssetId(long assetId);
		public void ApproveAssetVersionId(long assetVersionId);
		public void Insert(Instance? instance);
		public MeshPart CreateMeshPartAsync(string meshId, Enum.CollisionFidelity collisionFidelity, Enum.RenderFidelity renderFidelity);
		public object[] GetBaseCategories();
		public object[] GetBaseSets();
		public object[] GetCollection(long categoryId);
		public object[] GetFreeDecals(string searchText, int pageNum);
		public object[] GetFreeModels(string searchText, int pageNum);
		public long GetLatestAssetVersionAsync(long assetId);
		public object[] GetUserCategories(long userId);
		public object[] GetUserSets(long userId);
		public Instance? LoadAsset(long assetId);
		public Instance? LoadAssetVersion(long assetVersionId);
		public Instance? loadAsset(long assetId);
		public ScriptSignal<Instance?> InternalDelete { get; }
	}
	
	public interface InternalSyncItem : Instance
	{
	}
	
	public interface InternalSyncService : Instance
	{
	}
	
	public interface JointInstance : Instance
	{
		public bool Active { get; set; }
		public CFrame C0 { get; set; }
		public CFrame C1 { get; set; }
		public bool Enabled { get; set; }
		public BasePart? Part0 { get; set; }
		public BasePart? Part1 { get; set; }
		public BasePart? part1 { get; set; }
	}
	
	public interface DynamicRotate : JointInstance
	{
		public float BaseAngle { get; set; }
	}
	
	public interface RotateP : DynamicRotate
	{
	}
	
	public interface RotateV : DynamicRotate
	{
	}
	
	public interface Glue : JointInstance
	{
		public Vector3 F0 { get; set; }
		public Vector3 F1 { get; set; }
		public Vector3 F2 { get; set; }
		public Vector3 F3 { get; set; }
	}
	
	public interface ManualSurfaceJointInstance : JointInstance
	{
	}
	
	public interface ManualGlue : ManualSurfaceJointInstance
	{
	}
	
	public interface ManualWeld : ManualSurfaceJointInstance
	{
	}
	
	public interface Motor : JointInstance
	{
		public float CurrentAngle { get; set; }
		public float DesiredAngle { get; set; }
		public float MaxVelocity { get; set; }
		public void SetDesiredAngle(float value);
	}
	
	public interface Motor6D : Motor
	{
		public string ChildName { get; set; }
		public string ParentName { get; set; }
		public CFrame Transform { get; set; }
	}
	
	public interface Rotate : JointInstance
	{
	}
	
	public interface Snap : JointInstance
	{
	}
	
	public interface VelocityMotor : JointInstance
	{
		public float CurrentAngle { get; set; }
		public float DesiredAngle { get; set; }
		public Hole? Hole { get; set; }
		public float MaxVelocity { get; set; }
	}
	
	public interface Weld : JointInstance
	{
	}
	
	public interface JointsService : Instance
	{
		public void ClearJoinAfterMoveJoints();
		public void CreateJoinAfterMoveJoints();
		public void SetJoinAfterMoveInstance(Instance? joinInstance);
		public void SetJoinAfterMoveTarget(Instance? joinTarget);
		public void ShowPermissibleJoints();
	}
	
	public interface Keyframe : Instance
	{
		public float Time { get; set; }
		public void AddMarker(Instance? marker);
		public void AddPose(Instance? pose);
		public Instance[] GetMarkers();
		public Instance[] GetPoses();
		public void RemoveMarker(Instance? marker);
		public void RemovePose(Instance? pose);
	}
	
	public interface KeyframeMarker : Instance
	{
		public string Value { get; set; }
	}
	
	public partial interface KeyframeSequenceProvider : Instance
	{
		public string RegisterActiveKeyframeSequence(Instance? keyframeSequence);
		public string RegisterKeyframeSequence(Instance? keyframeSequence);
		public Instance? GetAnimations(long userId);
		public Instance? GetKeyframeSequenceAsync(string assetId);
	}
	
	public interface LSPFileSyncService : Instance
	{
	}
	
	public interface LanguageService : Instance
	{
	}
	
	public interface Light : Instance
	{
		public float Brightness { get; set; }
		public Color3 Color { get; set; }
		public bool Enabled { get; set; }
		public bool Shadows { get; set; }
	}
	
	public interface PointLight : Light
	{
		public float Range { get; set; }
	}
	
	public interface SpotLight : Light
	{
		public float Angle { get; set; }
		public Enum.NormalId Face { get; set; }
		public float Range { get; set; }
	}
	
	public interface SurfaceLight : Light
	{
		public float Angle { get; set; }
		public Enum.NormalId Face { get; set; }
		public float Range { get; set; }
	}
	
	public interface Lighting : Instance
	{
		public Color3 Ambient { get; set; }
		public float Brightness { get; set; }
		public float ClockTime { get; set; }
		public Color3 ColorShift_Bottom { get; set; }
		public Color3 ColorShift_Top { get; set; }
		public float EnvironmentDiffuseScale { get; set; }
		public float EnvironmentSpecularScale { get; set; }
		public float ExposureCompensation { get; set; }
		public Color3 FogColor { get; set; }
		public float FogEnd { get; set; }
		public float FogStart { get; set; }
		public float GeographicLatitude { get; set; }
		public bool GlobalShadows { get; set; }
		public Color3 OutdoorAmbient { get; set; }
		public bool Outlines { get; set; }
		public Color3 ShadowColor { get; set; }
		public float ShadowSoftness { get; set; }
		public string TimeOfDay { get; set; }
		public double GetMinutesAfterMidnight();
		public Vector3 GetMoonDirection();
		public float GetMoonPhase();
		public Vector3 GetSunDirection();
		public void SetMinutesAfterMidnight(double minutes);
		public double getMinutesAfterMidnight();
		public void setMinutesAfterMidnight(double minutes);
		public ScriptSignal<bool> LightingChanged { get; }
	}
	
	public interface LinkingService : Instance
	{
	}
	
	public interface LiveScriptingService : Instance
	{
		public Enum.ServerLiveEditingMode ServerLiveEditingMode { get; set; }
	}
	
	public interface LocalizationService : Instance
	{
		public string GameSourceLanguageId { get; set; }
		public string LocaleManifest { get; set; }
		public string RobloxLocaleId { get; set; }
		public string SystemLocaleId { get; set; }
		public Instance[] GetCorescriptLocalizations();
		public object[] GetTableEntries(Instance? instance);
		public Instance? GetTranslatorForPlayer(Instance? player);
		public string GetCountryRegionForPlayerAsync(Instance? player);
		public Instance? GetTranslatorForLocaleAsync(string locale);
		public Instance? GetTranslatorForPlayerAsync(Instance? player);
	}
	
	public interface LocalizationTable : Instance
	{
		public string Contents { get; set; }
		public string DevelopmentLanguage { get; set; }
		public bool IsExemptFromUGCAnalytics { get; set; }
		public Instance? Root { get; set; }
		public string SourceLocaleId { get; set; }
		public string GetContents();
		public object[] GetEntries();
		public string GetString(string targetLocaleId, string key);
		public Instance? GetTranslator(string localeId);
		public void RemoveEntry(string key, string source, string context);
		public void RemoveEntryValue(string key, string source, string context, string localeId);
		public void RemoveKey(string key);
		public void RemoveTargetLocale(string localeId);
		public void SetContents(string contents);
		public void SetEntries(object? entries);
		public void SetEntry(string key, string targetLocaleId, string text);
		public void SetEntryContext(string key, string source, string context, string newContext);
		public void SetEntryExample(string key, string source, string context, string example);
		public void SetEntryKey(string key, string source, string context, string newKey);
		public void SetEntrySource(string key, string source, string context, string newSource);
		public void SetEntryValue(string key, string source, string context, string localeId, string text);
	}
	
	public interface CloudLocalizationTable : LocalizationTable
	{
	}
	
	public interface LodDataEntity : Instance
	{
		public SharedString EntityData { get; set; }
		public bool EntityLodEnabled { get; set; }
		public CFrame EntityPosition { get; set; }
		public Vector3 EntityScale { get; set; }
		public Instance? EntitySource { get; set; }
	}
	
	public interface LodDataService : Instance
	{
	}
	
	public interface LogReporterService : Instance
	{
	}
	
	public interface LogService : Instance
	{
		public void ClearOutput();
		public object[] GetLogHistory();
		public ScriptSignal<string, Enum.MessageType> MessageOut { get; }
	}
	
	public interface LuaSourceContainer : Instance
	{
		public string CachedRemoteSource { get; set; }
		public int CachedRemoteSourceLoadState { get; set; }
		public string ScriptGuid { get; set; }
	}
	
	public interface BaseScript : LuaSourceContainer
	{
		public bool Disabled { get; set; }
		public bool Enabled { get; set; }
		public string LinkedSource { get; set; }
		public Enum.RunContext RunContext { get; set; }
	}
	
	public interface Script : BaseScript
	{
	}
	
	public interface LocalScript : Script
	{
	}
	
	public interface ModuleScript : LuaSourceContainer
	{
		public string LinkedSource { get; set; }
	}
	
	public interface LuauScriptAnalyzerService : Instance
	{
	}
	
	public interface MarkerCurve : Instance
	{
		public int Length { get; set; }
		public string ValuesAndTimes { get; set; }
		public object GetMarkerAtIndex(int index);
		public object[] GetMarkers();
		public object[] InsertMarkerAtTime(float time, string marker);
		public int RemoveMarkerAtIndex(int startingIndex, int? count);
	}
	
	public interface MarketplaceService : Instance
	{
		public void PromptBulkPurchase(Player player, object[] lineItems, object options);
		public void PromptBundlePurchase(Instance? player, long bundleId);
		public void PromptGamePassPurchase(Instance? player, long gamePassId);
		public void PromptPremiumPurchase(Instance? player);
		public void PromptProductPurchase(Instance? player, long productId, bool? equipIfPurchased, Enum.CurrencyType? currencyType);
		public void PromptPurchase(Instance? player, long assetId, bool? equipIfPurchased, Enum.CurrencyType? currencyType);
		public void PromptSubscriptionPurchase(Player user, string subscriptionId);
		public Instance? GetDeveloperProductsAsync();
		public object GetProductInfo(long assetId, Enum.InfoType? infoType);
		public object GetSubscriptionProductInfoAsync(string subscriptionId);
		public object GetUserSubscriptionDetailsAsync(Player user, string subscriptionId);
		public object[] GetUserSubscriptionPaymentHistoryAsync(Player user, string subscriptionId);
		public object GetUserSubscriptionStatusAsync(Player user, string subscriptionId);
		public bool PlayerOwnsAsset(Instance? player, long assetId);
		public bool PlayerOwnsBundle(Player player, long bundleId);
		public bool UserOwnsGamePassAsync(long userId, long gamePassId);
		public ScriptSignal<Instance?, Enum.MarketplaceBulkPurchasePromptStatus, object> PromptBulkPurchaseFinished { get; }
		public ScriptSignal<Instance?, long, bool> PromptBundlePurchaseFinished { get; }
		public ScriptSignal<Instance?, long, bool> PromptGamePassPurchaseFinished { get; }
		public ScriptSignal PromptPremiumPurchaseFinished { get; }
		public ScriptSignal<long, long, bool> PromptProductPurchaseFinished { get; }
		public ScriptSignal<Instance?, long, bool> PromptPurchaseFinished { get; }
		public ScriptSignal<Player, string, bool> PromptSubscriptionPurchaseFinished { get; }
	}
	
	public interface MaterialGenerationService : Instance
	{
	}
	
	public interface MaterialGenerationSession : Instance
	{
	}
	
	public interface MaterialService : Instance
	{
		public bool Use2022MaterialsXml { get; set; }
		public string GetBaseMaterialOverride(Enum.Material material);
		public MaterialVariant GetMaterialVariant(Enum.Material material, string name);
		public void SetBaseMaterialOverride(Enum.Material material, string name);
	}
	
	public interface MaterialVariant : Instance
	{
		public int AvgMetalness { get; set; }
		public int AvgRoughness { get; set; }
		public Enum.Material BaseMaterial { get; set; }
		public PhysicalProperties CustomPhysicalProperties { get; set; }
		public Enum.MaterialPattern MaterialPattern { get; set; }
		public float StudsPerTile { get; set; }
		public string TexturePack { get; set; }
	}
	
	public interface MemoryStoreHashMap : Instance
	{
		public object? GetAsync(string key);
		public MemoryStoreHashMapPages ListItemsAsync(int count);
		public void RemoveAsync(string key);
		public bool SetAsync(string key, object? value, long expiration);
		public object? UpdateAsync(string key, Action transformFunction, long expiration);
	}
	
	public interface MemoryStoreQueue : Instance
	{
		public void AddAsync(object? value, long expiration, double? priority);
		public object[] ReadAsync(int count, bool? allOrNothing, double? waitTimeout);
		public void RemoveAsync(string id);
	}
	
	public interface MemoryStoreService : Instance
	{
		public MemoryStoreHashMap GetHashMap(string name);
		public MemoryStoreQueue GetQueue(string name, int? invisibilityTimeout);
		public MemoryStoreSortedMap GetSortedMap(string name);
	}
	
	public interface MemoryStoreSortedMap : Instance
	{
		public object[] GetAsync(string key);
		public object[] GetRangeAsync(Enum.SortDirection direction, int count, object? exclusiveLowerBound, object? exclusiveUpperBound);
		public void RemoveAsync(string key);
		public bool SetAsync(string key, object? value, long expiration, object? sortKey);
		public object[] UpdateAsync(string key, Action transformFunction, long expiration);
	}
	
	public interface MessageBusConnection : Instance
	{
	}
	
	public interface MessageBusService : Instance
	{
	}
	
	public interface MessagingService : Instance
	{
		public void PublishAsync(string topic, object? message);
		public RBXScriptConnection SubscribeAsync(string topic, Action callback);
	}
	
	public interface MetaBreakpoint : Instance
	{
	}
	
	public interface MetaBreakpointContext : Instance
	{
		public string ContextDataInternal { get; set; }
	}
	
	public interface MetaBreakpointManager : Instance
	{
	}
	
	public interface Mouse : Instance
	{
		public CFrame Hit { get; set; }
		public string Icon { get; set; }
		public CFrame Origin { get; set; }
		public BasePart? Target { get; set; }
		public Instance? TargetFilter { get; set; }
		public Enum.NormalId TargetSurface { get; set; }
		public Ray UnitRay { get; set; }
		public int ViewSizeX { get; set; }
		public int ViewSizeY { get; set; }
		public int X { get; set; }
		public int Y { get; set; }
		public CFrame hit { get; set; }
		public BasePart? target { get; set; }
		public ScriptSignal Button1Down { get; }
		public ScriptSignal Button1Up { get; }
		public ScriptSignal Button2Down { get; }
		public ScriptSignal Button2Up { get; }
		public ScriptSignal Idle { get; }
		public ScriptSignal<string> KeyDown { get; }
		public ScriptSignal<string> KeyUp { get; }
		public ScriptSignal Move { get; }
		public ScriptSignal WheelBackward { get; }
		public ScriptSignal WheelForward { get; }
		public ScriptSignal<string> keyDown { get; }
	}
	
	public interface PlayerMouse : Mouse
	{
	}
	
	public interface NetworkMarker : Instance
	{
		public ScriptSignal Received { get; }
	}
	
	public interface NoCollisionConstraint : Instance
	{
		public bool Enabled { get; set; }
		public BasePart? Part0 { get; set; }
		public BasePart? Part1 { get; set; }
	}
	
	public interface Noise : Instance
	{
	}
	
	public interface OmniRecommendationsService : Instance
	{
	}
	
	public interface OpenCloudApiV1 : Instance
	{
		public OpenCloudModel CreateModel(string name);
		public OpenCloudModel CreateUserNotificationAsync(string user, OpenCloudModel userNotification);
	}
	
	public interface OpenCloudService : Instance
	{
		public OpenCloudApiV1 GetApiV1();
		public object InvokeAsync(string version, string methodName, object arguments);
	}
	
	public interface OperationGraph : Instance
	{
	}
	
	public interface PVInstance : Instance
	{
		public CFrame Origin { get; set; }
		public CFrame PivotOffset { get; set; }
		public CFrame GetPivot();
		public void PivotTo(CFrame targetCFrame);
	}
	
	public interface BasePart : PVInstance
	{
		public bool Anchored { get; set; }
		public Vector3 AssemblyAngularVelocity { get; set; }
		public Vector3 AssemblyCenterOfMass { get; set; }
		public Vector3 AssemblyLinearVelocity { get; set; }
		public float AssemblyMass { get; set; }
		public BasePart? AssemblyRootPart { get; set; }
		public float BackParamA { get; set; }
		public float BackParamB { get; set; }
		public Enum.SurfaceType BackSurface { get; set; }
		public Enum.InputType BackSurfaceInput { get; set; }
		public float BottomParamA { get; set; }
		public float BottomParamB { get; set; }
		public Enum.SurfaceType BottomSurface { get; set; }
		public Enum.InputType BottomSurfaceInput { get; set; }
		public BrickColor BrickColor { get; set; }
		public CFrame CFrame { get; set; }
		public bool CanCollide { get; set; }
		public bool CanQuery { get; set; }
		public bool CanTouch { get; set; }
		public bool CastShadow { get; set; }
		public Vector3 CenterOfMass { get; set; }
		public string CollisionGroup { get; set; }
		public int CollisionGroupId { get; set; }
		public Color3 Color { get; set; }
		public Color3uint8 Color3uint8 { get; set; }
		public PhysicalProperties CurrentPhysicalProperties { get; set; }
		public PhysicalProperties CustomPhysicalProperties { get; set; }
		public bool DraggingV1 { get; set; }
		public float Elasticity { get; set; }
		public bool EnableFluidForces { get; set; }
		public CFrame ExtentsCFrame { get; set; }
		public Vector3 ExtentsSize { get; set; }
		public float Friction { get; set; }
		public float FrontParamA { get; set; }
		public float FrontParamB { get; set; }
		public Enum.SurfaceType FrontSurface { get; set; }
		public Enum.InputType FrontSurfaceInput { get; set; }
		public float LeftParamA { get; set; }
		public float LeftParamB { get; set; }
		public Enum.SurfaceType LeftSurface { get; set; }
		public Enum.InputType LeftSurfaceInput { get; set; }
		public int LocalSimulationValidation { get; set; }
		public float LocalTransparencyModifier { get; set; }
		public bool Locked { get; set; }
		public float Mass { get; set; }
		public bool Massless { get; set; }
		public Enum.Material Material { get; set; }
		public string MaterialVariant { get; set; }
		public string MaterialVariantSerialized { get; set; }
		public bool NetworkIsSleeping { get; set; }
		public SystemAddress NetworkOwnerV3 { get; set; }
		public Enum.NetworkOwnership NetworkOwnershipRule { get; set; }
		public Vector3 Orientation { get; set; }
		public CFrame PivotOffset { get; set; }
		public Vector3 Position { get; set; }
		public float ReceiveAge { get; set; }
		public float Reflectance { get; set; }
		public int ResizeIncrement { get; set; }
		public Faces ResizeableFaces { get; set; }
		public float RightParamA { get; set; }
		public float RightParamB { get; set; }
		public Enum.SurfaceType RightSurface { get; set; }
		public Enum.InputType RightSurfaceInput { get; set; }
		public int RootPriority { get; set; }
		public Vector3 RotVelocity { get; set; }
		public Vector3 Rotation { get; set; }
		public Vector3 Size { get; set; }
		public float SpecificGravity { get; set; }
		public float TopParamA { get; set; }
		public float TopParamB { get; set; }
		public Enum.SurfaceType TopSurface { get; set; }
		public Enum.InputType TopSurfaceInput { get; set; }
		public float Transparency { get; set; }
		public Vector3 Velocity { get; set; }
		public BrickColor brickColor { get; set; }
		public Vector3 siz { get; set; }
		public Vector3 size { get; set; }
		public Vector3 AngularAccelerationToTorque(Vector3 angAcceleration, Vector3? angVelocity);
		public void ApplyAngularImpulse(Vector3 impulse);
		public void ApplyImpulse(Vector3 impulse);
		public void ApplyImpulseAtPosition(Vector3 impulse, Vector3 position);
		public void BreakJoints();
		public bool CanCollideWith(BasePart part);
		public object[] CanSetNetworkOwnership();
		public Vector3 GetClosestPointOnSurface(Vector3 position);
		public Instance[] GetConnectedParts(bool? recursive);
		public Instance[] GetJoints();
		public float GetMass();
		public Instance? GetNetworkOwner();
		public bool GetNetworkOwnershipAuto();
		public Instance[] GetNoCollisionConstraints();
		public CFrame GetRenderCFrame();
		public Instance? GetRootPart();
		public Instance[] GetTouchingParts();
		public Vector3 GetVelocityAtPosition(Vector3 position);
		public bool IsGrounded();
		public void MakeJoints();
		public bool Resize(Enum.NormalId normalId, int deltaAmount);
		public void SetNetworkOwner(Player? playerInstance);
		public void SetNetworkOwnershipAuto();
		public Vector3 TorqueToAngularAcceleration(Vector3 torque, Vector3? angVelocity);
		public void breakJoints();
		public float getMass();
		public void makeJoints();
		public bool resize(Enum.NormalId normalId, int deltaAmount);
		public Instance? IntersectAsync(Instance[] parts, Enum.CollisionFidelity? collisionfidelity, Enum.RenderFidelity? renderFidelity);
		public Instance? SubtractAsync(Instance[] parts, Enum.CollisionFidelity? collisionfidelity, Enum.RenderFidelity? renderFidelity);
		public Instance? UnionAsync(Instance[] parts, Enum.CollisionFidelity? collisionfidelity, Enum.RenderFidelity? renderFidelity);
		public ScriptSignal<BasePart> LocalSimulationTouched { get; }
		public ScriptSignal OutfitChanged { get; }
		public ScriptSignal<BasePart> StoppedTouching { get; }
		public ScriptSignal<BasePart> TouchEnded { get; }
		public ScriptSignal<BasePart> Touched { get; }
	}
	
	public interface CornerWedgePart : BasePart
	{
	}
	
	public interface FormFactorPart : BasePart
	{
		public Enum.FormFactor FormFactor { get; set; }
		public Enum.FormFactor formFactor { get; set; }
		public Enum.FormFactor formFactorRaw { get; set; }
	}
	
	public interface Part : FormFactorPart
	{
		public Enum.PartType Shape { get; set; }
		public Enum.PartType shap { get; set; }
		public Enum.PartType shape { get; set; }
	}
	
	public interface Platform : Part
	{
		public ScriptSignal<Instance?> RemoteCreateMotor6D { get; }
		public ScriptSignal RemoteDestroyMotor6D { get; }
	}
	
	public interface Seat : Part
	{
		public bool Disabled { get; set; }
		public Humanoid? Occupant { get; set; }
		public void Sit(Instance? humanoid);
		public ScriptSignal<Instance?> RemoteCreateSeatWeld { get; }
		public ScriptSignal RemoteDestroySeatWeld { get; }
	}
	
	public interface SkateboardPlatform : Part
	{
		public SkateboardController? Controller { get; set; }
		public Humanoid? ControllingHumanoid { get; set; }
		public Enum.MoveState MoveState { get; set; }
		public int Steer { get; set; }
		public bool StickyWheels { get; set; }
		public int Throttle { get; set; }
		public void ApplySpecificImpulse(Vector3 impulseWorld);
		public ScriptSignal<Instance?, Instance?> Equipped { get; }
		public ScriptSignal<Enum.MoveState, Enum.MoveState> MoveStateChanged { get; }
		public ScriptSignal<Instance?> RemoteCreateMotor6D { get; }
		public ScriptSignal RemoteDestroyMotor6D { get; }
		public ScriptSignal<Instance?> Unequipped { get; }
		public ScriptSignal<Instance?, Instance?> equipped { get; }
		public ScriptSignal<Instance?> unequipped { get; }
	}
	
	public interface SpawnLocation : Part
	{
		public bool AllowTeamChangeOnTouch { get; set; }
		public int Duration { get; set; }
		public bool Enabled { get; set; }
		public bool Neutral { get; set; }
		public BrickColor TeamColor { get; set; }
	}
	
	public interface WedgePart : FormFactorPart
	{
	}
	
	public partial interface Terrain : BasePart
	{
		public string ClusterGrid { get; set; }
		public string ClusterGridV2 { get; set; }
		public string ClusterGridV3 { get; set; }
		public bool Decoration { get; set; }
		public float GrassLength { get; set; }
		public bool IsSmooth { get; set; }
		public string MaterialColors { get; set; }
		public Region3int16 MaxExtents { get; set; }
		public string PhysicsGrid { get; set; }
		public string SmoothGrid { get; set; }
		public Color3 WaterColor { get; set; }
		public float WaterReflectance { get; set; }
		public float WaterTransparency { get; set; }
		public float WaterWaveSize { get; set; }
		public float WaterWaveSpeed { get; set; }
		public bool AutowedgeCell(int x, int y, int z);
		public void AutowedgeCells(Region3int16 region);
		public Vector3 CellCenterToWorld(int x, int y, int z);
		public Vector3 CellCornerToWorld(int x, int y, int z);
		public void Clear();
		public TerrainRegion CopyRegion(Region3int16 region);
		public int CountCells();
		public void FillBall(Vector3 center, float radius, Enum.Material material);
		public void FillBlock(CFrame cframe, Vector3 size, Enum.Material material);
		public void FillCylinder(CFrame cframe, float height, float radius, Enum.Material material);
		public void FillRegion(Region3 region, float resolution, Enum.Material material);
		public void FillWedge(CFrame cframe, Vector3 size, Enum.Material material);
		public object[] GetCell(int x, int y, int z);
		public Color3 GetMaterialColor(Enum.Material material);
		public object[] GetWaterCell(int x, int y, int z);
		public void PasteRegion(TerrainRegion region, Vector3int16 corner, bool pasteEmptyCells);
		public object ReadVoxelChannels(Region3 region, float resolution, object[] channelIds);
		public object[] ReadVoxels(Region3 region, float resolution);
		public void ReplaceMaterial(Region3 region, float resolution, Enum.Material sourceMaterial, Enum.Material targetMaterial);
		public void SetCell(int x, int y, int z, Enum.CellMaterial material, Enum.CellBlock block, Enum.CellOrientation orientation);
		public void SetCells(Region3int16 region, Enum.CellMaterial material, Enum.CellBlock block, Enum.CellOrientation orientation);
		public void SetMaterialColor(Enum.Material material, Color3 value);
		public void SetWaterCell(int x, int y, int z, Enum.WaterForce force, Enum.WaterDirection direction);
		public Vector3 WorldToCell(Vector3 position);
		public Vector3 WorldToCellPreferEmpty(Vector3 position);
		public Vector3 WorldToCellPreferSolid(Vector3 position);
		public void WriteVoxelChannels(Region3 region, float resolution, object channels);
		public void WriteVoxels(Region3 region, float resolution, object[] materials, object[] occupancy);
	}
	
	public interface TriangleMeshPart : BasePart
	{
		public Enum.CollisionFidelity CollisionFidelity { get; set; }
		public Enum.FluidFidelity FluidFidelity { get; set; }
		public Vector3 MeshSize { get; set; }
	}
	
	public interface MeshPart : TriangleMeshPart
	{
		public bool DoubleSided { get; set; }
		public bool HasJointOffset { get; }
		public bool HasSkinnedMesh { get; }
		public Vector3 JointOffset { get; }
		public string MeshID { get; set; }
		public string MeshId { get; }
		public Enum.RenderFidelity RenderFidelity { get; set; }
		public Enum.RenderFidelity RenderFidelityReplicate { get; set; }
		public string TextureID { get; set; }
		public void ApplyMesh(Instance? meshPart);
	}
	
	public interface PartOperation : TriangleMeshPart
	{
		public SharedString CSGMesh2KernelMap { get; set; }
		public Enum.RenderFidelity RenderFidelity { get; set; }
		public SharedString SerializedCSGTree { get; set; }
		public SharedString SerializedOperationGraph { get; set; }
		public float SmoothingAngle { get; set; }
		public int TriangleCount { get; set; }
		public bool UsePartColor { get; set; }
		public void SubstituteGeometry(Instance? source);
	}
	
	public interface IntersectOperation : PartOperation
	{
	}
	
	public interface NegateOperation : PartOperation
	{
	}
	
	public interface UnionOperation : PartOperation
	{
	}
	
	public interface TrussPart : BasePart
	{
		public Enum.Style Style { get; set; }
		public Enum.Style style { get; set; }
	}
	
	public interface VehicleSeat : BasePart
	{
		public int AreHingesDetected { get; set; }
		public bool Disabled { get; set; }
		public bool HeadsUpDisplay { get; set; }
		public float MaxSpeed { get; set; }
		public Humanoid? Occupant { get; set; }
		public int Steer { get; set; }
		public float SteerFloat { get; set; }
		public int Throttle { get; set; }
		public float ThrottleFloat { get; set; }
		public float Torque { get; set; }
		public float TurnSpeed { get; set; }
		public void Sit(Instance? humanoid);
		public ScriptSignal<Instance?> RemoteCreateSeatWeld { get; }
		public ScriptSignal RemoteDestroySeatWeld { get; }
	}
	
	public interface Model : PVInstance
	{
		public LodDataEntity? LodEntity { get; set; }
		public CFrame ModelMeshCFrame { get; set; }
		public string ModelMeshData { get; set; }
		public Vector3 ModelMeshSize { get; set; }
		public Enum.ModelStreamingMode ModelStreamingMode { get; set; }
		public bool NeedsPivotMigration { get; set; }
		public BasePart? PrimaryPart { get; set; }
		public float Scale { get; set; }
		public float ScaleFactor { get; set; }
		public CFrame WorldPivot { get; set; }
		public CFrame? WorldPivotData { get; set; }
		public void AddPersistentPlayer(Player? playerInstance);
		public void BreakJoints();
		public CFrame GetBoundingBox();
		public Vector3 GetExtentsSize();
		public CFrame GetModelCFrame();
		public Vector3 GetModelSize();
		public Instance[] GetPersistentPlayers();
		public CFrame GetPrimaryPartCFrame();
		public float GetScale();
		public void MakeJoints();
		public void MoveTo(Vector3 position);
		public void RemovePersistentPlayer(Player? playerInstance);
		public void ResetOrientationToIdentity();
		public void ScaleTo(float newScaleFactor);
		public void SetIdentityOrientation();
		public void SetPrimaryPartCFrame(CFrame cframe);
		public void TranslateBy(Vector3 delta);
		public void breakJoints();
		public void makeJoints();
		public void move(Vector3 location);
		public void moveTo(Vector3 location);
	}
	
	public interface Actor : Model
	{
		public ScriptConnection BindToMessage(string topic, Action function);
		public ScriptConnection BindToMessageParallel(string topic, Action function);
		public void SendMessage(string topic, object[] message);
	}
	
	public interface BackpackItem : Model
	{
		public string TextureId { get; set; }
	}
	
	public interface Tool : BackpackItem
	{
		public bool CanBeDropped { get; set; }
		public bool Enabled { get; set; }
		public CFrame Grip { get; set; }
		public Vector3 GripForward { get; set; }
		public Vector3 GripPos { get; set; }
		public Vector3 GripRight { get; set; }
		public Vector3 GripUp { get; set; }
		public bool ManualActivationOnly { get; set; }
		public bool RequiresHandle { get; set; }
		public string ToolTip { get; set; }
		public void Activate();
		public void Deactivate();
		public ScriptSignal Activated { get; }
		public ScriptSignal Deactivated { get; }
		public ScriptSignal<Mouse> Equipped { get; }
		public ScriptSignal Unequipped { get; }
	}
	
	public partial interface WorldRoot : Model
	{
		public bool ArePartsTouchingOthers(Instance[] partList, float? overlapIgnored);
		public RaycastResult Blockcast(CFrame cframe, Vector3 size, Vector3 direction, RaycastParams? parameters);
		public void BulkMoveTo(Instance[] partList, object[] cframeList, Enum.BulkMoveMode? eventMode);
		public object[] FindPartOnRay(Ray ray, Instance? ignoreDescendantsInstance, bool? terrainCellsAreCubes, bool? ignoreWater);
		public object[] FindPartOnRayWithIgnoreList(Ray ray, Instance[] ignoreDescendantsTable, bool? terrainCellsAreCubes, bool? ignoreWater);
		public object[] FindPartOnRayWithWhitelist(Ray ray, Instance[] whitelistDescendantsTable, bool? ignoreWater);
		public Instance[] FindPartsInRegion3(Region3 region, Instance? ignoreDescendantsInstance, int? maxParts);
		public Instance[] FindPartsInRegion3WithIgnoreList(Region3 region, Instance[] ignoreDescendantsTable, int? maxParts);
		public Instance[] FindPartsInRegion3WithWhiteList(Region3 region, Instance[] whitelistDescendantsTable, int? maxParts);
		public Instance[] GetPartBoundsInBox(CFrame cframe, Vector3 size, OverlapParams? overlapParams);
		public Instance[] GetPartBoundsInRadius(Vector3 position, float radius, OverlapParams? overlapParams);
		public Instance[] GetPartsInPart(BasePart part, OverlapParams? overlapParams);
		public bool IsRegion3Empty(Region3 region, Instance? ignoreDescendentsInstance);
		public bool IsRegion3EmptyWithIgnoreList(Region3 region, Instance[] ignoreDescendentsTable);
		public RaycastResult Raycast(Vector3 origin, Vector3 direction, RaycastParams? raycastParams);
		public RaycastResult Shapecast(BasePart part, Vector3 direction, RaycastParams? parameters);
		public RaycastResult Spherecast(Vector3 position, float radius, Vector3 direction, RaycastParams? parameters);
		public object[] findPartOnRay(Ray ray, Instance? ignoreDescendantsInstance, bool? terrainCellsAreCubes, bool? ignoreWater);
		public Instance[] findPartsInRegion3(Region3 region, Instance? ignoreDescendantsInstance, int? maxParts);
	}
	
	public partial interface Workspace : WorldRoot
	{
		public float AirDensity { get; set; }
		public bool AllowThirdPartySales { get; set; }
		public Enum.AvatarUnificationMode AvatarUnificationMode { get; set; }
		public Enum.CSGAsyncDynamicCollision CSGAsyncDynamicCollision { get; set; }
		public Enum.ClientAnimatorThrottlingMode ClientAnimatorThrottling { get; set; }
		public string CollisionGroups { get; set; }
		public Camera? CurrentCamera { get; set; }
		public int DataModelPlaceVersion { get; set; }
		public Enum.DecreaseMinimumPartDensityMode DecreaseMinimumPartDensityMode { get; set; }
		public double DistributedGameTime { get; set; }
		public bool ExplicitAutoJoints { get; set; }
		public float FallenPartsDestroyHeight { get; set; }
		public Enum.FluidForces FluidForces { get; set; }
		public Vector3 GlobalWind { get; set; }
		public float Gravity { get; set; }
		public Enum.IKControlConstraintSupport IKControlConstraintSupport { get; set; }
		public Vector3 InsertPoint { get; set; }
		public Enum.InterpolationThrottlingMode InterpolationThrottling { get; set; }
		public Enum.MeshPartHeadsAndAccessories MeshPartHeadsAndAccessories { get; set; }
		public Enum.ModelStreamingBehavior ModelStreamingBehavior { get; set; }
		public Enum.MoverConstraintRootBehaviorMode MoverConstraintRootBehavior { get; set; }
		public Enum.PhysicsSteppingMethod PhysicsSteppingMethod { get; set; }
		public Enum.PlayerCharacterDestroyBehavior PlayerCharacterDestroyBehavior { get; set; }
		public Enum.PrimalPhysicsSolver PrimalPhysicsSolver { get; set; }
		public Enum.RejectCharacterDeletions RejectCharacterDeletions { get; set; }
		public Enum.RenderingCacheOptimizationMode RenderingCacheOptimizations { get; set; }
		public Enum.ReplicateInstanceDestroySetting ReplicateInstanceDestroySetting { get; set; }
		public Enum.AnimatorRetargetingMode Retargeting { get; set; }
		public Enum.SignalBehavior SignalBehavior { get; set; }
		public Enum.SignalBehavior SignalBehavior2 { get; set; }
		public Enum.StreamOutBehavior StreamOutBehavior { get; set; }
		public bool StreamingEnabled { get; set; }
		public Enum.StreamingIntegrityMode StreamingIntegrityMode { get; set; }
		public int StreamingMinRadius { get; set; }
		public Enum.StreamingPauseMode StreamingPauseMode { get; set; }
		public int StreamingTargetRadius { get; set; }
		public Terrain? Terrain { get; set; }
		public bool TerrainWeldsFixed { get; set; }
		public bool TouchesUseCollisionGroups { get; set; }
		public int GetNumAwakeParts();
		public int GetPhysicsThrottling();
		public double GetRealPhysicsFPS();
		public double GetServerTimeNow();
		public void JoinToOutsiders(Instance[] objects, Enum.JointCreationMode jointType);
		public bool PGSIsEnabled();
		public void UnjoinFromOutsiders(Instance[] objects);
		public ScriptSignal<Player> PersistentLoaded { get; }
	}
	
	public interface WorldModel : WorldRoot
	{
	}
	
	public interface PackageLink : Instance
	{
		public bool AutoUpdate { get; set; }
		public string Creator { get; set; }
		public string DefaultName { get; }
		public int ModifiedState { get; set; }
		public string PackageAssetName { get; set; }
		public long PackageGuid { get; set; }
		public string PackageId { get; set; }
		public string PackageIdSerialize { get; set; }
		public Enum.PackagePermission PermissionLevel { get; set; }
		public string SerializedDefaultAttributes { get; }
		public long VersionIdSerialize { get; set; }
		public long VersionNumber { get; }
	}
	
	public interface PackageUIService : Instance
	{
	}
	
	public interface Pages : Instance
	{
		public bool IsFinished { get; set; }
		public object[] GetCurrentPage();
		public void AdvanceToNextPageAsync();
	}
	
	public interface AudioPages : Pages
	{
	}
	
	public interface BanHistoryPages : Pages
	{
	}
	
	public interface CatalogPages : Pages
	{
	}
	
	public interface DataStoreKeyPages : Pages
	{
		public string Cursor { get; set; }
	}
	
	public interface DataStoreListingPages : Pages
	{
		public string Cursor { get; set; }
	}
	
	public interface DataStorePages : Pages
	{
	}
	
	public interface DataStoreVersionPages : Pages
	{
	}
	
	public interface FriendPages : Pages
	{
	}
	
	public interface InventoryPages : Pages
	{
	}
	
	public interface EmotesPages : InventoryPages
	{
	}
	
	public interface MemoryStoreHashMapPages : Pages
	{
	}
	
	public interface OutfitPages : Pages
	{
	}
	
	public interface StandardPages : Pages
	{
	}
	
	public interface ParticleEmitter : Instance
	{
		public Vector3 Acceleration { get; set; }
		public float Brightness { get; set; }
		public ColorSequence Color { get; set; }
		public float Drag { get; set; }
		public Enum.NormalId EmissionDirection { get; set; }
		public bool Enabled { get; set; }
		public NumberRange FlipbookFramerate { get; set; }
		public string FlipbookIncompatible { get; set; }
		public Enum.ParticleFlipbookLayout FlipbookLayout { get; set; }
		public Enum.ParticleFlipbookMode FlipbookMode { get; set; }
		public bool FlipbookStartRandom { get; set; }
		public NumberRange Lifetime { get; set; }
		public float LightEmission { get; set; }
		public float LightInfluence { get; set; }
		public float LocalTransparencyModifier { get; set; }
		public bool LockedToPart { get; set; }
		public Enum.ParticleOrientation Orientation { get; set; }
		public float Rate { get; set; }
		public NumberRange RotSpeed { get; set; }
		public NumberRange Rotation { get; set; }
		public Enum.ParticleEmitterShape Shape { get; set; }
		public Enum.ParticleEmitterShapeInOut ShapeInOut { get; set; }
		public float ShapePartial { get; set; }
		public Enum.ParticleEmitterShapeStyle ShapeStyle { get; set; }
		public NumberSequence Size { get; set; }
		public NumberRange Speed { get; set; }
		public Vector2 SpreadAngle { get; set; }
		public NumberSequence Squash { get; set; }
		public string Texture { get; set; }
		public float TimeScale { get; set; }
		public NumberSequence Transparency { get; set; }
		public float VelocityInheritance { get; set; }
		public float VelocitySpread { get; set; }
		public bool WindAffectsDrag { get; set; }
		public float ZOffset { get; set; }
		public void Clear();
		public void Emit(int? particleCount);
		public ScriptSignal OnClearRequested { get; }
		public ScriptSignal<int> OnEmitRequested { get; }
	}
	
	public interface PatchBundlerFileWatch : Instance
	{
	}
	
	public interface PatchMapping : Instance
	{
		public bool FlattenTree { get; set; }
		public string PatchId { get; set; }
		public string TargetPath { get; set; }
	}
	
	public interface Path : Instance
	{
		public Enum.PathStatus Status { get; set; }
		public object[] GetPointCoordinates();
		public object[] GetWaypoints();
		public int CheckOcclusionAsync(int start);
		public void ComputeAsync(Vector3 start, Vector3 finish);
		public ScriptSignal<int> Blocked { get; }
		public ScriptSignal<int> Unblocked { get; }
	}
	
	public interface PathfindingLink : Instance
	{
		public Attachment? Attachment0 { get; set; }
		public Attachment? Attachment1 { get; set; }
		public bool IsBidirectional { get; set; }
		public string Label { get; set; }
	}
	
	public interface PathfindingModifier : Instance
	{
		public string Label { get; set; }
		public bool PassThrough { get; set; }
	}
	
	public interface PathfindingService : Instance
	{
		public float EmptyCutoff { get; set; }
		public Instance? CreatePath(object? agentParameters);
		public Instance? ComputeRawPathAsync(Vector3 start, Vector3 finish, float maxDistance);
		public Instance? ComputeSmoothPathAsync(Vector3 start, Vector3 finish, float maxDistance);
		public Instance? FindPathAsync(Vector3 start, Vector3 finish);
	}
	
	public interface PausedState : Instance
	{
	}
	
	public interface PausedStateBreakpoint : PausedState
	{
	}
	
	public interface PausedStateException : PausedState
	{
	}
	
	public interface PhysicsService : Instance
	{
		public bool CollisionGroupContainsPart(string name, BasePart part);
		public void CollisionGroupSetCollidable(string name1, string name2, bool collidable);
		public bool CollisionGroupsAreCollidable(string name1, string name2);
		public int CreateCollisionGroup(string name);
		public int GetCollisionGroupId(string name);
		public string GetCollisionGroupName(int name);
		public object[] GetCollisionGroups();
		public int GetMaxCollisionGroups();
		public object[] GetRegisteredCollisionGroups();
		public bool IsCollisionGroupRegistered(string name);
		public void RegisterCollisionGroup(string name);
		public void RemoveCollisionGroup(string name);
		public void RenameCollisionGroup(string from, string to);
		public void SetPartCollisionGroup(BasePart part, string name);
		public void UnregisterCollisionGroup(string name);
	}
	
	public interface PlaceStatsService : Instance
	{
	}
	
	public interface PlacesService : Instance
	{
	}
	
	public interface PlatformCloudStorageService : Instance
	{
	}
	
	public interface PlatformFriendsService : Instance
	{
	}
	
	public partial interface Player : Instance
	{
		public int AccountAge { get; set; }
		public int AccountAgeReplicate { get; set; }
		public bool AutoJumpEnabled { get; set; }
		public float CameraMaxZoomDistance { get; set; }
		public float CameraMinZoomDistance { get; set; }
		public Enum.CameraMode CameraMode { get; set; }
		public bool CanLoadCharacterAppearance { get; set; }
		public Model? Character { get; set; }
		public string CharacterAppearance { get; set; }
		public long CharacterAppearanceId { get; set; }
		public CFrame CloudEditCameraCoordinateFrame { get; set; }
		public bool CloudEditPlayerActive { get; set; }
		public string CountryRegionCodeReplicate { get; set; }
		public int DataComplexity { get; set; }
		public bool DataReady { get; set; }
		public Enum.DevCameraOcclusionMode DevCameraOcclusionMode { get; set; }
		public Enum.DevComputerCameraMovementMode DevComputerCameraMode { get; set; }
		public Enum.DevComputerMovementMode DevComputerMovementMode { get; set; }
		public bool DevEnableMouseLock { get; set; }
		public Enum.DevTouchCameraMovementMode DevTouchCameraMode { get; set; }
		public Enum.DevTouchMovementMode DevTouchMovementMode { get; set; }
		public string DisplayName { get; set; }
		public long FollowUserId { get; set; }
		public long FollowUserIdReplicated { get; set; }
		public bool GameplayPaused { get; }
		public bool HasVerifiedBadge { get; set; }
		public float HealthDisplayDistance { get; set; }
		public bool InternalCharacterAppearanceLoaded { get; set; }
		public string LocaleId { get; set; }
		public Enum.MembershipType MembershipType { get; set; }
		public Enum.MembershipType MembershipTypeReplicate { get; set; }
		public float NameDisplayDistance { get; set; }
		public bool Neutral { get; set; }
		public Instance? ReplicationFocus { get; set; }
		public SpawnLocation? RespawnLocation { get; set; }
		public Team? Team { get; set; }
		public BrickColor TeamColor { get; set; }
		public long UserId { get; set; }
		public long userId { get; set; }
		public void ClearCharacterAppearance();
		public float DistanceFromCharacter(Vector3 point);
		public object GetJoinData();
		public Mouse GetMouse();
		public float GetNetworkPing();
		public bool HasAppearanceLoaded();
		public bool IsVerified();
		public void Kick(string message);
		public bool LoadBoolean(string key);
		public void LoadCharacterAppearance(Instance? assetInstance);
		public Instance? LoadInstance(string key);
		public double LoadNumber(string key);
		public string LoadString(string key);
		public void Move(Vector3 walkDirection, bool? relativeToCamera);
		public void SaveBoolean(string key, bool value);
		public void SaveInstance(string key, Instance? value);
		public void SaveNumber(string key, double value);
		public void SaveString(string key, string value);
		public bool loadBoolean(string key);
		public Instance? loadInstance(string key);
		public double loadNumber(string key);
		public string loadString(string key);
		public void saveBoolean(string key, bool value);
		public void saveInstance(string key, Instance? value);
		public void saveNumber(string key, double value);
		public void saveString(string key, string value);
		public object[] GetFriendsOnline(int? maxFriends);
		public int GetRankInGroup(long groupId);
		public string GetRoleInGroup(long groupId);
		public bool IsBestFriendsWith(long userId);
		public bool IsFriendsWith(long userId);
		public bool IsInGroup(long groupId);
		public void LoadCharacter();
		public void LoadCharacterWithHumanoidDescription(HumanoidDescription humanoidDescription);
		public void RequestStreamAroundAsync(Vector3 position, double? timeOut);
		public bool WaitForDataReady();
		public bool isFriendsWith(long userId);
		public bool waitForDataReady();
		public ScriptSignal<Model> CharacterAdded { get; }
		public ScriptSignal<Model> CharacterAppearanceLoaded { get; }
		public ScriptSignal<Model> CharacterRemoving { get; }
		public ScriptSignal<string, Player> Chatted { get; }
		public ScriptSignal<double> Idled { get; }
		public ScriptSignal<Enum.TeleportState, long, string> OnTeleport { get; }
	}
	
	public interface PlayerHydrationService : Instance
	{
	}
	
	public interface PlayerScripts : Instance
	{
		public void ClearComputerCameraMovementModes();
		public void ClearComputerMovementModes();
		public void ClearTouchCameraMovementModes();
		public void ClearTouchMovementModes();
		public void RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode cameraMovementMode);
		public void RegisterComputerMovementMode(Enum.ComputerMovementMode movementMode);
		public void RegisterTouchCameraMovementMode(Enum.TouchCameraMovementMode cameraMovementMode);
		public void RegisterTouchMovementMode(Enum.TouchMovementMode movementMode);
	}
	
	public interface PlayerViewService : Instance
	{
		public CFrame GetDeviceCameraCFrame(Player? player);
	}
	
	public partial interface Players : Instance
	{
		public bool BubbleChat { get; set; }
		public bool CharacterAutoLoads { get; set; }
		public bool ClassicChat { get; set; }
		public Player? LocalPlayer { get; set; }
		public int MaxPlayers { get; set; }
		public int NumPlayers { get; set; }
		public int PreferredPlayers { get; set; }
		public float RespawnTime { get; set; }
		public bool UseStrafingAnimations { get; set; }
		public Player? localPlayer { get; set; }
		public int numPlayers { get; set; }
		public Player GetPlayerByUserId(long userId);
		public Player GetPlayerFromCharacter(Model character);
		public Instance[] GetPlayers();
		public Instance[] getPlayers();
		public Player playerFromCharacter(Model character);
		public Instance[] players();
		public void BanAsync(object config);
		public Model CreateHumanoidModelFromDescription(HumanoidDescription description, Enum.HumanoidRigType rigType, Enum.AssetTypeVerification? assetTypeVerification);
		public Model CreateHumanoidModelFromUserId(long userId);
		public BanHistoryPages GetBanHistoryAsync(long userId);
		public Model GetCharacterAppearanceAsync(long userId);
		public object GetCharacterAppearanceInfoAsync(long userId);
		public FriendPages GetFriendsAsync(long userId);
		public HumanoidDescription GetHumanoidDescriptionFromOutfitId(long outfitId);
		public HumanoidDescription GetHumanoidDescriptionFromUserId(long userId);
		public string GetNameFromUserIdAsync(long userId);
		public long GetUserIdFromNameAsync(string userName);
		public object[] GetUserThumbnailAsync(long userId, Enum.ThumbnailType thumbnailType, Enum.ThumbnailSize thumbnailSize);
		public void UnbanAsync(object config);
		public ScriptSignal<Player> PlayerAdded { get; }
		public ScriptSignal<Player> PlayerMembershipChanged { get; }
		public ScriptSignal<Player> PlayerRemoving { get; }
		public ScriptSignal<Player, string> UserSubscriptionStatusChanged { get; }
	}
	
	public interface PluginCapabilities : Instance
	{
	}
	
	public interface PluginManagementService : Instance
	{
	}
	
	public partial interface PluginManagerInterface : Instance
	{
	}
	
	public interface PluginPolicyService : Instance
	{
	}
	
	public interface PolicyService : Instance
	{
		public object GetPolicyInfoForPlayerAsync(Instance? player);
	}
	
	public interface PoseBase : Instance
	{
		public Enum.PoseEasingDirection EasingDirection { get; set; }
		public Enum.PoseEasingStyle EasingStyle { get; set; }
		public float Weight { get; set; }
	}
	
	public interface NumberPose : PoseBase
	{
		public double Value { get; set; }
	}
	
	public interface Pose : PoseBase
	{
		public CFrame CFrame { get; set; }
		public float MaskWeight { get; set; }
		public void AddSubPose(Instance? pose);
		public Instance[] GetSubPoses();
		public void RemoveSubPose(Instance? pose);
	}
	
	public interface PostEffect : Instance
	{
		public bool Enabled { get; set; }
	}
	
	public interface BloomEffect : PostEffect
	{
		public float Intensity { get; set; }
		public float Size { get; set; }
		public float Threshold { get; set; }
	}
	
	public interface BlurEffect : PostEffect
	{
		public float Size { get; set; }
	}
	
	public interface ColorCorrectionEffect : PostEffect
	{
		public float Brightness { get; set; }
		public float Contrast { get; set; }
		public float Saturation { get; set; }
		public Color3 TintColor { get; set; }
	}
	
	public interface DepthOfFieldEffect : PostEffect
	{
		public float FarIntensity { get; set; }
		public float FocusDistance { get; set; }
		public float InFocusRadius { get; set; }
		public float NearIntensity { get; set; }
	}
	
	public interface SunRaysEffect : PostEffect
	{
		public float Intensity { get; set; }
		public float Spread { get; set; }
	}
	
	public interface ProcessInstancePhysicsService : Instance
	{
	}
	
	public interface ProjectFolderService : Instance
	{
	}
	
	public interface ProximityPrompt : Instance
	{
		public string ActionText { get; set; }
		public bool AutoLocalize { get; set; }
		public bool ClickablePrompt { get; set; }
		public bool Enabled { get; set; }
		public Enum.ProximityPromptExclusivity Exclusivity { get; set; }
		public Enum.KeyCode GamepadKeyCode { get; set; }
		public float HoldDuration { get; set; }
		public Enum.KeyCode KeyboardKeyCode { get; set; }
		public float MaxActivationDistance { get; set; }
		public string ObjectText { get; set; }
		public bool RequiresLineOfSight { get; set; }
		public LocalizationTable? RootLocalizationTable { get; set; }
		public Enum.ProximityPromptStyle Style { get; set; }
		public Vector2 UIOffset { get; set; }
		public void InputHoldBegin();
		public void InputHoldEnd();
		public ScriptSignal<Player> PromptButtonHoldBegan { get; }
		public ScriptSignal<Player> PromptButtonHoldEnded { get; }
		public ScriptSignal PromptHidden { get; }
		public ScriptSignal<Enum.ProximityPromptInputType> PromptShown { get; }
		public ScriptSignal<Player> TriggerEnded { get; }
		public ScriptSignal<Player> Triggered { get; }
	}
	
	public interface ProximityPromptService : Instance
	{
		public bool Enabled { get; set; }
		public int MaxPromptsVisible { get; set; }
		public ScriptSignal<ProximityPrompt, Player> PromptButtonHoldBegan { get; }
		public ScriptSignal<ProximityPrompt, Player> PromptButtonHoldEnded { get; }
		public ScriptSignal<ProximityPrompt> PromptHidden { get; }
		public ScriptSignal<ProximityPrompt, Enum.ProximityPromptInputType> PromptShown { get; }
		public ScriptSignal<ProximityPrompt, Player> PromptTriggerEnded { get; }
		public ScriptSignal<ProximityPrompt, Player> PromptTriggered { get; }
	}
	
	public interface PublishService : Instance
	{
	}
	
	public interface RTAnimationTracker : Instance
	{
		public bool Active { get; set; }
		public bool EnableFallbackAudioInput { get; set; }
		public string SessionName { get; set; }
		public Enum.TrackerMode TrackerMode { get; set; }
		public Enum.TrackerType TrackerType { get; set; }
		public ScriptSignal<Enum.TrackerError, string> TrackerError { get; }
		public ScriptSignal<Enum.TrackerPromptEvent> TrackerPrompt { get; }
	}
	
	public interface ReflectionService : Instance
	{
	}
	
	public interface RemoteCursorService : Instance
	{
	}
	
	public interface RemoteDebuggerServer : Instance
	{
	}
	
	public interface RemoteFunction : Instance
	{
		public object[] InvokeClient(Player player, object[] arguments);
		public object[] InvokeServer(object[] arguments);
		public ScriptSignal<int, object[]> RemoteOnInvokeClient { get; }
		public ScriptSignal<int, string> RemoteOnInvokeError { get; }
		public ScriptSignal<int, Player, object[]> RemoteOnInvokeServer { get; }
		public ScriptSignal<int, object[]> RemoteOnInvokeSuccess { get; }
	}
	
	public interface ReplicatedFirst : Instance
	{
		public void RemoveDefaultLoadingScreen();
	}
	
	public interface ReplicatedStorage : Instance
	{
	}
	
	public interface RibbonNotificationService : Instance
	{
	}
	
	public interface RobloxServerStorage : Instance
	{
	}
	
	public interface RomarkService : Instance
	{
		public void EndRemoteRomarkTest();
	}
	
	public interface RotationCurve : Instance
	{
		public int Length { get; set; }
		public string ValuesAndTimes { get; set; }
		public RotationCurveKey GetKeyAtIndex(int index);
		public object[] GetKeyIndicesAtTime(float time);
		public object[] GetKeys();
		public CFrame? GetValueAtTime(float time);
		public object[] InsertKey(RotationCurveKey key);
		public int RemoveKeyAtIndex(int startingIndex, int? count);
		public int SetKeys(object[] keys);
	}
	
	public interface RtMessagingService : Instance
	{
	}
	
	public partial interface RunService : Instance
	{
		public void BindToRenderStep(string name, int priority, Action function);
		public bool IsClient();
		public bool IsRunMode();
		public bool IsRunning();
		public bool IsServer();
		public bool IsStudio();
		public void UnbindFromRenderStep(string name);
		public ScriptSignal<double> Heartbeat { get; }
		public ScriptSignal<double> PostSimulation { get; }
		public ScriptSignal<double> PreAnimation { get; }
		public ScriptSignal<double> PreRender { get; }
		public ScriptSignal<double> PreSimulation { get; }
		public ScriptSignal<double> RenderStepped { get; }
		public ScriptSignal<double, double> Stepped { get; }
	}
	
	public interface SafetyService : Instance
	{
	}
	
	public interface ScreenshotHud : Instance
	{
		public string CameraButtonIcon { get; set; }
		public UDim2 CameraButtonPosition { get; set; }
		public UDim2 CloseButtonPosition { get; set; }
		public bool CloseWhenScreenshotTaken { get; set; }
		public bool ExperienceNameOverlayEnabled { get; set; }
		public bool HideCoreGuiForCaptures { get; set; }
		public bool HidePlayerGuiForCaptures { get; set; }
		public Enum.Font OverlayFont { get; set; }
		public bool UsernameOverlayEnabled { get; set; }
		public bool Visible { get; set; }
	}
	
	public interface ScriptBuilder : Instance
	{
	}
	
	public interface SyncScriptBuilder : ScriptBuilder
	{
		public Enum.CompileTarget CompileTarget { get; set; }
		public bool CoverageInfo { get; set; }
		public bool DebugInfo { get; set; }
		public bool PackAsSource { get; set; }
		public bool RawBytecode { get; set; }
	}
	
	public interface ScriptChangeService : Instance
	{
	}
	
	public interface ScriptCloneWatcher : Instance
	{
	}
	
	public interface ScriptCloneWatcherHelper : Instance
	{
	}
	
	public interface ScriptCommitService : Instance
	{
	}
	
	public partial interface ScriptContext : Instance
	{
		public ScriptSignal<string, string, Instance?> Error { get; }
	}
	
	public partial interface ScriptDocument : Instance
	{
	}
	
	public partial interface ScriptEditorService : Instance
	{
	}
	
	public partial interface ScriptProfilerService : Instance
	{
	}
	
	public interface ScriptRegistrationService : Instance
	{
	}
	
	public interface ScriptRuntime : Instance
	{
	}
	
	public interface SelectionHighlightManager : Instance
	{
	}
	
	public interface SensorBase : Instance
	{
		public Enum.SensorUpdateType UpdateType { get; set; }
		public void Sense();
		public ScriptSignal OnSensorOutputChanged { get; }
	}
	
	public interface AtmosphereSensor : SensorBase
	{
		public float AirDensity { get; set; }
		public Vector3 RelativeWindVelocity { get; set; }
	}
	
	public interface BuoyancySensor : SensorBase
	{
		public bool FullySubmerged { get; set; }
		public bool TouchingSurface { get; set; }
	}
	
	public interface ControllerSensor : SensorBase
	{
	}
	
	public interface ControllerPartSensor : ControllerSensor
	{
		public CFrame HitFrame { get; set; }
		public Vector3 HitNormal { get; set; }
		public float SearchDistance { get; set; }
		public BasePart? SensedPart { get; set; }
		public Enum.SensorMode SensorMode { get; set; }
	}
	
	public interface ServerScriptService : Instance
	{
		public bool LoadStringEnabled { get; set; }
	}
	
	public interface ServerStorage : Instance
	{
	}
	
	public interface ServiceProvider : Instance
	{
		public Instance? FindService(string className);
		public Instance? GetService(string className);
		public Instance? getService(string className);
		public Instance? service(string className);
		public ScriptSignal Close { get; }
		public ScriptSignal<Instance?> ServiceAdded { get; }
		public ScriptSignal<Instance?> ServiceRemoving { get; }
	}
	
	public partial interface DataModel : ServiceProvider
	{
		public long CreatorId { get; set; }
		public Enum.CreatorType CreatorType { get; set; }
		public long GameId { get; set; }
		public Enum.GearGenreSetting GearGenreSetting { get; set; }
		public Enum.Genre Genre { get; set; }
		public string JobId { get; set; }
		public long PlaceId { get; set; }
		public int PlaceVersion { get; set; }
		public string PrivateServerId { get; set; }
		public long PrivateServerOwnerId { get; set; }
		public string VIPServerId { get; set; }
		public long VIPServerOwnerId { get; set; }
		public Workspace? Workspace { get; set; }
		public Instance? lighting { get; set; }
		public Workspace? workspace { get; set; }
		public void BindToClose(Action function);
		public string GetMessage();
		public bool GetRemoteBuildMode();
		public bool IsGearTypeAllowed(Enum.GearType gearType);
		public bool IsLoaded();
		public bool SavePlace(Enum.SaveFilter? saveFilter);
		public ScriptSignal AllowedGearTypeChanged { get; }
		public ScriptSignal<bool> GraphicsQualityChangeRequest { get; }
		public ScriptSignal<Instance?, string> ItemChanged { get; }
		public ScriptSignal Loaded { get; }
	}
	
	public interface GenericSettings : ServiceProvider
	{
	}
	
	public interface UserSettings : GenericSettings
	{
		public bool IsUserFeatureEnabled(string name);
		public void Reset();
	}
	
	public interface ServiceVisibilityService : Instance
	{
	}
	
	public interface SessionService : Instance
	{
	}
	
	public interface SharedTableRegistry : Instance
	{
		public SharedTable GetSharedTable(string name);
		public void SetSharedTable(string name, SharedTable? st);
	}
	
	public interface ShorelineUpgraderService : Instance
	{
	}
	
	public interface Sky : Instance
	{
		public bool CelestialBodiesShown { get; set; }
		public float MoonAngularSize { get; set; }
		public string MoonTextureId { get; set; }
		public string SkyboxBk { get; set; }
		public string SkyboxDn { get; set; }
		public string SkyboxFt { get; set; }
		public string SkyboxLf { get; set; }
		public string SkyboxRt { get; set; }
		public string SkyboxUp { get; set; }
		public int StarCount { get; set; }
		public float SunAngularSize { get; set; }
		public string SunTextureId { get; set; }
	}
	
	public interface Smoke : Instance
	{
		public Color3 Color { get; set; }
		public bool Enabled { get; set; }
		public float LocalTransparencyModifier { get; set; }
		public float Opacity { get; set; }
		public float RiseVelocity { get; set; }
		public float Size { get; set; }
		public float TimeScale { get; set; }
		public float opacity_xml { get; set; }
		public float riseVelocity_xml { get; set; }
		public float size_xml { get; set; }
	}
	
	public interface SmoothVoxelsUpgraderService : Instance
	{
	}
	
	public interface SnippetService : Instance
	{
	}
	
	public interface SocialService : Instance
	{
		public void HideSelfView();
		public void PromptGameInvite(Instance? player, Instance? experienceInviteOptions);
		public void PromptPhoneBook(Instance? player, string tag);
		public void ShowSelfView(Enum.SelfViewPosition? selfViewPosition);
		public bool CanSendCallInviteAsync(Instance? player);
		public bool CanSendGameInviteAsync(Instance? player, long? recipientId);
		public ScriptSignal<Instance?, Enum.InviteState> CallInviteStateChanged { get; }
		public ScriptSignal<Instance?, object[]> GameInvitePromptClosed { get; }
		public ScriptSignal<Instance?> PhoneBookPromptClosed { get; }
	}
	
	public interface Sound : Instance
	{
		public float EmitterSize { get; set; }
		public bool IsLoaded { get; set; }
		public bool IsPaused { get; set; }
		public bool IsPlaying { get; set; }
		public NumberRange LoopRegion { get; set; }
		public bool Looped { get; set; }
		public float MaxDistance { get; set; }
		public float MinDistance { get; set; }
		public float Pitch { get; set; }
		public bool PlayOnRemove { get; set; }
		public double PlaybackLoudness { get; set; }
		public NumberRange PlaybackRegion { get; set; }
		public bool PlaybackRegionsEnabled { get; set; }
		public float PlaybackSpeed { get; set; }
		public bool Playing { get; set; }
		public bool PlayingReplicator { get; set; }
		public float RollOffMaxDistance { get; set; }
		public float RollOffMinDistance { get; set; }
		public Enum.RollOffMode RollOffMode { get; set; }
		public SoundGroup? SoundGroup { get; set; }
		public string SoundId { get; set; }
		public double TimeLength { get; set; }
		public double TimePosition { get; set; }
		public double TimePositionReplicator { get; set; }
		public float Volume { get; set; }
		public bool isPlaying { get; set; }
		public float xmlRead_MaxDistance_3 { get; set; }
		public float xmlRead_MinDistance_3 { get; set; }
		public void Pause();
		public void Play();
		public void Resume();
		public void Stop();
		public void pause();
		public void play();
		public void stop();
		public ScriptSignal<string, int> DidLoop { get; }
		public ScriptSignal<string> Ended { get; }
		public ScriptSignal<string> Loaded { get; }
		public ScriptSignal<string> Paused { get; }
		public ScriptSignal<string> Played { get; }
		public ScriptSignal<string> Resumed { get; }
		public ScriptSignal<string> Stopped { get; }
	}
	
	public interface SoundEffect : Instance
	{
		public bool Enabled { get; set; }
		public int Priority { get; set; }
	}
	
	public interface ChorusSoundEffect : SoundEffect
	{
		public float Depth { get; set; }
		public float Mix { get; set; }
		public float Rate { get; set; }
	}
	
	public interface CompressorSoundEffect : SoundEffect
	{
		public float Attack { get; set; }
		public float GainMakeup { get; set; }
		public float Ratio { get; set; }
		public float Release { get; set; }
		public Instance? SideChain { get; set; }
		public float Threshold { get; set; }
	}
	
	public interface CustomSoundEffect : SoundEffect
	{
	}
	
	public interface AssetSoundEffect : CustomSoundEffect
	{
	}
	
	public interface ChannelSelectorSoundEffect : CustomSoundEffect
	{
		public int Channel { get; set; }
	}
	
	public interface DistortionSoundEffect : SoundEffect
	{
		public float Level { get; set; }
	}
	
	public interface EchoSoundEffect : SoundEffect
	{
		public float Delay { get; set; }
		public float DryLevel { get; set; }
		public float Feedback { get; set; }
		public float WetLevel { get; set; }
	}
	
	public interface EqualizerSoundEffect : SoundEffect
	{
		public float HighGain { get; set; }
		public float LowGain { get; set; }
		public float MidGain { get; set; }
	}
	
	public interface FlangeSoundEffect : SoundEffect
	{
		public float Depth { get; set; }
		public float Mix { get; set; }
		public float Rate { get; set; }
	}
	
	public interface PitchShiftSoundEffect : SoundEffect
	{
		public float Octave { get; set; }
	}
	
	public interface ReverbSoundEffect : SoundEffect
	{
		public float DecayTime { get; set; }
		public float Density { get; set; }
		public float Diffusion { get; set; }
		public float DryLevel { get; set; }
		public float WetLevel { get; set; }
	}
	
	public interface TremoloSoundEffect : SoundEffect
	{
		public float Depth { get; set; }
		public float Duty { get; set; }
		public float Frequency { get; set; }
	}
	
	public interface SoundGroup : Instance
	{
		public float Volume { get; set; }
	}
	
	public partial interface SoundService : Instance
	{
		public Enum.ReverbType AmbientReverb { get; set; }
		public float DistanceFactor { get; set; }
		public float DopplerScale { get; set; }
		public bool RespectFilteringEnabled { get; set; }
		public float RolloffScale { get; set; }
		public Enum.VolumetricAudio VolumetricAudio { get; set; }
		public object[] GetListener();
		public void PlayLocalSound(Instance? sound);
		public void SetListener(Enum.ListenerType listenerType, object[] listener);
	}
	
	public interface Sparkles : Instance
	{
		public Color3 Color { get; set; }
		public bool Enabled { get; set; }
		public float LocalTransparencyModifier { get; set; }
		public Color3 SparkleColor { get; set; }
		public float TimeScale { get; set; }
	}
	
	public interface StackFrame : Instance
	{
	}
	
	public interface StarterGear : Instance
	{
	}
	
	public interface StarterPack : Instance
	{
	}
	
	public interface StarterPlayer : Instance
	{
		public bool AllowCustomAnimations { get; }
		public bool AutoJumpEnabled { get; set; }
		public Enum.AvatarJointUpgrade AvatarJointUpgrade { get; set; }
		public Enum.AvatarJointUpgrade AvatarJointUpgrade_Serialized { get; set; }
		public float CameraMaxZoomDistance { get; set; }
		public float CameraMinZoomDistance { get; set; }
		public Enum.CameraMode CameraMode { get; set; }
		public float CharacterJumpHeight { get; set; }
		public float CharacterJumpPower { get; set; }
		public float CharacterMaxSlopeAngle { get; set; }
		public bool CharacterUseJumpPower { get; set; }
		public float CharacterWalkSpeed { get; set; }
		public Enum.DevCameraOcclusionMode DevCameraOcclusionMode { get; set; }
		public Enum.DevComputerCameraMovementMode DevComputerCameraMovementMode { get; set; }
		public Enum.DevComputerMovementMode DevComputerMovementMode { get; set; }
		public Enum.DevTouchCameraMovementMode DevTouchCameraMovementMode { get; set; }
		public Enum.DevTouchMovementMode DevTouchMovementMode { get; set; }
		public Enum.LoadDynamicHeads EnableDynamicHeads { get; set; }
		public bool EnableMouseLockOption { get; set; }
		public float HealthDisplayDistance { get; set; }
		public bool LoadCharacterAppearance { get; set; }
		public Enum.LoadCharacterLayeredClothing LoadCharacterLayeredClothing { get; set; }
		public Enum.LoadCharacterLayeredClothing LoadCharacterLayeredClothing { get; set; }
		public Enum.CharacterControlMode LuaCharacterController { get; set; }
		public float NameDisplayDistance { get; set; }
		public bool UserEmotesEnabled { get; set; }
	}
	
	public interface StarterPlayerScripts : Instance
	{
	}
	
	public interface StarterCharacterScripts : StarterPlayerScripts
	{
	}
	
	public interface StartupMessageService : Instance
	{
	}
	
	public interface Stats : Instance
	{
		public int ContactsCount { get; set; }
		public float DataReceiveKbps { get; set; }
		public float DataSendKbps { get; set; }
		public float HeartbeatTimeMs { get; set; }
		public int InstanceCount { get; set; }
		public int MovingPrimitivesCount { get; set; }
		public float PhysicsReceiveKbps { get; set; }
		public float PhysicsSendKbps { get; set; }
		public float PhysicsStepTimeMs { get; set; }
		public int PrimitivesCount { get; set; }
		public float GetMemoryUsageMbForTag(Enum.DeveloperMemoryTag tag);
		public float GetTotalMemoryUsageMb();
	}
	
	public interface StreamingService : Instance
	{
	}
	
	public interface StudioAssetService : Instance
	{
	}
	
	public interface StudioAttachment : Instance
	{
		public bool AutoHideParent { get; set; }
		public bool IsArrowVisible { get; set; }
		public Vector2 Offset { get; set; }
		public Vector2 SourceAnchorPoint { get; set; }
		public Vector2 TargetAnchorPoint { get; set; }
	}
	
	public interface StudioCallout : Instance
	{
	}
	
	public interface StudioDeviceEmulatorService : Instance
	{
	}
	
	public interface StudioObjectBase : Instance
	{
	}
	
	public interface StudioWidget : StudioObjectBase
	{
	}
	
	public interface StudioPublishService : Instance
	{
	}
	
	public interface StudioScriptDebugEventListener : Instance
	{
	}
	
	public interface StudioSdkService : Instance
	{
	}
	
	public interface StudioWidgetsService : Instance
	{
	}
	
	public interface StyleBase : Instance
	{
		public Instance[] GetStyleRules();
		public void InsertStyleRule(StyleRule rule, int? index);
		public void SetStyleRules(Instance[] rules);
		public ScriptSignal StyleRulesChanged { get; }
	}
	
	public interface StyleRule : StyleBase
	{
		public int Index { get; set; }
		public string PropertiesSerialize { get; set; }
		public string Selector { get; set; }
		public string SelectorError { get; set; }
		public object GetProperties();
		public object? GetProperty(string name);
		public void SetProperties(object table);
		public void SetProperty(string name, object? value);
	}
	
	public interface StyleSheet : StyleBase
	{
		public Instance[] GetDerives();
		public void SetDerives(Instance[] derives);
	}
	
	public interface StyleDerive : Instance
	{
		public int Index { get; set; }
		public StyleSheet? StyleSheet { get; set; }
	}
	
	public interface StyleLink : Instance
	{
		public StyleSheet? StyleSheet { get; set; }
	}
	
	public interface StylingService : Instance
	{
	}
	
	public interface SurfaceAppearance : Instance
	{
		public Color3 Color { get; set; }
	}
	
	public interface Team : Instance
	{
		public bool AutoAssignable { get; set; }
		public bool AutoColorCharacters { get; set; }
		public int Score { get; set; }
		public BrickColor TeamColor { get; set; }
		public Instance[] GetPlayers();
		public ScriptSignal<Player> PlayerAdded { get; }
		public ScriptSignal<Player> PlayerRemoved { get; }
	}
	
	public interface TeamCreateData : Instance
	{
	}
	
	public interface TeamCreatePublishService : Instance
	{
	}
	
	public interface TeamCreateService : Instance
	{
	}
	
	public interface Teams : Instance
	{
		public Instance[] GetTeams();
		public void RebalanceTeams();
	}
	
	public interface TeleportAsyncResult : Instance
	{
		public string PrivateServerId { get; set; }
		public string ReservedServerAccessCode { get; set; }
	}
	
	public interface TeleportOptions : Instance
	{
		public string ReservedServerAccessCode { get; set; }
		public string ServerInstanceId { get; set; }
		public bool ShouldReserveServer { get; set; }
		public object? GetTeleportData();
		public void SetTeleportData(object? teleportData);
	}
	
	public interface TeleportService : Instance
	{
		public bool CustomizedTeleportUI { get; set; }
		public Instance? GetArrivingTeleportGui();
		public object? GetLocalPlayerTeleportData();
		public object? GetTeleportSetting(string setting);
		public void SetTeleportGui(Instance? gui);
		public void SetTeleportSetting(string setting, object? value);
		public void Teleport(long placeId, Instance? player, object? teleportData, Instance? customLoadingScreen);
		public void TeleportToPlaceInstance(long placeId, string instanceId, Instance? player, string? spawnName, object? teleportData, Instance? customLoadingScreen);
		public void TeleportToPrivateServer(long placeId, string reservedServerAccessCode, Instance[] players, string spawnName, object? teleportData, Instance? customLoadingScreen);
		public void TeleportToSpawnByName(long placeId, string spawnName, Instance? player, object? teleportData, Instance? customLoadingScreen);
		public object[] GetPlayerPlaceInstanceAsync(long userId);
		public object[] ReserveServer(long placeId);
		public Instance? TeleportAsync(long placeId, Instance[] players, Instance? teleportOptions);
		public string TeleportPartyAsync(long placeId, Instance[] players, object? teleportData, Instance? customLoadingScreen);
		public ScriptSignal<Instance?, object?> LocalPlayerArrivedFromTeleport { get; }
		public ScriptSignal<Instance?, Enum.TeleportResult, string, long, Instance?> TeleportInitFailed { get; }
	}
	
	public interface TemporaryCageMeshProvider : Instance
	{
	}
	
	public interface TemporaryScriptService : Instance
	{
	}
	
	public interface TerrainDetail : Instance
	{
		public Enum.TerrainFace Face { get; set; }
		public Enum.MaterialPattern MaterialPattern { get; set; }
		public float StudsPerTile { get; set; }
		public string TexturePack { get; set; }
	}
	
	public partial interface TerrainRegion : Instance
	{
		public Vector3int16 ExtentsMax { get; set; }
		public Vector3int16 ExtentsMin { get; set; }
		public string GridV3 { get; set; }
		public bool IsSmooth { get; set; }
		public Vector3 SizeInCells { get; set; }
		public string SmoothGrid { get; set; }
	}
	
	public interface TextBoxService : Instance
	{
	}
	
	public interface TextChannel : Instance
	{
		public TextChatMessage DisplaySystemMessage(string systemMessage, string metadata);
		public object[] AddUserAsync(long userId);
		public TextChatMessage SendAsync(string message, string metadata);
		public ScriptSignal<TextChatMessage> MessageReceived { get; }
	}
	
	public interface TextChatCommand : Instance
	{
		public bool AutocompleteVisible { get; set; }
		public bool Enabled { get; set; }
		public string PrimaryAlias { get; set; }
		public string SecondaryAlias { get; set; }
		public ScriptSignal<TextSource, string> Triggered { get; }
	}
	
	public interface TextChatConfigurations : Instance
	{
	}
	
	public interface BubbleChatConfiguration : TextChatConfigurations
	{
		public string AdorneeName { get; set; }
		public Color3 BackgroundColor3 { get; set; }
		public double BackgroundTransparency { get; set; }
		public float BubbleDuration { get; set; }
		public float BubblesSpacing { get; set; }
		public bool Enabled { get; set; }
		public Enum.Font Font { get; set; }
		public Font FontFace { get; set; }
		public Vector3 LocalPlayerStudsOffset { get; set; }
		public float MaxBubbles { get; set; }
		public float MaxDistance { get; set; }
		public float MinimizeDistance { get; set; }
		public bool TailVisible { get; set; }
		public Color3 TextColor3 { get; set; }
		public long TextSize { get; set; }
		public float VerticalStudsOffset { get; set; }
	}
	
	public interface ChatInputBarConfiguration : TextChatConfigurations
	{
		public Vector2 AbsolutePosition { get; set; }
		public Vector2 AbsoluteSize { get; set; }
		public bool AutocompleteEnabled { get; set; }
		public Color3 BackgroundColor3 { get; set; }
		public double BackgroundTransparency { get; set; }
		public bool Enabled { get; set; }
		public Font FontFace { get; set; }
		public bool IsFocused { get; set; }
		public Enum.KeyCode KeyboardKeyCode { get; set; }
		public Color3 PlaceholderColor3 { get; set; }
		public TextChannel? TargetTextChannel { get; set; }
		public TextBox? TextBox { get; set; }
		public Color3 TextColor3 { get; set; }
		public long TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public double TextStrokeTransparency { get; set; }
	}
	
	public interface ChatWindowConfiguration : TextChatConfigurations
	{
		public Vector2 AbsolutePosition { get; set; }
		public Vector2 AbsoluteSize { get; set; }
		public Color3 BackgroundColor3 { get; set; }
		public double BackgroundTransparency { get; set; }
		public bool Enabled { get; set; }
		public Font FontFace { get; set; }
		public float HeightScale { get; set; }
		public Enum.HorizontalAlignment HorizontalAlignment { get; set; }
		public Color3 TextColor3 { get; set; }
		public long TextSize { get; set; }
		public Color3 TextStrokeColor3 { get; set; }
		public double TextStrokeTransparency { get; set; }
		public Enum.VerticalAlignment VerticalAlignment { get; set; }
		public float WidthScale { get; set; }
	}
	
	public interface TextChatMessage : Instance
	{
		public BubbleChatMessageProperties? BubbleChatMessageProperties { get; set; }
		public string MessageId { get; set; }
		public string Metadata { get; set; }
		public string PrefixText { get; set; }
		public Enum.TextChatMessageStatus Status { get; set; }
		public string Text { get; set; }
		public TextChannel? TextChannel { get; set; }
		public TextSource? TextSource { get; set; }
		public DateTime Timestamp { get; set; }
		public string Translation { get; set; }
	}
	
	public interface TextChatMessageProperties : Instance
	{
		public string PrefixText { get; set; }
		public string Text { get; set; }
		public string Translation { get; set; }
	}
	
	public interface TextChatService : Instance
	{
		public bool ChatTranslationEnabled { get; }
		public Enum.ChatVersion ChatVersion { get; }
		public bool CreateDefaultCommands { get; set; }
		public bool CreateDefaultTextChannels { get; set; }
		public void DisplayBubble(Instance? partOrCharacter, string message);
		public bool CanUserChatAsync(long userId);
		public bool CanUsersChatAsync(long userIdFrom, long userIdTo);
		public ScriptSignal<Instance?, TextChatMessage> BubbleDisplayed { get; }
		public ScriptSignal<TextChatMessage> MessageReceived { get; }
		public ScriptSignal<TextChatMessage> SendingMessage { get; }
	}
	
	public interface TextFilterResult : Instance
	{
		public string GetChatForUserAsync(long toUserId);
		public string GetNonChatStringForBroadcastAsync();
		public string GetNonChatStringForUserAsync(long toUserId);
	}
	
	public interface TextFilterTranslatedResult : Instance
	{
		public string SourceLanguage { get; set; }
		public TextFilterResult? SourceText { get; set; }
		public TextFilterResult GetTranslationForLocale(string locale);
		public object GetTranslations();
	}
	
	public interface TextService : Instance
	{
		public Vector2 GetTextSize(string str, int fontSize, Enum.Font font, Vector2 frameSize);
		public TextFilterTranslatedResult FilterAndTranslateStringAsync(string stringToFilter, long fromUserId, object[] targetLocales, Enum.TextFilterContext? textContext);
		public TextFilterResult FilterStringAsync(string stringToFilter, long fromUserId, Enum.TextFilterContext? textContext);
		public object GetFamilyInfoAsync(string assetId);
		public Vector2 GetTextBoundsAsync(GetTextBoundsParams parameters);
	}
	
	public interface TextSource : Instance
	{
		public bool CanSend { get; set; }
		public long UserId { get; set; }
		public long UserIdReplicated { get; set; }
	}
	
	public interface TextureGenerationPartGroup : Instance
	{
	}
	
	public interface TextureGenerationService : Instance
	{
	}
	
	public interface TextureGenerationUnwrappingRequest : Instance
	{
	}
	
	public interface ThreadState : Instance
	{
	}
	
	public interface ToastNotificationService : Instance
	{
	}
	
	public interface TouchTransmitter : Instance
	{
	}
	
	public interface TracerService : Instance
	{
	}
	
	public interface TrackerLodController : Instance
	{
		public Enum.TrackerLodFlagMode AudioMode { get; set; }
		public Enum.TrackerExtrapolationFlagMode VideoExtrapolationMode { get; set; }
		public Enum.TrackerLodValueMode VideoLodMode { get; set; }
		public Enum.TrackerLodFlagMode VideoMode { get; set; }
	}
	
	public interface TrackerStreamAnimation : Instance
	{
	}
	
	public interface Trail : Instance
	{
		public Attachment? Attachment0 { get; set; }
		public Attachment? Attachment1 { get; set; }
		public float Brightness { get; set; }
		public ColorSequence Color { get; set; }
		public bool Enabled { get; set; }
		public bool FaceCamera { get; set; }
		public float Lifetime { get; set; }
		public float LightEmission { get; set; }
		public float LightInfluence { get; set; }
		public float LocalTransparencyModifier { get; set; }
		public float MaxLength { get; set; }
		public float MinLength { get; set; }
		public string Texture { get; set; }
		public float TextureLength { get; set; }
		public Enum.TextureMode TextureMode { get; set; }
		public NumberSequence Transparency { get; set; }
		public NumberSequence WidthScale { get; set; }
		public void Clear();
		public ScriptSignal OnClearRequested { get; }
	}
	
	public interface Translator : Instance
	{
		public string LocaleId { get; set; }
		public string FormatByKey(string key, object? args);
		public string Translate(Instance? context, string text);
	}
	
	public interface TutorialService : Instance
	{
	}
	
	public interface TweenBase : Instance
	{
		public Enum.PlaybackState PlaybackState { get; set; }
		public void Cancel();
		public void Pause();
		public void Play();
		public ScriptSignal<Enum.PlaybackState> Completed { get; }
	}
	
	public interface Tween : TweenBase
	{
		public Instance? Instance { get; set; }
		public TweenInfo TweenInfo { get; set; }
	}
	
	public interface TweenService : Instance
	{
		public Tween Create(Instance? instance, TweenInfo tweenInfo, object propertyTable);
		public float GetValue(float alpha, Enum.EasingStyle easingStyle, Enum.EasingDirection easingDirection);
	}
	
	public interface UGCAvatarService : Instance
	{
	}
	
	public interface UIBase : Instance
	{
	}
	
	public interface UIComponent : UIBase
	{
	}
	
	public interface UIConstraint : UIComponent
	{
	}
	
	public interface UIAspectRatioConstraint : UIConstraint
	{
		public float AspectRatio { get; set; }
		public Enum.AspectType AspectType { get; set; }
		public Enum.DominantAxis DominantAxis { get; set; }
	}
	
	public interface UISizeConstraint : UIConstraint
	{
		public Vector2 MaxSize { get; set; }
		public Vector2 MinSize { get; set; }
	}
	
	public interface UITextSizeConstraint : UIConstraint
	{
		public int MaxTextSize { get; set; }
		public int MinTextSize { get; set; }
	}
	
	public interface UICorner : UIComponent
	{
		public UDim CornerRadius { get; set; }
	}
	
	public interface UIDragDetector : UIComponent
	{
		public string ActivatedCursorIcon { get; set; }
		public GuiBase2d? BoundingUI { get; set; }
		public string CursorIcon { get; set; }
		public Vector2 DragAxis { get; set; }
		public Enum.UIDragDetectorDragRelativity DragRelativity { get; set; }
		public float DragRotation { get; set; }
		public Enum.UIDragDetectorDragSpace DragSpace { get; set; }
		public Enum.UIDragDetectorDragStyle DragStyle { get; set; }
		public UDim2 DragUDim2 { get; set; }
		public bool Enabled { get; set; }
		public float MaxDragAngle { get; set; }
		public UDim2 MaxDragTranslation { get; set; }
		public float MinDragAngle { get; set; }
		public UDim2 MinDragTranslation { get; set; }
		public GuiObject? ReferenceUIInstance { get; set; }
		public Enum.UIDragDetectorResponseStyle ResponseStyle { get; set; }
		public RBXScriptConnection AddConstraintFunction(int priority, Action function);
		public UDim2 GetReferencePosition();
		public float GetReferenceRotation();
		public void SetDragStyleFunction(Action function);
		public ScriptSignal<Vector2> DragContinue { get; }
		public ScriptSignal<Vector2> DragEnd { get; }
		public ScriptSignal<Vector2> DragStart { get; }
	}
	
	public interface UIFlexItem : UIComponent
	{
		public Enum.UIFlexMode FlexMode { get; set; }
		public float GrowRatio { get; set; }
		public Enum.ItemLineAlignment ItemLineAlignment { get; set; }
		public float ShrinkRatio { get; set; }
	}
	
	public interface UIGradient : UIComponent
	{
		public ColorSequence Color { get; set; }
		public bool Enabled { get; set; }
		public Vector2 Offset { get; set; }
		public float Rotation { get; set; }
		public NumberSequence Transparency { get; set; }
	}
	
	public interface UILayout : UIComponent
	{
	}
	
	public interface UIGridStyleLayout : UILayout
	{
		public Vector2 AbsoluteContentSize { get; set; }
		public Enum.FillDirection FillDirection { get; set; }
		public Enum.HorizontalAlignment HorizontalAlignment { get; set; }
		public Enum.SortOrder SortOrder { get; set; }
		public Enum.VerticalAlignment VerticalAlignment { get; set; }
		public void ApplyLayout();
		public void SetCustomSortFunction(Action? function);
	}
	
	public interface UIGridLayout : UIGridStyleLayout
	{
		public Vector2 AbsoluteCellCount { get; set; }
		public Vector2 AbsoluteCellSize { get; set; }
		public UDim2 CellPadding { get; set; }
		public UDim2 CellSize { get; set; }
		public int FillDirectionMaxCells { get; set; }
		public Enum.StartCorner StartCorner { get; set; }
	}
	
	public interface UIListLayout : UIGridStyleLayout
	{
		public Enum.UIFlexAlignment HorizontalFlex { get; set; }
		public UDim HorizontalPadding { get; set; }
		public Enum.ItemLineAlignment ItemLineAlignment { get; set; }
		public UDim Padding { get; set; }
		public Enum.UIFlexAlignment VerticalFlex { get; set; }
		public UDim VerticalPadding { get; set; }
		public bool Wraps { get; set; }
	}
	
	public interface UIPageLayout : UIGridStyleLayout
	{
		public bool Animated { get; set; }
		public bool Circular { get; set; }
		public GuiObject? CurrentPage { get; set; }
		public Enum.EasingDirection EasingDirection { get; set; }
		public Enum.EasingStyle EasingStyle { get; set; }
		public bool GamepadInputEnabled { get; set; }
		public UDim Padding { get; set; }
		public bool ScrollWheelInputEnabled { get; set; }
		public bool TouchInputEnabled { get; set; }
		public float TweenTime { get; set; }
		public void JumpTo(Instance? page);
		public void JumpToIndex(int index);
		public void Next();
		public void Previous();
		public ScriptSignal<Instance?> PageEnter { get; }
		public ScriptSignal<Instance?> PageLeave { get; }
		public ScriptSignal<Instance?> Stopped { get; }
	}
	
	public interface UITableLayout : UIGridStyleLayout
	{
		public bool FillEmptySpaceColumns { get; set; }
		public bool FillEmptySpaceRows { get; set; }
		public Enum.TableMajorAxis MajorAxis { get; set; }
		public UDim2 Padding { get; set; }
	}
	
	public interface UIPadding : UIComponent
	{
		public UDim PaddingBottom { get; set; }
		public UDim PaddingLeft { get; set; }
		public UDim PaddingRight { get; set; }
		public UDim PaddingTop { get; set; }
	}
	
	public interface UIScale : UIComponent
	{
		public float Scale { get; set; }
	}
	
	public interface UIStroke : UIComponent
	{
		public Enum.ApplyStrokeMode ApplyStrokeMode { get; set; }
		public Color3 Color { get; set; }
		public bool Enabled { get; set; }
		public Enum.LineJoinMode LineJoinMode { get; set; }
		public float Thickness { get; set; }
		public float Transparency { get; set; }
	}
	
	public interface UIDragDetectorService : Instance
	{
	}
	
	public interface UnvalidatedAssetService : Instance
	{
	}
	
	public interface UserGameSettings : Instance
	{
		public Enum.ComputerCameraMovementMode ComputerCameraMovementMode { get; set; }
		public Enum.ComputerMovementMode ComputerMovementMode { get; set; }
		public Enum.ControlMode ControlMode { get; set; }
		public float GamepadCameraSensitivity { get; set; }
		public float MouseSensitivity { get; set; }
		public int RCCProfilerRecordFrameRate { get; set; }
		public int RCCProfilerRecordTimeFrame { get; set; }
		public Enum.RotationType RotationType { get; set; }
		public Enum.SavedQualitySetting SavedQualityLevel { get; set; }
		public Enum.TouchCameraMovementMode TouchCameraMovementMode { get; set; }
		public Enum.TouchMovementMode TouchMovementMode { get; set; }
		public bool VRSmoothRotationEnabled { get; }
		public bool VignetteEnabled { get; }
		public int GetCameraYInvertValue();
		public bool GetOnboardingCompleted(string onboardingId);
		public bool InFullScreen();
		public bool InStudioMode();
		public void SetCameraYInvertVisible();
		public void SetGamepadCameraSensitivityVisible();
		public void SetOnboardingCompleted(string onboardingId);
		public ScriptSignal<bool> FullscreenChanged { get; }
		public ScriptSignal<bool> StudioModeChanged { get; }
	}
	
	public interface UserInputService : Instance
	{
		public bool AccelerometerEnabled { get; set; }
		public bool GamepadEnabled { get; set; }
		public bool GyroscopeEnabled { get; set; }
		public bool KeyboardEnabled { get; set; }
		public bool ModalEnabled { get; set; }
		public Enum.MouseBehavior MouseBehavior { get; set; }
		public float MouseDeltaSensitivity { get; set; }
		public bool MouseEnabled { get; set; }
		public string MouseIcon { get; set; }
		public bool MouseIconEnabled { get; set; }
		public Vector2 OnScreenKeyboardPosition { get; set; }
		public Vector2 OnScreenKeyboardSize { get; set; }
		public bool OnScreenKeyboardVisible { get; set; }
		public bool TouchEnabled { get; set; }
		public CFrame UserHeadCFrame { get; set; }
		public bool VREnabled { get; set; }
		public bool GamepadSupports(Enum.UserInputType gamepadNum, Enum.KeyCode gamepadKeyCode);
		public object[] GetConnectedGamepads();
		public InputObject GetDeviceAcceleration();
		public InputObject GetDeviceGravity();
		public object[] GetDeviceRotation();
		public TextBox GetFocusedTextBox();
		public bool GetGamepadConnected(Enum.UserInputType gamepadNum);
		public object[] GetGamepadState(Enum.UserInputType gamepadNum);
		public string GetImageForKeyCode(Enum.KeyCode keyCode);
		public object[] GetKeysPressed();
		public Enum.UserInputType GetLastInputType();
		public object[] GetMouseButtonsPressed();
		public Vector2 GetMouseDelta();
		public Vector2 GetMouseLocation();
		public object[] GetNavigationGamepads();
		public string GetStringForKeyCode(Enum.KeyCode keyCode);
		public object[] GetSupportedGamepadKeyCodes(Enum.UserInputType gamepadNum);
		public CFrame GetUserCFrame(Enum.UserCFrame type);
		public bool IsGamepadButtonDown(Enum.UserInputType gamepadNum, Enum.KeyCode gamepadKeyCode);
		public bool IsKeyDown(Enum.KeyCode keyCode);
		public bool IsMouseButtonPressed(Enum.UserInputType mouseButton);
		public bool IsNavigationGamepad(Enum.UserInputType gamepadEnum);
		public void RecenterUserHeadCFrame();
		public void SetNavigationGamepad(Enum.UserInputType gamepadEnum, bool enabled);
		public ScriptSignal<InputObject> DeviceAccelerationChanged { get; }
		public ScriptSignal<InputObject> DeviceGravityChanged { get; }
		public ScriptSignal<InputObject, CFrame> DeviceRotationChanged { get; }
		public ScriptSignal<Enum.UserInputType> GamepadConnected { get; }
		public ScriptSignal<Enum.UserInputType> GamepadDisconnected { get; }
		public ScriptSignal<InputObject, bool> InputBegan { get; }
		public ScriptSignal<InputObject, bool> InputChanged { get; }
		public ScriptSignal<InputObject, bool> InputEnded { get; }
		public ScriptSignal JumpRequest { get; }
		public ScriptSignal<Enum.UserInputType> LastInputTypeChanged { get; }
		public ScriptSignal<float, Vector2, float, bool> PointerAction { get; }
		public ScriptSignal<TextBox> TextBoxFocusReleased { get; }
		public ScriptSignal<TextBox> TextBoxFocused { get; }
		public ScriptSignal<InputObject, bool> TouchEnded { get; }
		public ScriptSignal<object[], Enum.UserInputState, bool> TouchLongPress { get; }
		public ScriptSignal<InputObject, bool> TouchMoved { get; }
		public ScriptSignal<object[], Vector2, Vector2, Enum.UserInputState, bool> TouchPan { get; }
		public ScriptSignal<object[], float, float, Enum.UserInputState, bool> TouchPinch { get; }
		public ScriptSignal<object[], float, float, Enum.UserInputState, bool> TouchRotate { get; }
		public ScriptSignal<InputObject, bool> TouchStarted { get; }
		public ScriptSignal<Enum.SwipeDirection, int, bool> TouchSwipe { get; }
		public ScriptSignal<object[], bool> TouchTap { get; }
		public ScriptSignal<Vector2, bool> TouchTapInWorld { get; }
		public ScriptSignal<Enum.UserCFrame, CFrame> UserCFrameChanged { get; }
		public ScriptSignal WindowFocusReleased { get; }
		public ScriptSignal WindowFocused { get; }
	}
	
	public interface UserService : Instance
	{
		public object[] GetUserInfosByUserIdsAsync(object[] userIds);
	}
	
	public interface VRService : Instance
	{
		public Enum.VRScaling AutomaticScaling { get; set; }
		public bool AvatarGestures { get; set; }
		public bool FadeOutViewOnCollision { get; set; }
		public Enum.UserCFrame GuiInputUserCFrame { get; set; }
		public bool ThirdPersonFollowCamEnabled { get; set; }
		public bool VREnabled { get; set; }
		public Enum.VRTouchpadMode GetTouchpadMode(Enum.VRTouchpad pad);
		public CFrame GetUserCFrame(Enum.UserCFrame type);
		public bool GetUserCFrameEnabled(Enum.UserCFrame type);
		public void RecenterUserHeadCFrame();
		public void RequestNavigation(CFrame cframe, Enum.UserCFrame inputUserCFrame);
		public void SetTouchpadMode(Enum.VRTouchpad pad, Enum.VRTouchpadMode mode);
		public ScriptSignal<CFrame, Enum.UserCFrame> NavigationRequested { get; }
		public ScriptSignal<Enum.VRTouchpad, Enum.VRTouchpadMode> TouchpadModeChanged { get; }
		public ScriptSignal<Enum.UserCFrame, CFrame> UserCFrameChanged { get; }
		public ScriptSignal<Enum.UserCFrame, bool> UserCFrameEnabled { get; }
	}
	
	public interface VRStatusService : Instance
	{
	}
	
	public interface ValueBase : Instance
	{
	}
	
	public interface BoolValue : ValueBase
	{
		public bool Value { get; set; }
		public ScriptSignal<bool> Changed { get; }
		public ScriptSignal<bool> changed { get; }
	}
	
	public interface BrickColorValue : ValueBase
	{
		public BrickColor Value { get; set; }
		public ScriptSignal<BrickColor> Changed { get; }
		public ScriptSignal<BrickColor> changed { get; }
	}
	
	public interface CFrameValue : ValueBase
	{
		public CFrame Value { get; set; }
		public ScriptSignal<CFrame> Changed { get; }
		public ScriptSignal<CFrame> changed { get; }
	}
	
	public interface Color3Value : ValueBase
	{
		public Color3 Value { get; set; }
		public ScriptSignal<Color3> Changed { get; }
		public ScriptSignal<Color3> changed { get; }
	}
	
	public interface DoubleConstrainedValue : ValueBase
	{
		public double ConstrainedValue { get; set; }
		public double MaxValue { get; set; }
		public double MinValue { get; set; }
		public double Value { get; set; }
		public double value { get; set; }
		public ScriptSignal<double> Changed { get; }
		public ScriptSignal<double> changed { get; }
	}
	
	public interface IntConstrainedValue : ValueBase
	{
		public long ConstrainedValue { get; set; }
		public long MaxValue { get; set; }
		public long MinValue { get; set; }
		public long Value { get; set; }
		public long value { get; set; }
		public ScriptSignal<long> Changed { get; }
		public ScriptSignal<long> changed { get; }
	}
	
	public interface IntValue : ValueBase
	{
		public long Value { get; set; }
		public ScriptSignal<long> Changed { get; }
		public ScriptSignal<long> changed { get; }
	}
	
	public interface NumberValue : ValueBase
	{
		public double Value { get; set; }
		public ScriptSignal<double> Changed { get; }
		public ScriptSignal<double> changed { get; }
	}
	
	public interface ObjectValue : ValueBase
	{
		public Instance? Value { get; set; }
		public ScriptSignal<Instance?> Changed { get; }
		public ScriptSignal<Instance?> changed { get; }
	}
	
	public interface RayValue : ValueBase
	{
		public Ray Value { get; set; }
		public ScriptSignal<Ray> Changed { get; }
		public ScriptSignal<Ray> changed { get; }
	}
	
	public interface StringValue : ValueBase
	{
		public string Value { get; set; }
		public ScriptSignal<string> Changed { get; }
		public ScriptSignal<string> changed { get; }
	}
	
	public interface Vector3Value : ValueBase
	{
		public Vector3 Value { get; set; }
		public ScriptSignal<Vector3> Changed { get; }
		public ScriptSignal<Vector3> changed { get; }
	}
	
	public interface Vector3Curve : Instance
	{
		public object[] GetValueAtTime(float time);
		public FloatCurve X();
		public FloatCurve Y();
		public FloatCurve Z();
	}
	
	public interface VideoCaptureService : Instance
	{
	}
	
	public interface VideoDeviceInput : Instance
	{
		public bool Active { get; set; }
		public string CameraId { get; set; }
		public Enum.VideoDeviceCaptureQuality CaptureQuality { get; set; }
		public bool IsReady { get; set; }
	}
	
	public interface VideoService : Instance
	{
	}
	
	public interface VisibilityCheckDispatcher : Instance
	{
	}
	
	public interface VisualizationMode : Instance
	{
	}
	
	public interface VisualizationModeCategory : Instance
	{
	}
	
	public interface VisualizationModeService : Instance
	{
	}
	
	public interface VoiceChatInternal : Instance
	{
		public Enum.VoiceChatState VoiceChatState { get; set; }
		public object[] GetAudioProcessingSettings();
		public object[] GetMicDevices();
		public object[] GetParticipants();
		public object[] GetSpeakerDevices();
		public int GetVoiceChatApiVersion();
		public int GetVoiceChatAvailable();
		public bool IsPublishPaused();
		public bool IsSubscribePaused(long userId);
		public bool JoinByGroupId(string groupId, bool? isMicMuted);
		public bool JoinByGroupIdToken(string groupId, bool isMicMuted, bool? isRetry);
		public void Leave();
		public bool PublishPause(bool paused);
		public void SetMicDevice(string micDeviceName, string micDeviceGuid);
		public void SetSpeakerDevice(string speakerDeviceName, string speakerDeviceGuid);
		public bool SubscribePause(long userId, bool paused);
		public bool SubscribePauseAll(bool paused);
		public bool IsVoiceEnabledForUserIdAsync(long userId);
		public ScriptSignal<Enum.VoiceChatState, Enum.VoiceChatState> StateChanged { get; }
	}
	
	public interface VoiceChatService : Instance
	{
		public bool IsVoiceEnabledForUserIdAsync(long userId);
	}
	
	public interface WeldConstraint : Instance
	{
		public bool Active { get; set; }
		public CFrame CFrame0 { get; set; }
		public CFrame CFrame1 { get; set; }
		public bool Enabled { get; set; }
		public BasePart? Part0 { get; set; }
		public BasePart? Part0Internal { get; set; }
		public BasePart? Part1 { get; set; }
		public BasePart? Part1Internal { get; set; }
		public int State { get; set; }
	}
	
	public interface Wire : Instance
	{
		public bool Connected { get; set; }
		public Instance? SourceInstance { get; set; }
		public string SourceName { get; set; }
		public Instance? TargetInstance { get; set; }
		public string TargetName { get; set; }
	}
	
}
