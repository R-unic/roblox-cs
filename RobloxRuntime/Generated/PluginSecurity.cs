// THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY!

using RobloxRuntime.Classes;

namespace RobloxRuntime.PluginClasses
{
	public static class Services
	{
		public static CoreGui CoreGui { get; } = null!;
		public static ChangeHistoryService ChangeHistoryService { get; } = null!;
		public static DebuggerManager DebuggerManager { get; } = null!;
		public static NetworkSettings NetworkSettings { get; } = null!;
		public static PackageService PackageService { get; } = null!;
		public static PluginDebugService PluginDebugService { get; } = null!;
		public static PluginGuiService PluginGuiService { get; } = null!;
		public static RenderSettings RenderSettings { get; } = null!;
		public static RobloxPluginGuiService RobloxPluginGuiService { get; } = null!;
		public static Selection Selection { get; } = null!;
		public static StudioData StudioData { get; } = null!;
		public static StudioService StudioService { get; } = null!;
		public static TaskScheduler TaskScheduler { get; } = null!;
		public static TestService TestService { get; } = null!;
		public static VersionControlService VersionControlService { get; } = null!;
	}
	
	// GENERATED ROBLOX INSTANCE CLASSES
	
	public partial interface Instance
	{
		public string GetDebugId(int? scopeLength);
	}
	
	public interface AccessoryDescription : ICreatableInstance
	{
	}
	
	public interface AccountService : ICreatableInstance
	{
	}
	
	public interface Accoutrement : ICreatableInstance
	{
	}
	
	public interface Accessory : Accoutrement, ICreatableInstance
	{
	}
	
	public interface AchievementService : ICreatableInstance
	{
	}
	
	public interface ActivityHistoryService : ICreatableInstance
	{
	}
	
	public interface AdPortal : ICreatableInstance
	{
	}
	
	public interface AnalyticsService : ICreatableInstance
	{
	}
	
	public interface Animation : ICreatableInstance
	{
	}
	
	public interface AnimationClip : ICreatableInstance
	{
	}
	
	public partial interface KeyframeSequence : AnimationClip, ICreatableInstance
	{
	}
	
	public partial interface AnimationClipProvider : ICreatableInstance
	{
		public AnimationClip GetAnimationClip(string assetId);
		public AnimationClip GetAnimationClipById(long assetId, bool useCache);
	}
	
	public interface AnimationController : ICreatableInstance
	{
	}
	
	public interface AnimationFromVideoCreatorService : ICreatableInstance
	{
	}
	
	public interface AnimationFromVideoCreatorStudioService : ICreatableInstance
	{
	}
	
	public interface AnimationRigData : ICreatableInstance
	{
	}
	
	public interface AnimationStreamTrack : ICreatableInstance
	{
	}
	
	public interface AnimationTrack : ICreatableInstance
	{
	}
	
	public partial interface Animator : ICreatableInstance
	{
		public void StepAnimations(float deltaTime);
	}
	
	public interface AppLifecycleObserverService : ICreatableInstance
	{
	}
	
	public interface AppUpdateService : ICreatableInstance
	{
	}
	
	public interface AssetDeliveryProxy : ICreatableInstance
	{
	}
	
	public interface AssetImportService : ICreatableInstance
	{
	}
	
	public interface AssetImportSession : ICreatableInstance
	{
	}
	
	public interface AssetManagerService : ICreatableInstance
	{
	}
	
	public interface AssetPatchSettings : ICreatableInstance
	{
	}
	
	public partial interface AssetService : ICreatableInstance
	{
		public MeshPart CreateMeshPartAsync(string meshId, object? options);
	}
	
	public interface Atmosphere : ICreatableInstance
	{
	}
	
	public interface Attachment : ICreatableInstance
	{
	}
	
	public interface Bone : Attachment, ICreatableInstance
	{
	}
	
	public interface AudioAnalyzer : ICreatableInstance
	{
	}
	
	public interface AudioChorus : ICreatableInstance
	{
	}
	
	public interface AudioCompressor : ICreatableInstance
	{
	}
	
	public interface AudioDeviceInput : ICreatableInstance
	{
	}
	
	public interface AudioDeviceOutput : ICreatableInstance
	{
	}
	
	public interface AudioDistortion : ICreatableInstance
	{
	}
	
	public interface AudioEcho : ICreatableInstance
	{
	}
	
	public interface AudioEmitter : ICreatableInstance
	{
	}
	
	public interface AudioEqualizer : ICreatableInstance
	{
	}
	
	public interface AudioFader : ICreatableInstance
	{
	}
	
	public interface AudioFilter : ICreatableInstance
	{
	}
	
	public interface AudioFlanger : ICreatableInstance
	{
	}
	
	public interface AudioListener : ICreatableInstance
	{
	}
	
	public interface AudioPitchShifter : ICreatableInstance
	{
	}
	
	public interface AudioPlayer : ICreatableInstance
	{
	}
	
	public interface AudioReverb : ICreatableInstance
	{
	}
	
	public interface AudioSearchParams : ICreatableInstance
	{
	}
	
	public interface AvatarChatService : ICreatableInstance
	{
	}
	
	public interface AvatarCreationService : ICreatableInstance
	{
	}
	
	public interface AvatarEditorService : ICreatableInstance
	{
	}
	
	public interface AvatarGenerationJob : ICreatableInstance
	{
	}
	
	public interface Avatar2DGenerationJob : AvatarGenerationJob, ICreatableInstance
	{
	}
	
	public interface Avatar3DGenerationJob : AvatarGenerationJob, ICreatableInstance
	{
	}
	
	public interface AvatarGenerationSession : ICreatableInstance
	{
	}
	
	public interface AvatarImportService : ICreatableInstance
	{
	}
	
	public interface BadgeService : ICreatableInstance
	{
	}
	
	public interface BaseImportData : ICreatableInstance
	{
	}
	
	public interface GroupImportData : BaseImportData, ICreatableInstance
	{
	}
	
	public interface MaterialImportData : BaseImportData, ICreatableInstance
	{
	}
	
	public interface MeshImportData : BaseImportData, ICreatableInstance
	{
	}
	
	public interface RootImportData : BaseImportData, ICreatableInstance
	{
	}
	
	public interface BasePlayerGui : ICreatableInstance
	{
	}
	
	public interface CoreGui : BasePlayerGui, ICreatableInstance
	{
		public int Version { get; }
	}
	
	public interface PlayerGui : BasePlayerGui, ICreatableInstance
	{
	}
	
	public partial interface StarterGui : BasePlayerGui, ICreatableInstance
	{
		public bool ShowDevelopmentGui { get; set; }
	}
	
	public interface RemoteEvent : BaseRemoteEvent, ICreatableInstance
	{
	}
	
	public interface UnreliableRemoteEvent : BaseRemoteEvent, ICreatableInstance
	{
	}
	
	public interface BaseWrap : ICreatableInstance
	{
	}
	
	public interface WrapLayer : BaseWrap, ICreatableInstance
	{
	}
	
	public interface WrapTarget : BaseWrap, ICreatableInstance
	{
	}
	
	public interface Beam : ICreatableInstance
	{
	}
	
	public interface BindableEvent : ICreatableInstance
	{
	}
	
	public interface BindableFunction : ICreatableInstance
	{
	}
	
	public interface BodyAngularVelocity : BodyMover, ICreatableInstance
	{
	}
	
	public interface BodyForce : BodyMover, ICreatableInstance
	{
	}
	
	public interface BodyGyro : BodyMover, ICreatableInstance
	{
	}
	
	public interface BodyPosition : BodyMover, ICreatableInstance
	{
	}
	
	public interface BodyThrust : BodyMover, ICreatableInstance
	{
	}
	
	public interface BodyVelocity : BodyMover, ICreatableInstance
	{
	}
	
	public interface RocketPropulsion : BodyMover, ICreatableInstance
	{
	}
	
	public interface BodyPartDescription : ICreatableInstance
	{
	}
	
	public interface Breakpoint : ICreatableInstance
	{
	}
	
	public interface BubbleChatMessageProperties : ICreatableInstance
	{
	}
	
	public interface BulkImportService : ICreatableInstance
	{
	}
	
	public interface CalloutService : ICreatableInstance
	{
	}
	
	public interface Camera : ICreatableInstance
	{
	}
	
	public interface CaptureService : ICreatableInstance
	{
	}
	
	public interface ChangeHistoryService : ICreatableInstance
	{
		public void FinishRecording(string identifier, Enum.FinishRecordingOperation operation, object? finalOptions);
		public object[] GetCanRedo();
		public object[] GetCanUndo();
		public bool IsRecordingInProgress(string? identifier);
		public void Redo();
		public void ResetWaypoints();
		public void SetEnabled(bool state);
		public void SetWaypoint(string name);
		public string? TryBeginRecording(string name, string? displayName);
		public void Undo();
		public ScriptSignal<string, string?, string?, Enum.FinishRecordingOperation, object?> OnRecordingFinished { get; }
		public ScriptSignal<string, string?> OnRecordingStarted { get; }
		public ScriptSignal<string> OnRedo { get; }
		public ScriptSignal<string> OnUndo { get; }
	}
	
	public interface BodyColors : CharacterAppearance, ICreatableInstance
	{
	}
	
	public interface CharacterMesh : CharacterAppearance, ICreatableInstance
	{
	}
	
	public interface Clothing : CharacterAppearance, ICreatableInstance
	{
	}
	
	public interface Pants : Clothing, ICreatableInstance
	{
	}
	
	public interface Shirt : Clothing, ICreatableInstance
	{
	}
	
	public interface ShirtGraphic : CharacterAppearance, ICreatableInstance
	{
	}
	
	public interface Chat : ICreatableInstance
	{
	}
	
	public interface ChatbotUIService : ICreatableInstance
	{
	}
	
	public interface ClickDetector : ICreatableInstance
	{
	}
	
	public interface DragDetector : ClickDetector, ICreatableInstance
	{
	}
	
	public interface Clouds : ICreatableInstance
	{
	}
	
	public interface Collaborator : ICreatableInstance
	{
	}
	
	public interface CollaboratorsService : ICreatableInstance
	{
	}
	
	public interface CollectionService : ICreatableInstance
	{
	}
	
	public interface CommandInstance : ICreatableInstance
	{
	}
	
	public interface CommandService : ICreatableInstance
	{
	}
	
	public interface CommerceService : ICreatableInstance
	{
	}
	
	public interface ConnectivityService : ICreatableInstance
	{
	}
	
	public interface Constraint : ICreatableInstance
	{
	}
	
	public interface AlignOrientation : Constraint, ICreatableInstance
	{
	}
	
	public interface AlignPosition : Constraint, ICreatableInstance
	{
	}
	
	public interface AngularVelocity : Constraint, ICreatableInstance
	{
	}
	
	public interface AnimationConstraint : Constraint, ICreatableInstance
	{
	}
	
	public interface BallSocketConstraint : Constraint, ICreatableInstance
	{
	}
	
	public interface HingeConstraint : Constraint, ICreatableInstance
	{
	}
	
	public interface LineForce : Constraint, ICreatableInstance
	{
	}
	
	public interface LinearVelocity : Constraint, ICreatableInstance
	{
	}
	
	public interface RodConstraint : Constraint, ICreatableInstance
	{
	}
	
	public interface RopeConstraint : Constraint, ICreatableInstance
	{
	}
	
	public interface SlidingBallConstraint : Constraint, ICreatableInstance
	{
	}
	
	public interface CylindricalConstraint : SlidingBallConstraint, ICreatableInstance
	{
	}
	
	public interface SpringConstraint : Constraint, ICreatableInstance
	{
	}
	
	public interface Torque : Constraint, ICreatableInstance
	{
	}
	
	public interface TorsionSpringConstraint : Constraint, ICreatableInstance
	{
	}
	
	public interface UniversalConstraint : Constraint, ICreatableInstance
	{
	}
	
	public interface VectorForce : Constraint, ICreatableInstance
	{
	}
	
	public interface ContentProvider : ICreatableInstance
	{
	}
	
	public interface ContextActionService : ICreatableInstance
	{
	}
	
	public interface Controller : ICreatableInstance
	{
	}
	
	public interface SkateboardController : Controller, ICreatableInstance
	{
	}
	
	public interface ControllerBase : ICreatableInstance
	{
	}
	
	public interface AirController : ControllerBase, ICreatableInstance
	{
	}
	
	public interface ClimbController : ControllerBase, ICreatableInstance
	{
	}
	
	public interface GroundController : ControllerBase, ICreatableInstance
	{
	}
	
	public interface SwimController : ControllerBase, ICreatableInstance
	{
	}
	
	public interface ControllerManager : ICreatableInstance
	{
	}
	
	public interface ConversationalAIAcceptanceService : ICreatableInstance
	{
	}
	
	public interface CrossDMScriptChangeListener : ICreatableInstance
	{
	}
	
	public interface DataModelMesh : ICreatableInstance
	{
	}
	
	public interface BevelMesh : DataModelMesh, ICreatableInstance
	{
	}
	
	public interface EditableMesh : DataModelMesh, ICreatableInstance
	{
	}
	
	public interface RobloxEditableMesh : EditableMesh, ICreatableInstance
	{
	}
	
	public interface FileMesh : DataModelMesh, ICreatableInstance
	{
	}
	
	public interface SpecialMesh : FileMesh, ICreatableInstance
	{
	}
	
	public interface DataModelPatchService : ICreatableInstance
	{
	}
	
	public interface DataModelSession : ICreatableInstance
	{
	}
	
	public interface DataStoreGetOptions : ICreatableInstance
	{
	}
	
	public interface DataStoreIncrementOptions : ICreatableInstance
	{
	}
	
	public interface DataStoreInfo : ICreatableInstance
	{
	}
	
	public interface DataStoreKey : ICreatableInstance
	{
	}
	
	public interface DataStoreKeyInfo : ICreatableInstance
	{
	}
	
	public interface DataStoreObjectVersionInfo : ICreatableInstance
	{
	}
	
	public interface DataStoreOptions : ICreatableInstance
	{
	}
	
	public interface DataStoreService : ICreatableInstance
	{
	}
	
	public interface DataStoreSetOptions : ICreatableInstance
	{
	}
	
	public interface Debris : ICreatableInstance
	{
	}
	
	public interface DebugSettings : ICreatableInstance
	{
		public int DataModel { get; }
		public int InstanceCount { get; }
		public bool IsScriptStackTracingEnabled { get; set; }
		public int JobCount { get; }
		public int PlayerCount { get; }
		public bool ReportSoundWarnings { get; set; }
		public string RobloxVersion { get; }
		public Enum.TickCountSampleMethod TickCountPreciseOverride { get; set; }
	}
	
	public interface DebuggerBreakpoint : ICreatableInstance
	{
		public string Condition { get; set; }
		public bool ContinueExecution { get; set; }
		public bool IsEnabled { get; set; }
		public int Line { get; }
		public string LogExpression { get; set; }
		public bool isContextDependentBreakpoint { get; set; }
	}
	
	public interface DebuggerConnection : ICreatableInstance
	{
	}
	
	public interface DebuggerConnectionManager : ICreatableInstance
	{
	}
	
	public interface DebuggerLuaResponse : ICreatableInstance
	{
	}
	
	public interface DebuggerManager : ICreatableInstance
	{
		public bool DebuggingEnabled { get; }
		public Instance AddDebugger(LuaSourceContainer script);
		public Instance[] GetDebuggers();
		public void Resume();
		public void StepIn();
		public void StepOut();
		public void StepOver();
		public ScriptSignal<Instance> DebuggerAdded { get; }
		public ScriptSignal<Instance> DebuggerRemoved { get; }
	}
	
	public interface DebuggerUIService : ICreatableInstance
	{
	}
	
	public interface DebuggerVariable : ICreatableInstance
	{
	}
	
	public interface DebuggerWatch : ICreatableInstance
	{
		public string Expression { get; set; }
	}
	
	public interface DeviceIdService : ICreatableInstance
	{
	}
	
	public interface Dialog : ICreatableInstance
	{
	}
	
	public interface DialogChoice : ICreatableInstance
	{
	}
	
	public interface Dragger : ICreatableInstance
	{
	}
	
	public interface DraggerService : ICreatableInstance
	{
	}
	
	public interface EditableImage : ICreatableInstance
	{
	}
	
	public interface RobloxEditableImage : EditableImage, ICreatableInstance
	{
	}
	
	public interface EulerRotationCurve : ICreatableInstance
	{
	}
	
	public interface EventIngestService : ICreatableInstance
	{
	}
	
	public interface ExampleService : ICreatableInstance
	{
	}
	
	public interface ExperienceAuthService : ICreatableInstance
	{
	}
	
	public interface ExperienceInviteOptions : ICreatableInstance
	{
	}
	
	public interface ExperienceNotificationService : ICreatableInstance
	{
	}
	
	public interface ExperienceService : ICreatableInstance
	{
	}
	
	public interface ExperienceStateCaptureService : ICreatableInstance
	{
	}
	
	public interface Explosion : ICreatableInstance
	{
	}
	
	public interface FaceAnimatorService : ICreatableInstance
	{
	}
	
	public interface FaceControls : ICreatableInstance
	{
		public float ChinRaiser { get; set; }
		public float ChinRaiserUpperLip { get; set; }
		public float Corrugator { get; set; }
		public float EyesLookDown { get; set; }
		public float EyesLookLeft { get; set; }
		public float EyesLookRight { get; set; }
		public float EyesLookUp { get; set; }
		public float FlatPucker { get; set; }
		public float Funneler { get; set; }
		public float JawDrop { get; set; }
		public float JawLeft { get; set; }
		public float JawRight { get; set; }
		public float LeftBrowLowerer { get; set; }
		public float LeftCheekPuff { get; set; }
		public float LeftCheekRaiser { get; set; }
		public float LeftDimpler { get; set; }
		public float LeftEyeClosed { get; set; }
		public float LeftEyeUpperLidRaiser { get; set; }
		public float LeftInnerBrowRaiser { get; set; }
		public float LeftLipCornerDown { get; set; }
		public float LeftLipCornerPuller { get; set; }
		public float LeftLipStretcher { get; set; }
		public float LeftLowerLipDepressor { get; set; }
		public float LeftNoseWrinkler { get; set; }
		public float LeftOuterBrowRaiser { get; set; }
		public float LeftUpperLipRaiser { get; set; }
		public float LipPresser { get; set; }
		public float LipsTogether { get; set; }
		public float LowerLipSuck { get; set; }
		public float MouthLeft { get; set; }
		public float MouthRight { get; set; }
		public float Pucker { get; set; }
		public float RightBrowLowerer { get; set; }
		public float RightCheekPuff { get; set; }
		public float RightCheekRaiser { get; set; }
		public float RightDimpler { get; set; }
		public float RightEyeClosed { get; set; }
		public float RightEyeUpperLidRaiser { get; set; }
		public float RightInnerBrowRaiser { get; set; }
		public float RightLipCornerDown { get; set; }
		public float RightLipCornerPuller { get; set; }
		public float RightLipStretcher { get; set; }
		public float RightLowerLipDepressor { get; set; }
		public float RightNoseWrinkler { get; set; }
		public float RightOuterBrowRaiser { get; set; }
		public float RightUpperLipRaiser { get; set; }
		public float TongueDown { get; set; }
		public float TongueOut { get; set; }
		public float TongueUp { get; set; }
		public float UpperLipSuck { get; set; }
	}
	
	public interface FaceInstance : ICreatableInstance
	{
	}
	
	public interface Decal : FaceInstance, ICreatableInstance
	{
	}
	
	public interface Texture : Decal, ICreatableInstance
	{
	}
	
	public interface FacialAnimationRecordingService : ICreatableInstance
	{
	}
	
	public interface FacialAnimationStreamingServiceStats : ICreatableInstance
	{
	}
	
	public interface FacialAnimationStreamingServiceV2 : ICreatableInstance
	{
	}
	
	public interface Feature : ICreatableInstance
	{
	}
	
	public interface File : ICreatableInstance
	{
		public string GetBinaryContents();
		public string GetTemporaryId();
	}
	
	public interface Fire : ICreatableInstance
	{
	}
	
	public interface FloatCurve : ICreatableInstance
	{
	}
	
	public interface Folder : ICreatableInstance
	{
	}
	
	public interface ForceField : ICreatableInstance
	{
	}
	
	public interface GamePassService : ICreatableInstance
	{
	}
	
	public partial interface GameSettings : ICreatableInstance
	{
		public bool VideoCaptureEnabled { get; set; }
	}
	
	public interface GamepadService : ICreatableInstance
	{
	}
	
	public interface GenericChallengeService : ICreatableInstance
	{
	}
	
	public interface GeometryService : ICreatableInstance
	{
	}
	
	public interface GetTextBoundsParams : ICreatableInstance
	{
	}
	
	public interface GlobalDataStore : ICreatableInstance
	{
	}
	
	public interface DataStore : GlobalDataStore, ICreatableInstance
	{
	}
	
	public interface OrderedDataStore : GlobalDataStore, ICreatableInstance
	{
	}
	
	public interface GroupService : ICreatableInstance
	{
	}
	
	public interface GuiBase2d : GuiBase, ICreatableInstance
	{
	}
	
	public interface GuiObject : GuiBase2d, ICreatableInstance
	{
	}
	
	public interface CanvasGroup : GuiObject, ICreatableInstance
	{
	}
	
	public interface Frame : GuiObject, ICreatableInstance
	{
	}
	
	public interface GuiButton : GuiObject, ICreatableInstance
	{
	}
	
	public interface ImageButton : GuiButton, ICreatableInstance
	{
	}
	
	public interface TextButton : GuiButton, ICreatableInstance
	{
	}
	
	public interface ImageLabel : GuiLabel, ICreatableInstance
	{
	}
	
	public interface TextLabel : GuiLabel, ICreatableInstance
	{
	}
	
	public interface ScrollingFrame : GuiObject, ICreatableInstance
	{
	}
	
	public interface TextBox : GuiObject, ICreatableInstance
	{
	}
	
	public interface VideoFrame : GuiObject, ICreatableInstance
	{
	}
	
	public interface ViewportFrame : GuiObject, ICreatableInstance
	{
	}
	
	public interface LayerCollector : GuiBase2d, ICreatableInstance
	{
	}
	
	public interface BillboardGui : LayerCollector, ICreatableInstance
	{
	}
	
	public interface PluginGui : LayerCollector, ICreatableInstance
	{
		public string Title { get; set; }
		public void BindToClose(Action? function);
		public Vector2 GetRelativeMousePosition();
		public ScriptSignal<object> PluginDragDropped { get; }
		public ScriptSignal<object> PluginDragEntered { get; }
		public ScriptSignal<object> PluginDragLeft { get; }
		public ScriptSignal<object> PluginDragMoved { get; }
		public ScriptSignal WindowFocusReleased { get; }
		public ScriptSignal WindowFocused { get; }
	}
	
	public interface DockWidgetPluginGui : PluginGui, ICreatableInstance
	{
	}
	
	public interface QWidgetPluginGui : PluginGui, ICreatableInstance
	{
	}
	
	public interface ScreenGui : LayerCollector, ICreatableInstance
	{
	}
	
	public interface SurfaceGuiBase : LayerCollector, ICreatableInstance
	{
	}
	
	public interface AdGui : SurfaceGuiBase, ICreatableInstance
	{
	}
	
	public interface SurfaceGui : SurfaceGuiBase, ICreatableInstance
	{
	}
	
	public interface GuiBase3d : GuiBase, ICreatableInstance
	{
	}
	
	public interface FloorWire : GuiBase3d, ICreatableInstance
	{
	}
	
	public interface InstanceAdornment : GuiBase3d, ICreatableInstance
	{
	}
	
	public interface SelectionBox : InstanceAdornment, ICreatableInstance
	{
	}
	
	public interface PVAdornment : GuiBase3d, ICreatableInstance
	{
	}
	
	public interface HandleAdornment : PVAdornment, ICreatableInstance
	{
	}
	
	public interface BoxHandleAdornment : HandleAdornment, ICreatableInstance
	{
	}
	
	public interface ConeHandleAdornment : HandleAdornment, ICreatableInstance
	{
	}
	
	public interface CylinderHandleAdornment : HandleAdornment, ICreatableInstance
	{
	}
	
	public interface ImageHandleAdornment : HandleAdornment, ICreatableInstance
	{
	}
	
	public interface LineHandleAdornment : HandleAdornment, ICreatableInstance
	{
	}
	
	public interface SphereHandleAdornment : HandleAdornment, ICreatableInstance
	{
	}
	
	public interface WireframeHandleAdornment : HandleAdornment, ICreatableInstance
	{
	}
	
	public interface ParabolaAdornment : PVAdornment, ICreatableInstance
	{
	}
	
	public interface SelectionSphere : PVAdornment, ICreatableInstance
	{
	}
	
	public interface PartAdornment : GuiBase3d, ICreatableInstance
	{
	}
	
	public interface ArcHandles : HandlesBase, ICreatableInstance
	{
	}
	
	public interface Handles : HandlesBase, ICreatableInstance
	{
	}
	
	public interface SurfaceSelection : PartAdornment, ICreatableInstance
	{
	}
	
	public interface SelectionLasso : GuiBase3d, ICreatableInstance
	{
	}
	
	public interface SelectionPartLasso : SelectionLasso, ICreatableInstance
	{
	}
	
	public interface SelectionPointLasso : SelectionLasso, ICreatableInstance
	{
	}
	
	public interface Path2D : GuiBase, ICreatableInstance
	{
	}
	
	public interface GuiService : ICreatableInstance
	{
	}
	
	public interface HapticService : ICreatableInstance
	{
	}
	
	public interface HeightmapImporterService : ICreatableInstance
	{
	}
	
	public interface HiddenSurfaceRemovalAsset : ICreatableInstance
	{
	}
	
	public interface Highlight : ICreatableInstance
	{
	}
	
	public interface HttpService : ICreatableInstance
	{
	}
	
	public interface Humanoid : ICreatableInstance
	{
	}
	
	public interface HumanoidDescription : ICreatableInstance
	{
	}
	
	public interface IKControl : ICreatableInstance
	{
	}
	
	public interface IXPService : ICreatableInstance
	{
	}
	
	public interface IncrementalPatchBuilder : ICreatableInstance
	{
	}
	
	public interface InputObject : ICreatableInstance
	{
	}
	
	public interface InsertService : ICreatableInstance
	{
	}
	
	public interface InternalSyncItem : ICreatableInstance
	{
	}
	
	public interface JointInstance : ICreatableInstance
	{
	}
	
	public interface DynamicRotate : JointInstance, ICreatableInstance
	{
	}
	
	public interface Glue : JointInstance, ICreatableInstance
	{
	}
	
	public interface Motor : JointInstance, ICreatableInstance
	{
	}
	
	public interface Motor6D : Motor, ICreatableInstance
	{
	}
	
	public interface VelocityMotor : JointInstance, ICreatableInstance
	{
	}
	
	public interface JointsService : ICreatableInstance
	{
	}
	
	public interface Keyframe : ICreatableInstance
	{
	}
	
	public interface KeyframeMarker : ICreatableInstance
	{
	}
	
	public partial interface KeyframeSequenceProvider : ICreatableInstance
	{
		public Instance GetKeyframeSequence(string assetId);
		public Instance GetKeyframeSequenceById(long assetId, bool useCache);
	}
	
	public interface Light : ICreatableInstance
	{
	}
	
	public interface PointLight : Light, ICreatableInstance
	{
	}
	
	public interface SpotLight : Light, ICreatableInstance
	{
	}
	
	public interface SurfaceLight : Light, ICreatableInstance
	{
	}
	
	public interface Lighting : ICreatableInstance
	{
	}
	
	public interface LinkingService : ICreatableInstance
	{
	}
	
	public interface LiveScriptingService : ICreatableInstance
	{
	}
	
	public interface LocalizationService : ICreatableInstance
	{
	}
	
	public interface LocalizationTable : ICreatableInstance
	{
	}
	
	public interface LodDataEntity : ICreatableInstance
	{
	}
	
	public interface LogReporterService : ICreatableInstance
	{
	}
	
	public interface LogService : ICreatableInstance
	{
	}
	
	public interface LuaSettings : ICreatableInstance
	{
	}
	
	public interface LuaSourceContainer : ICreatableInstance
	{
	}
	
	public interface BaseScript : LuaSourceContainer, ICreatableInstance
	{
	}
	
	public interface Script : BaseScript, ICreatableInstance
	{
		public string Source { get; set; }
	}
	
	public interface ModuleScript : LuaSourceContainer, ICreatableInstance
	{
		public string Source { get; set; }
	}
	
	public interface MarkerCurve : ICreatableInstance
	{
	}
	
	public interface MarketplaceService : ICreatableInstance
	{
	}
	
	public interface MaterialGenerationService : ICreatableInstance
	{
	}
	
	public interface MaterialGenerationSession : ICreatableInstance
	{
	}
	
	public interface MaterialService : ICreatableInstance
	{
	}
	
	public interface MaterialVariant : ICreatableInstance
	{
		public string ColorMap { get; set; }
		public string MetalnessMap { get; set; }
		public string NormalMap { get; set; }
		public string RoughnessMap { get; set; }
	}
	
	public interface MemStorageConnection : ICreatableInstance
	{
		public void Disconnect();
	}
	
	public interface MemoryStoreHashMap : ICreatableInstance
	{
	}
	
	public interface MemoryStoreQueue : ICreatableInstance
	{
	}
	
	public interface MemoryStoreService : ICreatableInstance
	{
	}
	
	public interface MemoryStoreSortedMap : ICreatableInstance
	{
	}
	
	public interface MessageBusConnection : ICreatableInstance
	{
	}
	
	public interface MessageBusService : ICreatableInstance
	{
	}
	
	public interface MessagingService : ICreatableInstance
	{
	}
	
	public interface MetaBreakpoint : ICreatableInstance
	{
	}
	
	public interface MetaBreakpointContext : ICreatableInstance
	{
	}
	
	public interface MetaBreakpointManager : ICreatableInstance
	{
	}
	
	public interface Mouse : ICreatableInstance
	{
	}
	
	public interface PluginMouse : Mouse, ICreatableInstance
	{
		public ScriptSignal<Instance[]> DragEnter { get; }
	}
	
	public interface MultipleDocumentInterfaceInstance : ICreatableInstance
	{
	}
	
	public interface NetworkMarker : ICreatableInstance
	{
	}
	
	public partial interface NetworkPeer : ICreatableInstance
	{
		public void SetOutgoingKBPSLimit(int limit);
	}
	
	public partial interface NetworkClient : NetworkPeer, ICreatableInstance
	{
	}
	
	public partial interface NetworkServer : NetworkPeer, ICreatableInstance
	{
	}
	
	public interface NetworkReplicator : ICreatableInstance
	{
		public Instance GetPlayer();
	}
	
	public interface ClientReplicator : NetworkReplicator, ICreatableInstance
	{
	}
	
	public interface ServerReplicator : NetworkReplicator, ICreatableInstance
	{
	}
	
	public interface NetworkSettings : ICreatableInstance
	{
		public bool HttpProxyEnabled { get; }
		public string HttpProxyURL { get; }
		public double IncomingReplicationLag { get; set; }
		public bool PrintJoinSizeBreakdown { get; set; }
		public bool PrintPhysicsErrors { get; set; }
		public bool PrintStreamInstanceQuota { get; set; }
		public bool RandomizeJoinInstanceOrder { get; set; }
		public bool RenderStreamedRegions { get; set; }
		public bool ShowActiveAnimationAsset { get; set; }
	}
	
	public interface NoCollisionConstraint : ICreatableInstance
	{
	}
	
	public interface Noise : ICreatableInstance
	{
	}
	
	public interface OmniRecommendationsService : ICreatableInstance
	{
	}
	
	public interface OpenCloudApiV1 : ICreatableInstance
	{
	}
	
	public interface OpenCloudService : ICreatableInstance
	{
	}
	
	public interface PVInstance : ICreatableInstance
	{
	}
	
	public partial interface BasePart : PVInstance, ICreatableInstance
	{
	}
	
	public interface FormFactorPart : BasePart, ICreatableInstance
	{
	}
	
	public interface Part : FormFactorPart, ICreatableInstance
	{
	}
	
	public interface Platform : Part, ICreatableInstance
	{
	}
	
	public interface Seat : Part, ICreatableInstance
	{
	}
	
	public interface SkateboardPlatform : Part, ICreatableInstance
	{
	}
	
	public interface SpawnLocation : Part, ICreatableInstance
	{
	}
	
	public partial interface Terrain : BasePart, ICreatableInstance
	{
		public void ConvertToSmooth();
	}
	
	public interface TriangleMeshPart : BasePart, ICreatableInstance
	{
	}
	
	public interface MeshPart : TriangleMeshPart, ICreatableInstance
	{
	}
	
	public interface PartOperation : TriangleMeshPart, ICreatableInstance
	{
	}
	
	public interface TrussPart : BasePart, ICreatableInstance
	{
	}
	
	public interface VehicleSeat : BasePart, ICreatableInstance
	{
	}
	
	public interface Model : PVInstance, ICreatableInstance
	{
		public Enum.ModelLevelOfDetail LevelOfDetail { get; set; }
	}
	
	public interface Actor : Model, ICreatableInstance
	{
	}
	
	public interface BackpackItem : Model, ICreatableInstance
	{
	}
	
	public interface Tool : BackpackItem, ICreatableInstance
	{
	}
	
	public partial interface WorldRoot : Model, ICreatableInstance
	{
		public void IKMoveTo(BasePart part, CFrame target, float? translateStiffness, float? rotateStiffness, Enum.IKCollisionsMode? collisionsMode);
		public void StepPhysics(float dt, Instance[]? parts);
	}
	
	public partial interface Workspace : WorldRoot, ICreatableInstance
	{
		public void BreakJoints(Instance[] objects);
		public void MakeJoints(Instance[] objects);
		public void ZoomToExtents();
	}
	
	public interface PackageLink : ICreatableInstance
	{
	}
	
	public interface PackageService : ICreatableInstance
	{
	}
	
	public interface PackageUIService : ICreatableInstance
	{
	}
	
	public interface Pages : ICreatableInstance
	{
	}
	
	public interface DataStoreKeyPages : Pages, ICreatableInstance
	{
	}
	
	public interface DataStoreListingPages : Pages, ICreatableInstance
	{
	}
	
	public interface ParticleEmitter : ICreatableInstance
	{
	}
	
	public interface PatchMapping : ICreatableInstance
	{
	}
	
	public interface Path : ICreatableInstance
	{
	}
	
	public interface PathfindingLink : ICreatableInstance
	{
	}
	
	public interface PathfindingModifier : ICreatableInstance
	{
	}
	
	public interface PathfindingService : ICreatableInstance
	{
	}
	
	public interface PausedState : ICreatableInstance
	{
	}
	
	public interface PausedStateBreakpoint : PausedState, ICreatableInstance
	{
	}
	
	public interface PausedStateException : PausedState, ICreatableInstance
	{
	}
	
	public interface PhysicsService : ICreatableInstance
	{
	}
	
	public interface PhysicsSettings : ICreatableInstance
	{
		public bool AllowSleep { get; set; }
		public bool AreAnchorsShown { get; set; }
		public bool AreAssembliesShown { get; set; }
		public bool AreAwakePartsHighlighted { get; set; }
		public bool AreBodyTypesShown { get; set; }
		public bool AreContactIslandsShown { get; set; }
		public bool AreContactPointsShown { get; set; }
		public bool AreJointCoordinatesShown { get; set; }
		public bool AreMechanismsShown { get; set; }
		public bool AreModelCoordsShown { get; set; }
		public bool AreNonAnchorsShown { get; set; }
		public bool AreOwnersShown { get; set; }
		public bool ArePartCoordsShown { get; set; }
		public bool AreRegionsShown { get; set; }
		public bool AreTerrainReplicationRegionsShown { get; set; }
		public bool AreUnalignedPartsShown { get; set; }
		public bool AreWorldCoordsShown { get; set; }
		public bool DisableCSGv2 { get; set; }
		public bool DisableCSGv3ForPlugins { get; set; }
		public bool IsInterpolationThrottleShown { get; set; }
		public bool IsReceiveAgeShown { get; set; }
		public bool IsTreeShown { get; set; }
		public Enum.EnviromentalPhysicsThrottle PhysicsEnvironmentalThrottle { get; set; }
		public bool ShowDecompositionGeometry { get; set; }
		public double ThrottleAdjustTime { get; set; }
		public bool UseCSGv2 { get; set; }
	}
	
	public interface PlacesService : ICreatableInstance
	{
	}
	
	public interface PlatformCloudStorageService : ICreatableInstance
	{
	}
	
	public interface PlatformFriendsService : ICreatableInstance
	{
	}
	
	public partial interface Player : ICreatableInstance
	{
		public void SetAccountAge(int accountAge);
		public void SetSuperSafeChat(bool value);
	}
	
	public interface PlayerHydrationService : ICreatableInstance
	{
	}
	
	public interface PlayerScripts : ICreatableInstance
	{
	}
	
	public interface PlayerViewService : ICreatableInstance
	{
	}
	
	public partial interface Players : ICreatableInstance
	{
		public void Chat(string message);
		public void SetChatStyle(Enum.ChatStyle? style);
		public void TeamChat(string message);
	}
	
	public interface Plugin : ICreatableInstance
	{
		public bool CollisionEnabled { get; }
		public float GridSize { get; }
		public void Activate(bool exclusiveMouse);
		public PluginAction CreatePluginAction(string actionId, string text, string statusTip, string iconName, bool? allowBinding);
		public PluginMenu CreatePluginMenu(string id, string title, string icon);
		public PluginToolbar CreateToolbar(string name);
		public void Deactivate();
		public Enum.JointCreationMode GetJoinMode();
		public PluginMouse GetMouse();
		public Enum.RibbonTool GetSelectedRibbonTool();
		public object? GetSetting(string key);
		public long GetStudioUserId();
		public Instance Intersect(Instance[] objects);
		public bool IsActivated();
		public bool IsActivatedWithExclusiveMouse();
		public Instance[] Negate(Instance[] objects);
		public void OpenScript(LuaSourceContainer script, int? lineNumber);
		public void OpenWikiPage(string url);
		public void SaveSelectedToRoblox();
		public void SelectRibbonTool(Enum.RibbonTool tool, UDim2 position);
		public Instance[] Separate(Instance[] objects);
		public void SetSetting(string key, object? value);
		public void StartDrag(object dragData);
		public Instance Union(Instance[] objects);
		public DockWidgetPluginGui CreateDockWidgetPluginGui(string pluginGuiId, DockWidgetPluginGuiInfo dockWidgetPluginGuiInfo);
		public Instance ImportFbxAnimation(Instance rigModel, bool? isR15);
		public Instance ImportFbxRig(bool? isR15);
		public long PromptForExistingAssetId(string assetType);
		public bool PromptSaveSelection(string suggestedFileName);
		public ScriptSignal Deactivation { get; }
		public ScriptSignal Unloading { get; }
	}
	
	public interface PluginAction : ICreatableInstance
	{
		public string ActionId { get; }
		public bool AllowBinding { get; }
		public string StatusTip { get; }
		public string Text { get; }
		public ScriptSignal Triggered { get; }
	}
	
	public interface PluginCapabilities : ICreatableInstance
	{
	}
	
	public interface PluginDebugService : ICreatableInstance
	{
	}
	
	public interface PluginDragEvent : ICreatableInstance
	{
		public string Data { get; }
		public string MimeType { get; }
		public Vector2 Position { get; }
		public string Sender { get; }
	}
	
	public interface PluginGuiService : ICreatableInstance
	{
	}
	
	public interface PluginManagementService : ICreatableInstance
	{
	}
	
	public partial interface PluginManagerInterface : ICreatableInstance
	{
		public Instance CreatePlugin();
		public void ExportPlace(string filePath);
		public void ExportSelection(string filePath);
	}
	
	public interface PluginMenu : ICreatableInstance
	{
		public string Icon { get; set; }
		public string Title { get; set; }
		public void AddAction(Instance action);
		public void AddMenu(Instance menu);
		public Instance AddNewAction(string actionId, string text, string icon);
		public void AddSeparator();
		public void Clear();
		public Instance ShowAsync();
	}
	
	public interface PluginPolicyService : ICreatableInstance
	{
	}
	
	public interface PluginToolbar : ICreatableInstance
	{
		public PluginToolbarButton CreateButton(string buttonId, string tooltip, string iconname, string text);
	}
	
	public interface PluginToolbarButton : ICreatableInstance
	{
		public bool ClickableWhenViewportHidden { get; set; }
		public bool Enabled { get; set; }
		public string Icon { get; set; }
		public void SetActive(bool active);
		public ScriptSignal Click { get; }
	}
	
	public interface PolicyService : ICreatableInstance
	{
	}
	
	public interface PoseBase : ICreatableInstance
	{
	}
	
	public interface NumberPose : PoseBase, ICreatableInstance
	{
	}
	
	public interface Pose : PoseBase, ICreatableInstance
	{
	}
	
	public interface PostEffect : ICreatableInstance
	{
	}
	
	public interface BloomEffect : PostEffect, ICreatableInstance
	{
	}
	
	public interface BlurEffect : PostEffect, ICreatableInstance
	{
	}
	
	public interface ColorCorrectionEffect : PostEffect, ICreatableInstance
	{
	}
	
	public interface DepthOfFieldEffect : PostEffect, ICreatableInstance
	{
	}
	
	public interface SunRaysEffect : PostEffect, ICreatableInstance
	{
	}
	
	public interface ProjectFolderService : ICreatableInstance
	{
	}
	
	public interface ProximityPrompt : ICreatableInstance
	{
	}
	
	public interface ProximityPromptService : ICreatableInstance
	{
	}
	
	public interface PublishService : ICreatableInstance
	{
	}
	
	public interface RTAnimationTracker : ICreatableInstance
	{
	}
	
	public interface ReflectionService : ICreatableInstance
	{
	}
	
	public interface RemoteCursorService : ICreatableInstance
	{
	}
	
	public interface RemoteFunction : ICreatableInstance
	{
	}
	
	public interface RenderSettings : ICreatableInstance
	{
		public int AutoFRMLevel { get; set; }
		public bool EagerBulkExecution { get; set; }
		public Enum.QualityLevel EditQualityLevel { get; set; }
		public bool EnableVRMode { get; set; }
		public bool ExportMergeByMaterial { get; set; }
		public Enum.FramerateManagerMode FrameRateManager { get; set; }
		public Enum.GraphicsMode GraphicsMode { get; set; }
		public int MeshCacheSize { get; set; }
		public Enum.MeshPartDetailLevel MeshPartDetailLevel { get; set; }
		public Enum.QualityLevel QualityLevel { get; set; }
		public bool ReloadAssets { get; set; }
		public bool RenderCSGTrianglesDebug { get; set; }
		public bool ShowBoundingBoxes { get; set; }
		public Enum.ViewMode ViewMode { get; set; }
		public int GetMaxQualityLevel();
	}
	
	public interface RenderingTest : ICreatableInstance
	{
		public CFrame CFrame { get; set; }
		public int ComparisonDiffThreshold { get; set; }
		public Enum.RenderingTestComparisonMethod ComparisonMethod { get; set; }
		public float ComparisonPsnrThreshold { get; set; }
		public string Description { get; set; }
		public float FieldOfView { get; set; }
		public bool PerfTest { get; set; }
		public bool QualityAuto { get; set; }
		public int QualityLevel { get; set; }
		public int RenderingTestFrameCount { get; set; }
		public bool ShouldSkip { get; set; }
		public string Ticket { get; set; }
		public int Timeout { get; set; }
		public void RenderdocTriggerCapture();
	}
	
	public interface ReplicatedFirst : ICreatableInstance
	{
	}
	
	public interface RibbonNotificationService : ICreatableInstance
	{
	}
	
	public interface RobloxPluginGuiService : ICreatableInstance
	{
	}
	
	public interface RomarkService : ICreatableInstance
	{
	}
	
	public interface RotationCurve : ICreatableInstance
	{
	}
	
	public partial interface RunService : ICreatableInstance
	{
		public Enum.RunState RunState { get; set; }
		public bool IsEdit();
		public void Pause();
		public void Reset();
		public void Run();
		public void Stop();
	}
	
	public interface SafetyService : ICreatableInstance
	{
	}
	
	public interface ScreenshotHud : ICreatableInstance
	{
	}
	
	public interface SyncScriptBuilder : ScriptBuilder, ICreatableInstance
	{
	}
	
	public interface ScriptChangeService : ICreatableInstance
	{
	}
	
	public partial interface ScriptContext : ICreatableInstance
	{
		public void SetTimeout(double seconds);
	}
	
	public interface ScriptDebugger : ICreatableInstance
	{
		public int CurrentLine { get; }
		public bool IsDebugging { get; }
		public bool IsPaused { get; }
		public Instance? Script { get; }
		public Instance AddWatch(string expression);
		public Instance[] GetBreakpoints();
		public object GetGlobals(int? stackFrame);
		public object GetLocals(int? stackFrame);
		public object[] GetStack();
		public object GetUpvalues(int? stackFrame);
		public object? GetWatchValue(Instance watch);
		public Instance[] GetWatches();
		public Instance SetBreakpoint(int line, bool isContextDependentBreakpoint);
		public void SetGlobal(string name, object? value, int stackFrame);
		public void SetLocal(string name, object? value, int? stackFrame);
		public void SetUpvalue(string name, object? value, int? stackFrame);
		public ScriptSignal<Instance> BreakpointAdded { get; }
		public ScriptSignal<Instance> BreakpointRemoved { get; }
		public ScriptSignal<int, Enum.BreakReason> EncounteredBreak { get; }
		public ScriptSignal Resuming { get; }
		public ScriptSignal<Instance> WatchAdded { get; }
		public ScriptSignal<Instance> WatchRemoved { get; }
	}
	
	public partial interface ScriptDocument : ICreatableInstance
	{
		public string GetLine(int? lineIndex);
		public int GetLineCount();
		public LuaSourceContainer GetScript();
		public string GetSelectedText();
		public object[] GetSelection();
		public object[] GetSelectionEnd();
		public object[] GetSelectionStart();
		public string GetText(int? startLine, int? startCharacter, int? endLine, int? endCharacter);
		public object[] GetViewport();
		public bool HasSelectedText();
		public bool IsCommandBar();
		public object[] CloseAsync();
		public object[] EditTextAsync(string newText, int startLine, int startCharacter, int endLine, int endCharacter);
		public object[] ForceSetSelectionAsync(int cursorLine, int cursorCharacter, int? anchorLine, int? anchorCharacter);
		public object[] RequestSetSelectionAsync(int cursorLine, int cursorCharacter, int? anchorLine, int? anchorCharacter);
		public ScriptSignal<long, long, long, long> SelectionChanged { get; }
		public ScriptSignal<long, long> ViewportChanged { get; }
	}
	
	public partial interface ScriptEditorService : ICreatableInstance
	{
		public void DeregisterAutocompleteCallback(string name);
		public void DeregisterScriptAnalysisCallback(string name);
		public ScriptDocument FindScriptDocument(LuaSourceContainer script);
		public string GetEditorSource(LuaSourceContainer script);
		public Instance[] GetScriptDocuments();
		public void RegisterAutocompleteCallback(string name, int priority, Action callbackFunction);
		public void RegisterScriptAnalysisCallback(string name, int priority, Action callbackFunction);
		public object[] OpenScriptDocumentAsync(LuaSourceContainer script);
		public void UpdateSourceAsync(LuaSourceContainer script, Action callback);
		public ScriptSignal<ScriptDocument, object?> TextDocumentDidChange { get; }
		public ScriptSignal<ScriptDocument> TextDocumentDidClose { get; }
		public ScriptSignal<ScriptDocument> TextDocumentDidOpen { get; }
	}
	
	public partial interface ScriptProfilerService : ICreatableInstance
	{
		public void ClientRequestData(Player player);
		public void ClientStart(Player player, int? frequency);
		public void ClientStop(Player player);
		public object DeserializeJSON(string? jsonString);
		public void ServerRequestData();
		public void ServerStart(int? frequency);
		public void ServerStop();
		public ScriptSignal<Player, string> OnNewData { get; }
	}
	
	public interface ScriptRegistrationService : ICreatableInstance
	{
	}
	
	public interface Selection : ICreatableInstance
	{
		public float SelectionThickness { get; }
		public void Add(Instance[] instancesToAdd);
		public Instance[] Get();
		public void Remove(Instance[] instancesToRemove);
		public void Set(Instance[] selection);
		public ScriptSignal SelectionChanged { get; }
	}
	
	public interface SensorBase : ICreatableInstance
	{
	}
	
	public interface AtmosphereSensor : SensorBase, ICreatableInstance
	{
	}
	
	public interface BuoyancySensor : SensorBase, ICreatableInstance
	{
	}
	
	public interface ControllerPartSensor : ControllerSensor, ICreatableInstance
	{
	}
	
	public interface ServerScriptService : ICreatableInstance
	{
	}
	
	public interface ServiceProvider : ICreatableInstance
	{
	}
	
	public partial interface DataModel : ServiceProvider, ICreatableInstance
	{
		public object[] GetJobsInfo();
		public Instance[] GetObjects(string url);
		public void SetPlaceId(long placeId);
		public void SetUniverseId(long universeId);
	}
	
	public interface GlobalSettings : GenericSettings, ICreatableInstance
	{
		public bool GetFFlag(string name);
		public string GetFVariable(string name);
	}
	
	public interface UserSettings : GenericSettings, ICreatableInstance
	{
	}
	
	public interface ServiceVisibilityService : ICreatableInstance
	{
	}
	
	public interface SessionService : ICreatableInstance
	{
	}
	
	public interface SharedTableRegistry : ICreatableInstance
	{
	}
	
	public interface ShorelineUpgraderService : ICreatableInstance
	{
	}
	
	public interface Sky : ICreatableInstance
	{
	}
	
	public interface Smoke : ICreatableInstance
	{
	}
	
	public interface SmoothVoxelsUpgraderService : ICreatableInstance
	{
	}
	
	public interface SocialService : ICreatableInstance
	{
	}
	
	public interface Sound : ICreatableInstance
	{
	}
	
	public interface SoundEffect : ICreatableInstance
	{
	}
	
	public interface ChorusSoundEffect : SoundEffect, ICreatableInstance
	{
	}
	
	public interface CompressorSoundEffect : SoundEffect, ICreatableInstance
	{
	}
	
	public interface ChannelSelectorSoundEffect : CustomSoundEffect, ICreatableInstance
	{
	}
	
	public interface DistortionSoundEffect : SoundEffect, ICreatableInstance
	{
	}
	
	public interface EchoSoundEffect : SoundEffect, ICreatableInstance
	{
	}
	
	public interface EqualizerSoundEffect : SoundEffect, ICreatableInstance
	{
	}
	
	public interface FlangeSoundEffect : SoundEffect, ICreatableInstance
	{
	}
	
	public interface PitchShiftSoundEffect : SoundEffect, ICreatableInstance
	{
	}
	
	public interface ReverbSoundEffect : SoundEffect, ICreatableInstance
	{
	}
	
	public interface TremoloSoundEffect : SoundEffect, ICreatableInstance
	{
	}
	
	public interface SoundGroup : ICreatableInstance
	{
	}
	
	public partial interface SoundService : ICreatableInstance
	{
		public void OpenAttenuationCurveEditor(Instance[] selectedCurveObjects);
	}
	
	public interface Sparkles : ICreatableInstance
	{
	}
	
	public interface StackFrame : ICreatableInstance
	{
	}
	
	public interface StarterPlayer : ICreatableInstance
	{
	}
	
	public interface StartupMessageService : ICreatableInstance
	{
	}
	
	public interface Stats : ICreatableInstance
	{
	}
	
	public interface StatsItem : ICreatableInstance
	{
		public double GetValue();
		public string GetValueString();
	}
	
	public interface RunningAverageItemDouble : StatsItem, ICreatableInstance
	{
	}
	
	public interface RunningAverageItemInt : StatsItem, ICreatableInstance
	{
	}
	
	public interface RunningAverageTimeIntervalItem : StatsItem, ICreatableInstance
	{
	}
	
	public interface TotalCountTimeIntervalItem : StatsItem, ICreatableInstance
	{
	}
	
	public interface StreamingService : ICreatableInstance
	{
	}
	
	public interface StudioAssetService : ICreatableInstance
	{
	}
	
	public interface StudioAttachment : ICreatableInstance
	{
	}
	
	public interface StudioCallout : ICreatableInstance
	{
	}
	
	public interface StudioData : ICreatableInstance
	{
	}
	
	public interface StudioDeviceEmulatorService : ICreatableInstance
	{
	}
	
	public interface StudioWidget : StudioObjectBase, ICreatableInstance
	{
	}
	
	public interface StudioPublishService : ICreatableInstance
	{
	}
	
	public interface StudioSdkService : ICreatableInstance
	{
	}
	
	public interface StudioService : ICreatableInstance
	{
		public Instance? ActiveScript { get; }
		public bool DraggerSolveConstraints { get; }
		public bool DrawConstraintsOnTop { get; }
		public float GridSize { get; }
		public float RotateIncrement { get; }
		public bool ShowConstraintDetails { get; }
		public string StudioLocaleId { get; }
		public bool UseLocalSpace { get; set; }
		public object GetClassIcon(string className);
		public long GetUserId();
		public RaycastResult GizmoRaycast(Vector3 origin, Vector3 direction, RaycastParams? raycastParams);
		public Instance PromptImportFile(object[]? fileTypeFilter);
		public Instance[] PromptImportFiles(object[]? fileTypeFilter);
	}
	
	public interface StudioTheme : ICreatableInstance
	{
		public Color3 GetColor(Enum.StudioStyleGuideColor styleguideitem, Enum.StudioStyleGuideModifier? modifier);
	}
	
	public interface StudioWidgetsService : ICreatableInstance
	{
	}
	
	public interface StyleBase : ICreatableInstance
	{
	}
	
	public interface StyleRule : StyleBase, ICreatableInstance
	{
	}
	
	public interface StyleSheet : StyleBase, ICreatableInstance
	{
	}
	
	public interface StyleDerive : ICreatableInstance
	{
	}
	
	public interface StyleLink : ICreatableInstance
	{
	}
	
	public interface StylingService : ICreatableInstance
	{
	}
	
	public interface SurfaceAppearance : ICreatableInstance
	{
		public Enum.AlphaMode AlphaMode { get; set; }
		public string ColorMap { get; set; }
		public string MetalnessMap { get; set; }
		public string NormalMap { get; set; }
		public string RoughnessMap { get; set; }
	}
	
	public interface TaskScheduler : ICreatableInstance
	{
		public double SchedulerDutyCycle { get; }
		public double SchedulerRate { get; }
		public Enum.ThreadPoolConfig ThreadPoolConfig { get; set; }
		public int ThreadPoolSize { get; }
	}
	
	public interface Team : ICreatableInstance
	{
	}
	
	public interface TeamCreateData : ICreatableInstance
	{
	}
	
	public interface TeamCreateService : ICreatableInstance
	{
	}
	
	public interface Teams : ICreatableInstance
	{
	}
	
	public interface TeleportAsyncResult : ICreatableInstance
	{
	}
	
	public interface TeleportOptions : ICreatableInstance
	{
	}
	
	public interface TeleportService : ICreatableInstance
	{
	}
	
	public interface TerrainDetail : ICreatableInstance
	{
		public string ColorMap { get; set; }
		public string MetalnessMap { get; set; }
		public string NormalMap { get; set; }
		public string RoughnessMap { get; set; }
	}
	
	public partial interface TerrainRegion : ICreatableInstance
	{
		public void ConvertToSmooth();
	}
	
	public interface TestService : ICreatableInstance
	{
		public bool AutoRuns { get; set; }
		public string Description { get; set; }
		public int ErrorCount { get; }
		public bool ExecuteWithStudioRun { get; set; }
		public bool IsSleepAllowed { get; set; }
		public int NumberOfPlayers { get; set; }
		public double SimulateSecondsLag { get; set; }
		public int TestCount { get; }
		public double Timeout { get; set; }
		public int WarnCount { get; }
		public void Check(bool condition, string description, Instance? source, int? line);
		public void Checkpoint(string text, Instance? source, int? line);
		public void Done();
		public void Error(string description, Instance? source, int? line);
		public void Fail(string description, Instance? source, int? line);
		public void Message(string text, Instance? source, int? line);
		public void Require(bool condition, string description, Instance? source, int? line);
		public object ScopeTime();
		public void Warn(bool condition, string description, Instance? source, int? line);
		public bool isFeatureEnabled(string name);
		public void Run();
		public ScriptSignal<bool, string, Instance, int> ServerCollectConditionalResult { get; }
		public ScriptSignal<string, Instance, int> ServerCollectResult { get; }
	}
	
	public interface TextChannel : ICreatableInstance
	{
	}
	
	public interface TextChatCommand : ICreatableInstance
	{
	}
	
	public interface BubbleChatConfiguration : TextChatConfigurations, ICreatableInstance
	{
	}
	
	public interface ChatInputBarConfiguration : TextChatConfigurations, ICreatableInstance
	{
	}
	
	public interface ChatWindowConfiguration : TextChatConfigurations, ICreatableInstance
	{
	}
	
	public interface TextChatMessage : ICreatableInstance
	{
	}
	
	public interface TextChatMessageProperties : ICreatableInstance
	{
	}
	
	public interface TextChatService : ICreatableInstance
	{
	}
	
	public interface TextFilterResult : ICreatableInstance
	{
	}
	
	public interface TextFilterTranslatedResult : ICreatableInstance
	{
	}
	
	public interface TextService : ICreatableInstance
	{
	}
	
	public interface TextSource : ICreatableInstance
	{
	}
	
	public interface TextureGenerationPartGroup : ICreatableInstance
	{
	}
	
	public interface TextureGenerationService : ICreatableInstance
	{
	}
	
	public interface TextureGenerationUnwrappingRequest : ICreatableInstance
	{
	}
	
	public interface ThreadState : ICreatableInstance
	{
	}
	
	public interface ToastNotificationService : ICreatableInstance
	{
	}
	
	public interface TracerService : ICreatableInstance
	{
	}
	
	public interface TrackerLodController : ICreatableInstance
	{
	}
	
	public interface Trail : ICreatableInstance
	{
	}
	
	public interface Translator : ICreatableInstance
	{
	}
	
	public interface TutorialService : ICreatableInstance
	{
	}
	
	public interface TweenBase : ICreatableInstance
	{
	}
	
	public interface Tween : TweenBase, ICreatableInstance
	{
	}
	
	public interface TweenService : ICreatableInstance
	{
	}
	
	public interface UIAspectRatioConstraint : UIConstraint, ICreatableInstance
	{
	}
	
	public interface UISizeConstraint : UIConstraint, ICreatableInstance
	{
	}
	
	public interface UITextSizeConstraint : UIConstraint, ICreatableInstance
	{
	}
	
	public interface UICorner : UIComponent, ICreatableInstance
	{
	}
	
	public interface UIDragDetector : UIComponent, ICreatableInstance
	{
	}
	
	public interface UIFlexItem : UIComponent, ICreatableInstance
	{
	}
	
	public interface UIGradient : UIComponent, ICreatableInstance
	{
	}
	
	public interface UIGridStyleLayout : UILayout, ICreatableInstance
	{
	}
	
	public interface UIGridLayout : UIGridStyleLayout, ICreatableInstance
	{
	}
	
	public interface UIListLayout : UIGridStyleLayout, ICreatableInstance
	{
	}
	
	public interface UIPageLayout : UIGridStyleLayout, ICreatableInstance
	{
	}
	
	public interface UITableLayout : UIGridStyleLayout, ICreatableInstance
	{
	}
	
	public interface UIPadding : UIComponent, ICreatableInstance
	{
	}
	
	public interface UIScale : UIComponent, ICreatableInstance
	{
	}
	
	public interface UIStroke : UIComponent, ICreatableInstance
	{
	}
	
	public interface UnvalidatedAssetService : ICreatableInstance
	{
	}
	
	public interface UserGameSettings : ICreatableInstance
	{
	}
	
	public interface UserInputService : ICreatableInstance
	{
	}
	
	public interface UserService : ICreatableInstance
	{
	}
	
	public interface VRService : ICreatableInstance
	{
	}
	
	public interface BoolValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface BrickColorValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface CFrameValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface Color3Value : ValueBase, ICreatableInstance
	{
	}
	
	public interface DoubleConstrainedValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface IntConstrainedValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface IntValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface NumberValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface ObjectValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface RayValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface StringValue : ValueBase, ICreatableInstance
	{
	}
	
	public interface Vector3Value : ValueBase, ICreatableInstance
	{
	}
	
	public interface Vector3Curve : ICreatableInstance
	{
	}
	
	public interface VersionControlService : ICreatableInstance
	{
	}
	
	public interface VideoCaptureService : ICreatableInstance
	{
	}
	
	public interface VideoDeviceInput : ICreatableInstance
	{
	}
	
	public interface VisualizationMode : ICreatableInstance
	{
	}
	
	public interface VisualizationModeCategory : ICreatableInstance
	{
	}
	
	public interface VoiceChatInternal : ICreatableInstance
	{
	}
	
	public interface VoiceChatService : ICreatableInstance
	{
		public bool EnableDefaultVoice { get; set; }
		public Enum.AudioApiRollout UseAudioApi { get; set; }
	}
	
	public interface WeldConstraint : ICreatableInstance
	{
	}
	
	public interface Wire : ICreatableInstance
	{
	}
	
}
