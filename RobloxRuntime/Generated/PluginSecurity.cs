// THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY!

namespace RobloxRuntime.PluginClasses
{
	// GENERATED ROBLOX INSTANCE CLASSES
	using RobloxRuntime.Classes;
	
	public partial interface Instance
	{
		public bool RobloxLocked { get; set; }
		public string GetDebugId(int? scopeLength);
	}
	
	public interface AccessoryDescription : Instance
	{
	}
	
	public interface AccountService : Instance
	{
	}
	
	public interface Accoutrement : Instance
	{
	}
	
	public interface Accessory : Accoutrement
	{
	}
	
	public interface AchievementService : Instance
	{
	}
	
	public interface ActivityHistoryService : Instance
	{
	}
	
	public interface AdPortal : Instance
	{
	}
	
	public interface AnalyticsService : Instance
	{
	}
	
	public interface Animation : Instance
	{
	}
	
	public interface AnimationClip : Instance
	{
	}
	
	public partial interface KeyframeSequence : AnimationClip
	{
		public float AuthoredHipHeight { get; set; }
	}
	
	public partial interface AnimationClipProvider : Instance
	{
		public AnimationClip GetAnimationClip(string assetId);
		public AnimationClip GetAnimationClipById(long assetId, bool useCache);
	}
	
	public interface AnimationController : Instance
	{
	}
	
	public interface AnimationFromVideoCreatorService : Instance
	{
	}
	
	public interface AnimationFromVideoCreatorStudioService : Instance
	{
	}
	
	public interface AnimationRigData : Instance
	{
	}
	
	public interface AnimationStreamTrack : Instance
	{
	}
	
	public interface AnimationTrack : Instance
	{
	}
	
	public partial interface Animator : Instance
	{
		public void StepAnimations(float deltaTime);
	}
	
	public interface AppLifecycleObserverService : Instance
	{
	}
	
	public interface AppUpdateService : Instance
	{
	}
	
	public interface AssetDeliveryProxy : Instance
	{
	}
	
	public interface AssetImportService : Instance
	{
	}
	
	public interface AssetImportSession : Instance
	{
	}
	
	public interface AssetManagerService : Instance
	{
	}
	
	public interface AssetPatchSettings : Instance
	{
	}
	
	public partial interface AssetService : Instance
	{
		public MeshPart CreateMeshPartAsync(string meshId, object? options);
	}
	
	public interface Atmosphere : Instance
	{
	}
	
	public interface Attachment : Instance
	{
	}
	
	public interface Bone : Attachment
	{
	}
	
	public interface AudioAnalyzer : Instance
	{
	}
	
	public interface AudioChorus : Instance
	{
	}
	
	public interface AudioCompressor : Instance
	{
	}
	
	public interface AudioDeviceInput : Instance
	{
	}
	
	public interface AudioDeviceOutput : Instance
	{
	}
	
	public interface AudioDistortion : Instance
	{
	}
	
	public interface AudioEcho : Instance
	{
	}
	
	public interface AudioEmitter : Instance
	{
	}
	
	public interface AudioEqualizer : Instance
	{
	}
	
	public interface AudioFader : Instance
	{
	}
	
	public interface AudioFilter : Instance
	{
	}
	
	public interface AudioFlanger : Instance
	{
	}
	
	public interface AudioListener : Instance
	{
	}
	
	public interface AudioPitchShifter : Instance
	{
	}
	
	public interface AudioPlayer : Instance
	{
	}
	
	public interface AudioReverb : Instance
	{
	}
	
	public interface AudioSearchParams : Instance
	{
	}
	
	public interface AvatarChatService : Instance
	{
	}
	
	public interface AvatarCreationService : Instance
	{
	}
	
	public interface AvatarEditorService : Instance
	{
	}
	
	public interface AvatarGenerationJob : Instance
	{
	}
	
	public interface Avatar2DGenerationJob : AvatarGenerationJob
	{
	}
	
	public interface Avatar3DGenerationJob : AvatarGenerationJob
	{
	}
	
	public interface AvatarGenerationSession : Instance
	{
	}
	
	public interface AvatarImportService : Instance
	{
	}
	
	public interface BadgeService : Instance
	{
	}
	
	public interface BaseImportData : Instance
	{
	}
	
	public interface GroupImportData : BaseImportData
	{
	}
	
	public interface MaterialImportData : BaseImportData
	{
	}
	
	public interface MeshImportData : BaseImportData
	{
	}
	
	public interface RootImportData : BaseImportData
	{
	}
	
	public interface BasePlayerGui : Instance
	{
	}
	
	public interface CoreGui : BasePlayerGui
	{
		public int Version { get; set; }
	}
	
	public interface PlayerGui : BasePlayerGui
	{
	}
	
	public partial interface StarterGui : BasePlayerGui
	{
		public bool ProcessUserInput { get; set; }
		public bool ShowDevelopmentGui { get; set; }
	}
	
	public interface RemoteEvent : BaseRemoteEvent
	{
	}
	
	public interface UnreliableRemoteEvent : BaseRemoteEvent
	{
	}
	
	public interface BaseWrap : Instance
	{
	}
	
	public interface WrapLayer : BaseWrap
	{
	}
	
	public interface WrapTarget : BaseWrap
	{
	}
	
	public interface Beam : Instance
	{
	}
	
	public interface BindableEvent : Instance
	{
	}
	
	public interface BindableFunction : Instance
	{
	}
	
	public interface BodyAngularVelocity : BodyMover
	{
	}
	
	public interface BodyForce : BodyMover
	{
	}
	
	public interface BodyGyro : BodyMover
	{
	}
	
	public interface BodyPosition : BodyMover
	{
	}
	
	public interface BodyThrust : BodyMover
	{
	}
	
	public interface BodyVelocity : BodyMover
	{
	}
	
	public interface RocketPropulsion : BodyMover
	{
	}
	
	public interface BodyPartDescription : Instance
	{
	}
	
	public interface Breakpoint : Instance
	{
	}
	
	public interface BubbleChatMessageProperties : Instance
	{
	}
	
	public interface BulkImportService : Instance
	{
	}
	
	public interface CalloutService : Instance
	{
	}
	
	public interface Camera : Instance
	{
	}
	
	public interface CaptureService : Instance
	{
	}
	
	public interface ChangeHistoryService : Instance
	{
		public void FinishRecording(string identifier, Enum.FinishRecordingOperation operation, object? finalOptions);
		public object[] GetCanRedo();
		public object[] GetCanUndo();
		public bool IsRecordingInProgress(string? identifier);
		public void Redo();
		public void ResetWaypoints();
		public void SetEnabled(bool state);
		public void SetWaypoint(string name);
		public string? TryBeginRecording(string name, string? displayName);
		public void Undo();
		public ScriptSignal<string, string?, string?, Enum.FinishRecordingOperation, object?> OnRecordingFinished { get; }
		public ScriptSignal<string, string?> OnRecordingStarted { get; }
		public ScriptSignal<string> OnRedo { get; }
		public ScriptSignal<string> OnUndo { get; }
	}
	
	public interface BodyColors : CharacterAppearance
	{
	}
	
	public interface CharacterMesh : CharacterAppearance
	{
	}
	
	public interface Clothing : CharacterAppearance
	{
	}
	
	public interface Pants : Clothing
	{
	}
	
	public interface Shirt : Clothing
	{
	}
	
	public interface ShirtGraphic : CharacterAppearance
	{
	}
	
	public interface Chat : Instance
	{
	}
	
	public interface ChatbotUIService : Instance
	{
	}
	
	public interface ClickDetector : Instance
	{
	}
	
	public interface DragDetector : ClickDetector
	{
	}
	
	public interface Clouds : Instance
	{
	}
	
	public interface Collaborator : Instance
	{
	}
	
	public interface CollaboratorsService : Instance
	{
	}
	
	public interface CollectionService : Instance
	{
	}
	
	public interface CommandInstance : Instance
	{
	}
	
	public interface CommandService : Instance
	{
	}
	
	public interface CommerceService : Instance
	{
	}
	
	public interface ConnectivityService : Instance
	{
	}
	
	public interface Constraint : Instance
	{
	}
	
	public interface AlignOrientation : Constraint
	{
	}
	
	public interface AlignPosition : Constraint
	{
	}
	
	public interface AngularVelocity : Constraint
	{
	}
	
	public interface AnimationConstraint : Constraint
	{
	}
	
	public interface BallSocketConstraint : Constraint
	{
	}
	
	public interface HingeConstraint : Constraint
	{
	}
	
	public interface LineForce : Constraint
	{
	}
	
	public interface LinearVelocity : Constraint
	{
	}
	
	public interface RodConstraint : Constraint
	{
	}
	
	public interface RopeConstraint : Constraint
	{
	}
	
	public interface SlidingBallConstraint : Constraint
	{
	}
	
	public interface CylindricalConstraint : SlidingBallConstraint
	{
	}
	
	public interface SpringConstraint : Constraint
	{
	}
	
	public interface Torque : Constraint
	{
	}
	
	public interface TorsionSpringConstraint : Constraint
	{
	}
	
	public interface UniversalConstraint : Constraint
	{
	}
	
	public interface VectorForce : Constraint
	{
	}
	
	public interface ContentProvider : Instance
	{
	}
	
	public interface ContextActionService : Instance
	{
	}
	
	public interface Controller : Instance
	{
	}
	
	public interface SkateboardController : Controller
	{
	}
	
	public interface ControllerBase : Instance
	{
	}
	
	public interface AirController : ControllerBase
	{
	}
	
	public interface ClimbController : ControllerBase
	{
	}
	
	public interface GroundController : ControllerBase
	{
	}
	
	public interface SwimController : ControllerBase
	{
	}
	
	public interface ControllerManager : Instance
	{
	}
	
	public interface ConversationalAIAcceptanceService : Instance
	{
	}
	
	public interface CrossDMScriptChangeListener : Instance
	{
	}
	
	public interface DataModelMesh : Instance
	{
	}
	
	public interface BevelMesh : DataModelMesh
	{
	}
	
	public interface EditableMesh : DataModelMesh
	{
	}
	
	public interface RobloxEditableMesh : EditableMesh
	{
	}
	
	public interface FileMesh : DataModelMesh
	{
	}
	
	public interface SpecialMesh : FileMesh
	{
	}
	
	public interface DataModelPatchService : Instance
	{
	}
	
	public interface DataModelSession : Instance
	{
	}
	
	public interface DataStoreGetOptions : Instance
	{
	}
	
	public interface DataStoreIncrementOptions : Instance
	{
	}
	
	public interface DataStoreInfo : Instance
	{
	}
	
	public interface DataStoreKey : Instance
	{
	}
	
	public interface DataStoreKeyInfo : Instance
	{
	}
	
	public interface DataStoreObjectVersionInfo : Instance
	{
	}
	
	public interface DataStoreOptions : Instance
	{
	}
	
	public interface DataStoreService : Instance
	{
	}
	
	public interface DataStoreSetOptions : Instance
	{
	}
	
	public interface Debris : Instance
	{
	}
	
	public interface DebugSettings : Instance
	{
		public int DataModel { get; set; }
		public int InstanceCount { get; set; }
		public bool IsScriptStackTracingEnabled { get; set; }
		public int JobCount { get; set; }
		public int PlayerCount { get; set; }
		public bool ReportSoundWarnings { get; set; }
		public string RobloxVersion { get; set; }
		public Enum.TickCountSampleMethod TickCountPreciseOverride { get; set; }
	}
	
	public interface DebuggerBreakpoint : Instance
	{
		public string Condition { get; set; }
		public bool ContinueExecution { get; set; }
		public bool IsEnabled { get; set; }
		public int Line { get; set; }
		public string LogExpression { get; set; }
		public bool isContextDependentBreakpoint { get; set; }
		public int line { get; set; }
	}
	
	public interface DebuggerConnection : Instance
	{
	}
	
	public interface DebuggerConnectionManager : Instance
	{
	}
	
	public interface DebuggerLuaResponse : Instance
	{
	}
	
	public interface DebuggerManager : Instance
	{
		public bool DebuggingEnabled { get; set; }
		public Instance? AddDebugger(Instance? script);
		public Instance[] GetDebuggers();
		public void Resume();
		public void StepIn();
		public void StepOut();
		public void StepOver();
		public ScriptSignal<Instance?> DebuggerAdded { get; }
		public ScriptSignal<Instance?> DebuggerRemoved { get; }
	}
	
	public interface DebuggerUIService : Instance
	{
	}
	
	public interface DebuggerVariable : Instance
	{
	}
	
	public interface DebuggerWatch : Instance
	{
		public string Expression { get; set; }
	}
	
	public interface DeviceIdService : Instance
	{
	}
	
	public interface Dialog : Instance
	{
	}
	
	public interface DialogChoice : Instance
	{
	}
	
	public interface Dragger : Instance
	{
	}
	
	public interface DraggerService : Instance
	{
	}
	
	public interface EditableImage : Instance
	{
	}
	
	public interface RobloxEditableImage : EditableImage
	{
	}
	
	public interface EulerRotationCurve : Instance
	{
	}
	
	public interface EventIngestService : Instance
	{
	}
	
	public interface ExampleService : Instance
	{
	}
	
	public interface ExperienceAuthService : Instance
	{
	}
	
	public interface ExperienceInviteOptions : Instance
	{
	}
	
	public interface ExperienceNotificationService : Instance
	{
	}
	
	public interface ExperienceService : Instance
	{
	}
	
	public interface ExperienceStateCaptureService : Instance
	{
	}
	
	public interface Explosion : Instance
	{
	}
	
	public interface FaceAnimatorService : Instance
	{
	}
	
	public interface FaceControls : Instance
	{
		public float ChinRaiser { get; set; }
		public float ChinRaiserUpperLip { get; set; }
		public float Corrugator { get; set; }
		public float EyesLookDown { get; set; }
		public float EyesLookLeft { get; set; }
		public float EyesLookRight { get; set; }
		public float EyesLookUp { get; set; }
		public float FlatPucker { get; set; }
		public float Funneler { get; set; }
		public float JawDrop { get; set; }
		public float JawLeft { get; set; }
		public float JawRight { get; set; }
		public float LeftBrowLowerer { get; set; }
		public float LeftCheekPuff { get; set; }
		public float LeftCheekRaiser { get; set; }
		public float LeftDimpler { get; set; }
		public float LeftEyeClosed { get; set; }
		public float LeftEyeUpperLidRaiser { get; set; }
		public float LeftInnerBrowRaiser { get; set; }
		public float LeftLipCornerDown { get; set; }
		public float LeftLipCornerPuller { get; set; }
		public float LeftLipStretcher { get; set; }
		public float LeftLowerLipDepressor { get; set; }
		public float LeftNoseWrinkler { get; set; }
		public float LeftOuterBrowRaiser { get; set; }
		public float LeftUpperLipRaiser { get; set; }
		public float LipPresser { get; set; }
		public float LipsTogether { get; set; }
		public float LowerLipSuck { get; set; }
		public float MouthLeft { get; set; }
		public float MouthRight { get; set; }
		public float Pucker { get; set; }
		public float RightBrowLowerer { get; set; }
		public float RightCheekPuff { get; set; }
		public float RightCheekRaiser { get; set; }
		public float RightDimpler { get; set; }
		public float RightEyeClosed { get; set; }
		public float RightEyeUpperLidRaiser { get; set; }
		public float RightInnerBrowRaiser { get; set; }
		public float RightLipCornerDown { get; set; }
		public float RightLipCornerPuller { get; set; }
		public float RightLipStretcher { get; set; }
		public float RightLowerLipDepressor { get; set; }
		public float RightNoseWrinkler { get; set; }
		public float RightOuterBrowRaiser { get; set; }
		public float RightUpperLipRaiser { get; set; }
		public float TongueDown { get; set; }
		public float TongueOut { get; set; }
		public float TongueUp { get; set; }
		public float UpperLipSuck { get; set; }
	}
	
	public interface FaceInstance : Instance
	{
	}
	
	public interface Decal : FaceInstance
	{
	}
	
	public interface Texture : Decal
	{
	}
	
	public interface FacialAnimationRecordingService : Instance
	{
	}
	
	public interface FacialAnimationStreamingServiceStats : Instance
	{
	}
	
	public interface FacialAnimationStreamingServiceV2 : Instance
	{
	}
	
	public interface Feature : Instance
	{
	}
	
	public interface File : Instance
	{
		public long Size { get; set; }
		public string GetBinaryContents();
		public string GetTemporaryId();
	}
	
	public interface Fire : Instance
	{
	}
	
	public interface FloatCurve : Instance
	{
	}
	
	public interface Folder : Instance
	{
	}
	
	public interface ForceField : Instance
	{
	}
	
	public interface GamePassService : Instance
	{
	}
	
	public partial interface GameSettings : Instance
	{
		public bool VideoCaptureEnabled { get; set; }
	}
	
	public interface GamepadService : Instance
	{
	}
	
	public interface GenericChallengeService : Instance
	{
	}
	
	public interface GeometryService : Instance
	{
	}
	
	public interface GetTextBoundsParams : Instance
	{
	}
	
	public interface GlobalDataStore : Instance
	{
	}
	
	public interface DataStore : GlobalDataStore
	{
	}
	
	public interface OrderedDataStore : GlobalDataStore
	{
	}
	
	public interface GroupService : Instance
	{
	}
	
	public interface GuiBase2d : GuiBase
	{
	}
	
	public interface GuiObject : GuiBase2d
	{
	}
	
	public interface CanvasGroup : GuiObject
	{
	}
	
	public interface Frame : GuiObject
	{
	}
	
	public interface GuiButton : GuiObject
	{
	}
	
	public interface ImageButton : GuiButton
	{
	}
	
	public interface TextButton : GuiButton
	{
	}
	
	public interface ImageLabel : GuiLabel
	{
	}
	
	public interface TextLabel : GuiLabel
	{
	}
	
	public interface ScrollingFrame : GuiObject
	{
	}
	
	public interface TextBox : GuiObject
	{
	}
	
	public interface VideoFrame : GuiObject
	{
	}
	
	public interface ViewportFrame : GuiObject
	{
	}
	
	public interface LayerCollector : GuiBase2d
	{
	}
	
	public interface BillboardGui : LayerCollector
	{
	}
	
	public interface PluginGui : LayerCollector
	{
		public string Title { get; set; }
		public void BindToClose(Action? function);
		public Vector2 GetRelativeMousePosition();
		public ScriptSignal<object> PluginDragDropped { get; }
		public ScriptSignal<object> PluginDragEntered { get; }
		public ScriptSignal<object> PluginDragLeft { get; }
		public ScriptSignal<object> PluginDragMoved { get; }
		public ScriptSignal WindowFocusReleased { get; }
		public ScriptSignal WindowFocused { get; }
	}
	
	public interface DockWidgetPluginGui : PluginGui
	{
	}
	
	public interface QWidgetPluginGui : PluginGui
	{
	}
	
	public interface ScreenGui : LayerCollector
	{
	}
	
	public interface SurfaceGuiBase : LayerCollector
	{
	}
	
	public interface AdGui : SurfaceGuiBase
	{
	}
	
	public interface SurfaceGui : SurfaceGuiBase
	{
	}
	
	public interface GuiBase3d : GuiBase
	{
	}
	
	public interface FloorWire : GuiBase3d
	{
	}
	
	public interface InstanceAdornment : GuiBase3d
	{
	}
	
	public interface SelectionBox : InstanceAdornment
	{
	}
	
	public interface PVAdornment : GuiBase3d
	{
	}
	
	public interface HandleAdornment : PVAdornment
	{
	}
	
	public interface BoxHandleAdornment : HandleAdornment
	{
	}
	
	public interface ConeHandleAdornment : HandleAdornment
	{
	}
	
	public interface CylinderHandleAdornment : HandleAdornment
	{
	}
	
	public interface ImageHandleAdornment : HandleAdornment
	{
	}
	
	public interface LineHandleAdornment : HandleAdornment
	{
	}
	
	public interface SphereHandleAdornment : HandleAdornment
	{
	}
	
	public interface WireframeHandleAdornment : HandleAdornment
	{
	}
	
	public interface ParabolaAdornment : PVAdornment
	{
	}
	
	public interface SelectionSphere : PVAdornment
	{
	}
	
	public interface PartAdornment : GuiBase3d
	{
	}
	
	public interface ArcHandles : HandlesBase
	{
	}
	
	public interface Handles : HandlesBase
	{
	}
	
	public interface SurfaceSelection : PartAdornment
	{
	}
	
	public interface SelectionLasso : GuiBase3d
	{
	}
	
	public interface SelectionPartLasso : SelectionLasso
	{
	}
	
	public interface SelectionPointLasso : SelectionLasso
	{
	}
	
	public interface Path2D : GuiBase
	{
	}
	
	public interface GuiService : Instance
	{
	}
	
	public interface HapticService : Instance
	{
	}
	
	public interface HeightmapImporterService : Instance
	{
	}
	
	public interface HiddenSurfaceRemovalAsset : Instance
	{
	}
	
	public interface Highlight : Instance
	{
	}
	
	public interface HttpService : Instance
	{
	}
	
	public interface Humanoid : Instance
	{
	}
	
	public interface HumanoidDescription : Instance
	{
	}
	
	public interface IKControl : Instance
	{
	}
	
	public interface IXPService : Instance
	{
	}
	
	public interface IncrementalPatchBuilder : Instance
	{
	}
	
	public interface InputObject : Instance
	{
	}
	
	public interface InsertService : Instance
	{
	}
	
	public interface InternalSyncItem : Instance
	{
	}
	
	public interface JointInstance : Instance
	{
	}
	
	public interface DynamicRotate : JointInstance
	{
	}
	
	public interface Glue : JointInstance
	{
	}
	
	public interface Motor : JointInstance
	{
	}
	
	public interface Motor6D : Motor
	{
	}
	
	public interface VelocityMotor : JointInstance
	{
	}
	
	public interface JointsService : Instance
	{
	}
	
	public interface Keyframe : Instance
	{
	}
	
	public interface KeyframeMarker : Instance
	{
	}
	
	public partial interface KeyframeSequenceProvider : Instance
	{
		public Instance? GetKeyframeSequence(string assetId);
		public Instance? GetKeyframeSequenceById(long assetId, bool useCache);
	}
	
	public interface Light : Instance
	{
	}
	
	public interface PointLight : Light
	{
	}
	
	public interface SpotLight : Light
	{
	}
	
	public interface SurfaceLight : Light
	{
	}
	
	public interface Lighting : Instance
	{
	}
	
	public interface LinkingService : Instance
	{
	}
	
	public interface LiveScriptingService : Instance
	{
	}
	
	public interface LocalizationService : Instance
	{
	}
	
	public interface LocalizationTable : Instance
	{
	}
	
	public interface LodDataEntity : Instance
	{
	}
	
	public interface LogReporterService : Instance
	{
	}
	
	public interface LogService : Instance
	{
	}
	
	public interface LuaSettings : Instance
	{
	}
	
	public interface LuaSourceContainer : Instance
	{
	}
	
	public interface BaseScript : LuaSourceContainer
	{
	}
	
	public interface Script : BaseScript
	{
		public string Source { get; set; }
	}
	
	public interface ModuleScript : LuaSourceContainer
	{
		public string Source { get; set; }
	}
	
	public interface MarkerCurve : Instance
	{
	}
	
	public interface MarketplaceService : Instance
	{
	}
	
	public interface MaterialGenerationService : Instance
	{
	}
	
	public interface MaterialGenerationSession : Instance
	{
	}
	
	public interface MaterialService : Instance
	{
	}
	
	public interface MaterialVariant : Instance
	{
		public string ColorMap { get; set; }
		public string MetalnessMap { get; set; }
		public string NormalMap { get; set; }
		public string RoughnessMap { get; set; }
	}
	
	public interface MemStorageConnection : Instance
	{
		public void Disconnect();
	}
	
	public interface MemoryStoreHashMap : Instance
	{
	}
	
	public interface MemoryStoreQueue : Instance
	{
	}
	
	public interface MemoryStoreService : Instance
	{
	}
	
	public interface MemoryStoreSortedMap : Instance
	{
	}
	
	public interface MessageBusConnection : Instance
	{
	}
	
	public interface MessageBusService : Instance
	{
	}
	
	public interface MessagingService : Instance
	{
	}
	
	public interface MetaBreakpoint : Instance
	{
	}
	
	public interface MetaBreakpointContext : Instance
	{
	}
	
	public interface MetaBreakpointManager : Instance
	{
	}
	
	public interface Mouse : Instance
	{
	}
	
	public interface PluginMouse : Mouse
	{
		public ScriptSignal<Instance[]> DragEnter { get; }
	}
	
	public interface MultipleDocumentInterfaceInstance : Instance
	{
	}
	
	public interface NetworkMarker : Instance
	{
	}
	
	public interface NetworkPeer : Instance
	{
		public void SetOutgoingKBPSLimit(int limit);
	}
	
	public interface NetworkClient : NetworkPeer
	{
	}
	
	public interface NetworkServer : NetworkPeer
	{
	}
	
	public interface NetworkReplicator : Instance
	{
		public Instance? GetPlayer();
	}
	
	public interface ClientReplicator : NetworkReplicator
	{
	}
	
	public interface ServerReplicator : NetworkReplicator
	{
	}
	
	public interface NetworkSettings : Instance
	{
		public int EmulatedTotalMemoryInMB { get; set; }
		public float FreeMemoryMBytes { get; set; }
		public bool HttpProxyEnabled { get; }
		public string HttpProxyURL { get; }
		public double IncomingReplicationLag { get; set; }
		public bool PrintJoinSizeBreakdown { get; set; }
		public bool PrintPhysicsErrors { get; set; }
		public bool PrintStreamInstanceQuota { get; set; }
		public bool RandomizeJoinInstanceOrder { get; set; }
		public bool RenderStreamedRegions { get; set; }
		public bool ShowActiveAnimationAsset { get; set; }
	}
	
	public interface NoCollisionConstraint : Instance
	{
	}
	
	public interface Noise : Instance
	{
	}
	
	public interface OmniRecommendationsService : Instance
	{
	}
	
	public interface OpenCloudApiV1 : Instance
	{
	}
	
	public interface OpenCloudService : Instance
	{
	}
	
	public interface PVInstance : Instance
	{
	}
	
	public interface BasePart : PVInstance
	{
	}
	
	public interface FormFactorPart : BasePart
	{
	}
	
	public interface Part : FormFactorPart
	{
	}
	
	public interface Platform : Part
	{
	}
	
	public interface Seat : Part
	{
	}
	
	public interface SkateboardPlatform : Part
	{
	}
	
	public interface SpawnLocation : Part
	{
	}
	
	public partial interface Terrain : BasePart
	{
		public void ConvertToSmooth();
	}
	
	public interface TriangleMeshPart : BasePart
	{
	}
	
	public interface MeshPart : TriangleMeshPart
	{
	}
	
	public interface PartOperation : TriangleMeshPart
	{
	}
	
	public interface TrussPart : BasePart
	{
	}
	
	public interface VehicleSeat : BasePart
	{
	}
	
	public interface Model : PVInstance
	{
		public Enum.ModelLevelOfDetail LevelOfDetail { get; set; }
	}
	
	public interface Actor : Model
	{
	}
	
	public interface BackpackItem : Model
	{
	}
	
	public interface Tool : BackpackItem
	{
	}
	
	public partial interface WorldRoot : Model
	{
		public void IKMoveTo(BasePart part, CFrame target, float? translateStiffness, float? rotateStiffness, Enum.IKCollisionsMode? collisionsMode);
		public void StepPhysics(float dt, Instance[]? parts);
	}
	
	public partial interface Workspace : WorldRoot
	{
		public void BreakJoints(Instance[] objects);
		public void MakeJoints(Instance[] objects);
		public void ZoomToExtents();
	}
	
	public interface PackageLink : Instance
	{
	}
	
	public interface PackageService : Instance
	{
	}
	
	public interface PackageUIService : Instance
	{
	}
	
	public interface Pages : Instance
	{
	}
	
	public interface DataStoreKeyPages : Pages
	{
	}
	
	public interface DataStoreListingPages : Pages
	{
	}
	
	public interface ParticleEmitter : Instance
	{
	}
	
	public interface PatchMapping : Instance
	{
	}
	
	public interface Path : Instance
	{
	}
	
	public interface PathfindingLink : Instance
	{
	}
	
	public interface PathfindingModifier : Instance
	{
	}
	
	public interface PathfindingService : Instance
	{
	}
	
	public interface PausedState : Instance
	{
	}
	
	public interface PausedStateBreakpoint : PausedState
	{
	}
	
	public interface PausedStateException : PausedState
	{
	}
	
	public interface PhysicsService : Instance
	{
	}
	
	public interface PhysicsSettings : Instance
	{
		public bool AllowSleep { get; set; }
		public bool AreAnchorsShown { get; set; }
		public bool AreAssembliesShown { get; set; }
		public bool AreAwakePartsHighlighted { get; set; }
		public bool AreBodyTypesShown { get; set; }
		public bool AreContactIslandsShown { get; set; }
		public bool AreContactPointsShown { get; set; }
		public bool AreJointCoordinatesShown { get; set; }
		public bool AreMechanismsShown { get; set; }
		public bool AreModelCoordsShown { get; set; }
		public bool AreNonAnchorsShown { get; set; }
		public bool AreOwnersShown { get; set; }
		public bool ArePartCoordsShown { get; set; }
		public bool AreRegionsShown { get; set; }
		public bool AreTerrainReplicationRegionsShown { get; set; }
		public bool AreUnalignedPartsShown { get; set; }
		public bool AreWorldCoordsShown { get; set; }
		public bool DisableCSGv2 { get; set; }
		public bool DisableCSGv3ForPlugins { get; set; }
		public bool ForceCSGv2 { get; set; }
		public bool IsInterpolationThrottleShown { get; set; }
		public bool IsReceiveAgeShown { get; set; }
		public bool IsTreeShown { get; set; }
		public Enum.EnviromentalPhysicsThrottle PhysicsEnvironmentalThrottle { get; set; }
		public bool ShowDecompositionGeometry { get; set; }
		public double ThrottleAdjustTime { get; set; }
		public bool UseCSGv2 { get; set; }
	}
	
	public interface PlacesService : Instance
	{
	}
	
	public interface PlatformCloudStorageService : Instance
	{
	}
	
	public interface PlatformFriendsService : Instance
	{
	}
	
	public partial interface Player : Instance
	{
		public void SetAccountAge(int accountAge);
		public void SetSuperSafeChat(bool value);
	}
	
	public interface PlayerHydrationService : Instance
	{
	}
	
	public interface PlayerScripts : Instance
	{
	}
	
	public interface PlayerViewService : Instance
	{
	}
	
	public partial interface Players : Instance
	{
		public void Chat(string message);
		public void SetChatStyle(Enum.ChatStyle? style);
		public void TeamChat(string message);
	}
	
	public interface Plugin : Instance
	{
		public bool CollisionEnabled { get; set; }
		public float GridSize { get; set; }
		public void Activate(bool exclusiveMouse);
		public PluginAction CreatePluginAction(string actionId, string text, string statusTip, string iconName, bool? allowBinding);
		public PluginMenu CreatePluginMenu(string id, string title, string icon);
		public PluginToolbar CreateToolbar(string name);
		public void Deactivate();
		public Enum.JointCreationMode GetJoinMode();
		public PluginMouse GetMouse();
		public Enum.RibbonTool GetSelectedRibbonTool();
		public object? GetSetting(string key);
		public long GetStudioUserId();
		public Instance? Intersect(Instance[] objects);
		public bool IsActivated();
		public bool IsActivatedWithExclusiveMouse();
		public Instance[] Negate(Instance[] objects);
		public void OpenScript(LuaSourceContainer script, int? lineNumber);
		public void OpenWikiPage(string url);
		public void SaveSelectedToRoblox();
		public void SelectRibbonTool(Enum.RibbonTool tool, UDim2 position);
		public Instance[] Separate(Instance[] objects);
		public void SetSetting(string key, object? value);
		public void StartDrag(object dragData);
		public Instance? Union(Instance[] objects);
		public DockWidgetPluginGui CreateDockWidgetPluginGui(string pluginGuiId, DockWidgetPluginGuiInfo dockWidgetPluginGuiInfo);
		public Instance? ImportFbxAnimation(Instance? rigModel, bool? isR15);
		public Instance? ImportFbxRig(bool? isR15);
		public long PromptForExistingAssetId(string assetType);
		public bool PromptSaveSelection(string suggestedFileName);
		public ScriptSignal Deactivation { get; }
		public ScriptSignal Unloading { get; }
	}
	
	public interface PluginAction : Instance
	{
		public string ActionId { get; set; }
		public bool AllowBinding { get; set; }
		public string StatusTip { get; set; }
		public string Text { get; set; }
		public ScriptSignal Triggered { get; }
	}
	
	public interface PluginCapabilities : Instance
	{
	}
	
	public interface PluginDebugService : Instance
	{
	}
	
	public interface PluginDragEvent : Instance
	{
		public string Data { get; set; }
		public string MimeType { get; set; }
		public Vector2 Position { get; set; }
		public string Sender { get; set; }
	}
	
	public interface PluginGuiService : Instance
	{
	}
	
	public interface PluginManagementService : Instance
	{
	}
	
	public partial interface PluginManagerInterface : Instance
	{
		public Instance? CreatePlugin();
		public void ExportPlace(string filePath);
		public void ExportSelection(string filePath);
	}
	
	public interface PluginMenu : Instance
	{
		public string Icon { get; set; }
		public string Title { get; set; }
		public void AddAction(Instance? action);
		public void AddMenu(Instance? menu);
		public Instance? AddNewAction(string actionId, string text, string icon);
		public void AddSeparator();
		public void Clear();
		public Instance? ShowAsync();
	}
	
	public interface PluginPolicyService : Instance
	{
	}
	
	public interface PluginToolbar : Instance
	{
		public PluginToolbarButton CreateButton(string buttonId, string tooltip, string iconname, string text);
	}
	
	public interface PluginToolbarButton : Instance
	{
		public bool ClickableWhenViewportHidden { get; set; }
		public bool Enabled { get; set; }
		public string Icon { get; set; }
		public void SetActive(bool active);
		public ScriptSignal Click { get; }
	}
	
	public interface PolicyService : Instance
	{
	}
	
	public interface PoseBase : Instance
	{
	}
	
	public interface NumberPose : PoseBase
	{
	}
	
	public interface Pose : PoseBase
	{
	}
	
	public interface PostEffect : Instance
	{
	}
	
	public interface BloomEffect : PostEffect
	{
	}
	
	public interface BlurEffect : PostEffect
	{
	}
	
	public interface ColorCorrectionEffect : PostEffect
	{
	}
	
	public interface DepthOfFieldEffect : PostEffect
	{
	}
	
	public interface SunRaysEffect : PostEffect
	{
	}
	
	public interface ProjectFolderService : Instance
	{
	}
	
	public interface ProximityPrompt : Instance
	{
	}
	
	public interface ProximityPromptService : Instance
	{
	}
	
	public interface PublishService : Instance
	{
	}
	
	public interface RTAnimationTracker : Instance
	{
	}
	
	public interface ReflectionService : Instance
	{
	}
	
	public interface RemoteCursorService : Instance
	{
	}
	
	public interface RemoteFunction : Instance
	{
	}
	
	public interface RenderSettings : Instance
	{
		public int AutoFRMLevel { get; set; }
		public bool EagerBulkExecution { get; set; }
		public Enum.QualityLevel EditQualityLevel { get; set; }
		public bool EnableVRMode { get; set; }
		public bool EnableFRM { get; set; }
		public bool ExportMergeByMaterial { get; set; }
		public Enum.FramerateManagerMode FrameRateManager { get; set; }
		public Enum.GraphicsMode GraphicsMode { get; set; }
		public int MeshCacheSize { get; set; }
		public Enum.MeshPartDetailLevel MeshPartDetailLevel { get; set; }
		public Enum.QualityLevel QualityLevel { get; set; }
		public bool ReloadAssets { get; set; }
		public bool RenderCSGTrianglesDebug { get; set; }
		public bool ShowBoundingBoxes { get; set; }
		public Enum.ViewMode ViewMode { get; set; }
		public int GetMaxQualityLevel();
	}
	
	public interface RenderingTest : Instance
	{
		public CFrame CFrame { get; set; }
		public int ComparisonDiffThreshold { get; set; }
		public Enum.RenderingTestComparisonMethod ComparisonMethod { get; set; }
		public float ComparisonPsnrThreshold { get; set; }
		public string Description { get; set; }
		public float FieldOfView { get; set; }
		public Vector3 Orientation { get; set; }
		public bool PerfTest { get; set; }
		public Vector3 Position { get; set; }
		public bool QualityAuto { get; set; }
		public int QualityLevel { get; set; }
		public int RenderingTestFrameCount { get; set; }
		public bool ShouldSkip { get; set; }
		public string Ticket { get; set; }
		public int Timeout { get; set; }
		public void RenderdocTriggerCapture();
	}
	
	public interface ReplicatedFirst : Instance
	{
	}
	
	public interface RibbonNotificationService : Instance
	{
	}
	
	public interface RobloxPluginGuiService : Instance
	{
	}
	
	public interface RomarkService : Instance
	{
	}
	
	public interface RotationCurve : Instance
	{
	}
	
	public partial interface RunService : Instance
	{
		public Enum.RunState RunState { get; set; }
		public bool IsEdit();
		public void Pause();
		public void Reset();
		public void Run();
		public void Stop();
	}
	
	public interface SafetyService : Instance
	{
	}
	
	public interface ScreenshotHud : Instance
	{
	}
	
	public interface SyncScriptBuilder : ScriptBuilder
	{
	}
	
	public interface ScriptChangeService : Instance
	{
	}
	
	public partial interface ScriptContext : Instance
	{
		public void SetTimeout(double seconds);
	}
	
	public interface ScriptDebugger : Instance
	{
		public string CoreScriptIdentifier { get; set; }
		public int CurrentLine { get; set; }
		public bool IsDebugging { get; set; }
		public bool IsPaused { get; set; }
		public Instance? Script { get; set; }
		public string ScriptGuid { get; set; }
		public Instance? AddWatch(string expression);
		public Instance[] GetBreakpoints();
		public object GetGlobals(int? stackFrame);
		public object GetLocals(int? stackFrame);
		public object[] GetStack();
		public object GetUpvalues(int? stackFrame);
		public object? GetWatchValue(Instance? watch);
		public Instance[] GetWatches();
		public Instance? SetBreakpoint(int line, bool isContextDependentBreakpoint);
		public void SetGlobal(string name, object? value, int stackFrame);
		public void SetLocal(string name, object? value, int? stackFrame);
		public void SetUpvalue(string name, object? value, int? stackFrame);
		public ScriptSignal<Instance?> BreakpointAdded { get; }
		public ScriptSignal<Instance?> BreakpointRemoved { get; }
		public ScriptSignal<int, Enum.BreakReason> EncounteredBreak { get; }
		public ScriptSignal Resuming { get; }
		public ScriptSignal<Instance?> WatchAdded { get; }
		public ScriptSignal<Instance?> WatchRemoved { get; }
	}
	
	public partial interface ScriptDocument : Instance
	{
		public string GetLine(int? lineIndex);
		public int GetLineCount();
		public LuaSourceContainer GetScript();
		public string GetSelectedText();
		public object[] GetSelection();
		public object[] GetSelectionEnd();
		public object[] GetSelectionStart();
		public string GetText(int? startLine, int? startCharacter, int? endLine, int? endCharacter);
		public object[] GetViewport();
		public bool HasSelectedText();
		public bool IsCommandBar();
		public object[] CloseAsync();
		public object[] EditTextAsync(string newText, int startLine, int startCharacter, int endLine, int endCharacter);
		public object[] ForceSetSelectionAsync(int cursorLine, int cursorCharacter, int? anchorLine, int? anchorCharacter);
		public object[] RequestSetSelectionAsync(int cursorLine, int cursorCharacter, int? anchorLine, int? anchorCharacter);
		public ScriptSignal<long, long, long, long> SelectionChanged { get; }
		public ScriptSignal<long, long> ViewportChanged { get; }
	}
	
	public partial interface ScriptEditorService : Instance
	{
		public void DeregisterAutocompleteCallback(string name);
		public void DeregisterScriptAnalysisCallback(string name);
		public ScriptDocument FindScriptDocument(LuaSourceContainer script);
		public string GetEditorSource(LuaSourceContainer script);
		public Instance[] GetScriptDocuments();
		public void RegisterAutocompleteCallback(string name, int priority, Action callbackFunction);
		public void RegisterScriptAnalysisCallback(string name, int priority, Action callbackFunction);
		public object[] OpenScriptDocumentAsync(LuaSourceContainer script);
		public void UpdateSourceAsync(LuaSourceContainer script, Action callback);
		public ScriptSignal<ScriptDocument, object?> TextDocumentDidChange { get; }
		public ScriptSignal<ScriptDocument> TextDocumentDidClose { get; }
		public ScriptSignal<ScriptDocument> TextDocumentDidOpen { get; }
	}
	
	public partial interface ScriptProfilerService : Instance
	{
		public void ClientRequestData(Player player);
		public void ClientStart(Player player, int? frequency);
		public void ClientStop(Player player);
		public object DeserializeJSON(string? jsonString);
		public void ServerRequestData();
		public void ServerStart(int? frequency);
		public void ServerStop();
		public ScriptSignal<Player, string> OnNewData { get; }
	}
	
	public interface ScriptRegistrationService : Instance
	{
	}
	
	public interface Selection : Instance
	{
		public float SelectionThickness { get; set; }
		public void Add(Instance[] instancesToAdd);
		public Instance[] Get();
		public void Remove(Instance[] instancesToRemove);
		public void Set(Instance[] selection);
		public ScriptSignal SelectionChanged { get; }
	}
	
	public interface SensorBase : Instance
	{
	}
	
	public interface AtmosphereSensor : SensorBase
	{
	}
	
	public interface BuoyancySensor : SensorBase
	{
	}
	
	public interface ControllerPartSensor : ControllerSensor
	{
	}
	
	public interface ServerScriptService : Instance
	{
	}
	
	public interface ServiceProvider : Instance
	{
	}
	
	public partial interface DataModel : ServiceProvider
	{
		public object[] GetJobsInfo();
		public Instance[] GetObjects(string url);
		public void SetPlaceId(long placeId);
		public void SetUniverseId(long universeId);
	}
	
	public interface GlobalSettings : GenericSettings
	{
		public bool GetFFlag(string name);
		public string GetFVariable(string name);
	}
	
	public interface UserSettings : GenericSettings
	{
	}
	
	public interface ServiceVisibilityService : Instance
	{
	}
	
	public interface SessionService : Instance
	{
	}
	
	public interface SharedTableRegistry : Instance
	{
	}
	
	public interface ShorelineUpgraderService : Instance
	{
	}
	
	public interface Sky : Instance
	{
	}
	
	public interface Smoke : Instance
	{
	}
	
	public interface SmoothVoxelsUpgraderService : Instance
	{
	}
	
	public interface SocialService : Instance
	{
	}
	
	public interface Sound : Instance
	{
	}
	
	public interface SoundEffect : Instance
	{
	}
	
	public interface ChorusSoundEffect : SoundEffect
	{
	}
	
	public interface CompressorSoundEffect : SoundEffect
	{
	}
	
	public interface ChannelSelectorSoundEffect : CustomSoundEffect
	{
	}
	
	public interface DistortionSoundEffect : SoundEffect
	{
	}
	
	public interface EchoSoundEffect : SoundEffect
	{
	}
	
	public interface EqualizerSoundEffect : SoundEffect
	{
	}
	
	public interface FlangeSoundEffect : SoundEffect
	{
	}
	
	public interface PitchShiftSoundEffect : SoundEffect
	{
	}
	
	public interface ReverbSoundEffect : SoundEffect
	{
	}
	
	public interface TremoloSoundEffect : SoundEffect
	{
	}
	
	public interface SoundGroup : Instance
	{
	}
	
	public partial interface SoundService : Instance
	{
		public void OpenAttenuationCurveEditor(Instance[] selectedCurveObjects);
	}
	
	public interface Sparkles : Instance
	{
	}
	
	public interface StackFrame : Instance
	{
	}
	
	public interface StarterPlayer : Instance
	{
	}
	
	public interface StartupMessageService : Instance
	{
	}
	
	public interface Stats : Instance
	{
	}
	
	public interface StatsItem : Instance
	{
		public string DisplayName { get; set; }
		public double GetValue();
		public string GetValueString();
	}
	
	public interface RunningAverageItemDouble : StatsItem
	{
	}
	
	public interface RunningAverageItemInt : StatsItem
	{
	}
	
	public interface RunningAverageTimeIntervalItem : StatsItem
	{
	}
	
	public interface TotalCountTimeIntervalItem : StatsItem
	{
	}
	
	public interface StreamingService : Instance
	{
	}
	
	public interface StudioAssetService : Instance
	{
	}
	
	public interface StudioAttachment : Instance
	{
	}
	
	public interface StudioCallout : Instance
	{
	}
	
	public interface StudioData : Instance
	{
	}
	
	public interface StudioDeviceEmulatorService : Instance
	{
	}
	
	public interface StudioWidget : StudioObjectBase
	{
	}
	
	public interface StudioPublishService : Instance
	{
	}
	
	public interface StudioSdkService : Instance
	{
	}
	
	public interface StudioService : Instance
	{
		public Instance? ActiveScript { get; set; }
		public bool DraggerSolveConstraints { get; set; }
		public bool DrawConstraintsOnTop { get; set; }
		public float GridSize { get; set; }
		public float RotateIncrement { get; set; }
		public bool ShowConstraintDetails { get; set; }
		public string StudioLocaleId { get; set; }
		public bool UseLocalSpace { get; set; }
		public object GetClassIcon(string className);
		public long GetUserId();
		public RaycastResult GizmoRaycast(Vector3 origin, Vector3 direction, RaycastParams? raycastParams);
		public Instance? PromptImportFile(object[]? fileTypeFilter);
		public Instance[] PromptImportFiles(object[]? fileTypeFilter);
	}
	
	public interface StudioTheme : Instance
	{
		public Color3 GetColor(Enum.StudioStyleGuideColor styleguideitem, Enum.StudioStyleGuideModifier? modifier);
	}
	
	public interface StudioWidgetsService : Instance
	{
	}
	
	public interface StyleBase : Instance
	{
	}
	
	public interface StyleRule : StyleBase
	{
	}
	
	public interface StyleSheet : StyleBase
	{
	}
	
	public interface StyleDerive : Instance
	{
	}
	
	public interface StyleLink : Instance
	{
	}
	
	public interface StylingService : Instance
	{
	}
	
	public interface SurfaceAppearance : Instance
	{
		public Enum.AlphaMode AlphaMode { get; set; }
		public string ColorMap { get; set; }
		public string MetalnessMap { get; set; }
		public string NormalMap { get; set; }
		public string RoughnessMap { get; set; }
	}
	
	public interface TaskScheduler : Instance
	{
		public double SchedulerDutyCycle { get; set; }
		public double SchedulerRate { get; set; }
		public Enum.ThreadPoolConfig ThreadPoolConfig { get; set; }
		public int ThreadPoolSize { get; set; }
	}
	
	public interface Team : Instance
	{
	}
	
	public interface TeamCreateData : Instance
	{
	}
	
	public interface TeamCreateService : Instance
	{
	}
	
	public interface Teams : Instance
	{
	}
	
	public interface TeleportAsyncResult : Instance
	{
	}
	
	public interface TeleportOptions : Instance
	{
	}
	
	public interface TeleportService : Instance
	{
	}
	
	public interface TerrainDetail : Instance
	{
		public string ColorMap { get; set; }
		public string MetalnessMap { get; set; }
		public string NormalMap { get; set; }
		public string RoughnessMap { get; set; }
	}
	
	public partial interface TerrainRegion : Instance
	{
		public void ConvertToSmooth();
	}
	
	public interface TestService : Instance
	{
		public bool AutoRuns { get; set; }
		public string Description { get; set; }
		public int ErrorCount { get; set; }
		public bool ExecuteWithStudioRun { get; set; }
		public bool Is30FpsThrottleEnabled { get; set; }
		public bool IsPhysicsEnvironmentalThrottled { get; set; }
		public bool IsSleepAllowed { get; set; }
		public int NumberOfPlayers { get; set; }
		public double SimulateSecondsLag { get; set; }
		public int TestCount { get; set; }
		public double Timeout { get; set; }
		public int WarnCount { get; set; }
		public void Check(bool condition, string description, Instance? source, int? line);
		public void Checkpoint(string text, Instance? source, int? line);
		public void Done();
		public void Error(string description, Instance? source, int? line);
		public void Fail(string description, Instance? source, int? line);
		public void Message(string text, Instance? source, int? line);
		public void Require(bool condition, string description, Instance? source, int? line);
		public object ScopeTime();
		public void Warn(bool condition, string description, Instance? source, int? line);
		public bool isFeatureEnabled(string name);
		public void Run();
		public ScriptSignal<bool, string, Instance?, int> ServerCollectConditionalResult { get; }
		public ScriptSignal<string, Instance?, int> ServerCollectResult { get; }
	}
	
	public interface TextChannel : Instance
	{
	}
	
	public interface TextChatCommand : Instance
	{
	}
	
	public interface BubbleChatConfiguration : TextChatConfigurations
	{
	}
	
	public interface ChatInputBarConfiguration : TextChatConfigurations
	{
	}
	
	public interface ChatWindowConfiguration : TextChatConfigurations
	{
	}
	
	public interface TextChatMessage : Instance
	{
	}
	
	public interface TextChatMessageProperties : Instance
	{
	}
	
	public interface TextChatService : Instance
	{
	}
	
	public interface TextFilterResult : Instance
	{
	}
	
	public interface TextFilterTranslatedResult : Instance
	{
	}
	
	public interface TextService : Instance
	{
	}
	
	public interface TextSource : Instance
	{
	}
	
	public interface TextureGenerationPartGroup : Instance
	{
	}
	
	public interface TextureGenerationService : Instance
	{
	}
	
	public interface TextureGenerationUnwrappingRequest : Instance
	{
	}
	
	public interface ThreadState : Instance
	{
	}
	
	public interface ToastNotificationService : Instance
	{
	}
	
	public interface TracerService : Instance
	{
	}
	
	public interface TrackerLodController : Instance
	{
	}
	
	public interface Trail : Instance
	{
	}
	
	public interface Translator : Instance
	{
	}
	
	public interface TutorialService : Instance
	{
	}
	
	public interface TweenBase : Instance
	{
	}
	
	public interface Tween : TweenBase
	{
	}
	
	public interface TweenService : Instance
	{
	}
	
	public interface UIAspectRatioConstraint : UIConstraint
	{
	}
	
	public interface UISizeConstraint : UIConstraint
	{
	}
	
	public interface UITextSizeConstraint : UIConstraint
	{
	}
	
	public interface UICorner : UIComponent
	{
	}
	
	public interface UIDragDetector : UIComponent
	{
	}
	
	public interface UIFlexItem : UIComponent
	{
	}
	
	public interface UIGradient : UIComponent
	{
	}
	
	public interface UIGridStyleLayout : UILayout
	{
	}
	
	public interface UIGridLayout : UIGridStyleLayout
	{
	}
	
	public interface UIListLayout : UIGridStyleLayout
	{
	}
	
	public interface UIPageLayout : UIGridStyleLayout
	{
	}
	
	public interface UITableLayout : UIGridStyleLayout
	{
	}
	
	public interface UIPadding : UIComponent
	{
	}
	
	public interface UIScale : UIComponent
	{
	}
	
	public interface UIStroke : UIComponent
	{
	}
	
	public interface UnvalidatedAssetService : Instance
	{
	}
	
	public interface UserGameSettings : Instance
	{
	}
	
	public interface UserInputService : Instance
	{
	}
	
	public interface UserService : Instance
	{
	}
	
	public interface VRService : Instance
	{
	}
	
	public interface BoolValue : ValueBase
	{
	}
	
	public interface BrickColorValue : ValueBase
	{
	}
	
	public interface CFrameValue : ValueBase
	{
	}
	
	public interface Color3Value : ValueBase
	{
	}
	
	public interface DoubleConstrainedValue : ValueBase
	{
	}
	
	public interface IntConstrainedValue : ValueBase
	{
	}
	
	public interface IntValue : ValueBase
	{
	}
	
	public interface NumberValue : ValueBase
	{
	}
	
	public interface ObjectValue : ValueBase
	{
	}
	
	public interface RayValue : ValueBase
	{
	}
	
	public interface StringValue : ValueBase
	{
	}
	
	public interface Vector3Value : ValueBase
	{
	}
	
	public interface Vector3Curve : Instance
	{
	}
	
	public interface VersionControlService : Instance
	{
	}
	
	public interface VideoCaptureService : Instance
	{
	}
	
	public interface VideoDeviceInput : Instance
	{
	}
	
	public interface VisualizationMode : Instance
	{
	}
	
	public interface VisualizationModeCategory : Instance
	{
	}
	
	public interface VoiceChatInternal : Instance
	{
	}
	
	public interface VoiceChatService : Instance
	{
		public bool EnableDefaultVoice { get; set; }
		public Enum.AudioApiRollout UseAudioApi { get; set; }
	}
	
	public interface WeldConstraint : Instance
	{
	}
	
	public interface Wire : Instance
	{
	}
	
}
