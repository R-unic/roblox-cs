namespace TypeGenerator.Generators
{
    internal sealed class EnumGenerator : Generator
    {
        public EnumGenerator(string filePath, ReflectionMetadataReader reflectionMetadata)
            : base(filePath, reflectionMetadata) { }

        public void Generate(APITypes.Enum[] rbxEnums)
        {
            Write("// THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY!");
            Write("// GENERATED ROBLOX ENUMS");
            Write();

            foreach (var rbxEnum in rbxEnums)
            {
                var enumTypeName = rbxEnum.Name;
                var enumItems = rbxEnum.Items;
                Write($"public struct {enumTypeName}");
                PushIndent();

                foreach (var item in enumItems)
                {
                    var itemLegacyNames = item.LegacyNames ?? [];
                    Write($"public struct {item.Name}");
                    PushIndent();

                    Write("public const string Name = \"" + item.Name + "\";");
                    Write("public const int Value = " + item.Value + ";");
                    Write("public const string EnumType = \"" + enumTypeName + "\";");

                    PopIndent();
                    Write("}");
                    if (item != enumItems.Last())
                    {
                        Write();
                    }
                }

                PopIndent();
                Write("}");

                if (rbxEnum != rbxEnums.Last())
                {
                    Write();
                }
            }

            WriteFile();
        }
    }
}